import*as e from"three";import{Ray as t,Plane as n,MathUtils as s,EventDispatcher as r,Vector3 as o,MOUSE as i,TOUCH as a,Quaternion as l,Spherical as c,Vector2 as h}from"three";class d{static idGen=0;constructor(e,t){let n,s;this.promise=new Promise((e,t)=>{n=e,s=t});const r=n.bind(this),o=s.bind(this);e(((...e)=>{r(...e)}).bind(this),(e=>{o(e)}).bind(this)),this.abortHandler=t,this.id=d.idGen++}then(e){return new d((t,n)=>{this.promise=this.promise.then((...n)=>{const s=e(...n);s instanceof Promise||s instanceof d?s.then((...e)=>{t(...e)}):t(s)}).catch(e=>{n(e)})},this.abortHandler)}catch(e){return new d(t=>{this.promise=this.promise.then((...e)=>{t(...e)}).catch(e)},this.abortHandler)}abort(e){this.abortHandler&&this.abortHandler(e)}}class p extends Error{constructor(e){super(e)}}!function(){const e=new Float32Array(1),t=new Int32Array(e.buffer)}();const u=function(){const e=new Float32Array(1),t=new Int32Array(e.buffer);return function(n){return e[0]=n,t[0]}}(),m=function(e,t){return e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24)},A=function(e,t,n=!0,s){const r=new AbortController,o=r.signal;let i=!1;let a=!1;const l=(e,n,s,r)=>{t&&!a&&(t(e,n,s,r),100===e&&(a=!0))};return new d((t,r)=>{const a={signal:o};s&&(a.headers=s),fetch(e,a).then(async e=>{if(!e.ok){const t=await e.text();return void r(new Error(`Fetch failed: ${e.status} ${e.statusText} ${t}`))}const s=e.body.getReader();let o=0,a=e.headers.get("Content-Length"),c=a?parseInt(a):void 0;const h=[];for(;!i;)try{const{value:e,done:r}=await s.read();if(r){if(l(100,"100%",e,c),n){const e=new Blob(h).arrayBuffer();t(e)}else t();break}let i,a;o+=e.length,void 0!==c&&(i=o/c*100,a=`${i.toFixed(2)}%`),n&&h.push(e),l(i,a,e,c)}catch(e){return void r(e)}}).catch(e=>{r(new p(e))})},e=>{r.abort(e),i=!0})},f=function(e,t,n){return Math.max(Math.min(e,n),t)},g=function(){return performance.now()/1e3},S=e=>{if(e.geometry&&(e.geometry.dispose(),e.geometry=null),e.material&&(e.material.dispose(),e.material=null),e.children)for(let t of e.children)S(t)},C=(e,t)=>new Promise(n=>{window.setTimeout(()=>{n(e?e():void 0)},t?1:50)}),y=(e=0)=>{let t=0;if(1===e)t=9;else if(2===e)t=24;else if(3===e)t=45;else if(e>3)throw new Error("getSphericalHarmonicsComponentCountForDegree() -> Invalid spherical harmonics degree");return t},x=()=>{let e,t;return{promise:new Promise((n,s)=>{e=n,t=s}),resolve:e,reject:t}},v=e=>{let t,n;e||(e=()=>{});return{promise:new d((e,s)=>{t=e,n=s},e),resolve:t,reject:n}};class I{constructor(e,t,n){this.major=e,this.minor=t,this.patch=n}toString(){return`${this.major}_${this.minor}_${this.patch}`}}function B(){const e=navigator.userAgent;return e.indexOf("iPhone")>0||e.indexOf("iPad")>0}function w(){if(B()){const e=navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);return new I(parseInt(e[1]||0,10),parseInt(e[2]||0,10),parseInt(e[3]||0,10))}return null}class D{static OFFSET={X:0,Y:1,Z:2,SCALE0:3,SCALE1:4,SCALE2:5,ROTATION0:6,ROTATION1:7,ROTATION2:8,ROTATION3:9,FDC0:10,FDC1:11,FDC2:12,OPACITY:13,FRC0:14,FRC1:15,FRC2:16,FRC3:17,FRC4:18,FRC5:19,FRC6:20,FRC7:21,FRC8:22,FRC9:23,FRC10:24,FRC11:25,FRC12:26,FRC13:27,FRC14:28,FRC15:29,FRC16:30,FRC17:31,FRC18:32,FRC19:33,FRC20:34,FRC21:35,FRC22:36,FRC23:37};constructor(e=0){this.sphericalHarmonicsDegree=e,this.sphericalHarmonicsCount=y(this.sphericalHarmonicsDegree),this.componentCount=this.sphericalHarmonicsCount+14,this.defaultSphericalHarmonics=new Array(this.sphericalHarmonicsCount).fill(0),this.splats=[],this.splatCount=0}static createSplat(e=0){const t=[0,0,0,1,1,1,1,0,0,0,0,0,0,0];let n=y(e);for(let e=0;e<n;e++)t.push(0);return t}addSplat(e){this.splats.push(e),this.splatCount++}getSplat(e){return this.splats[e]}addDefaultSplat(){const e=D.createSplat(this.sphericalHarmonicsDegree);return this.addSplat(e),e}addSplatFromComonents(e,t,n,s,r,o,i,a,l,c,h,d,p,u,...m){const A=[e,t,n,s,r,o,i,a,l,c,h,d,p,u,...this.defaultSphericalHarmonics];for(let e=0;e<m.length&&e<this.sphericalHarmonicsCount;e++)A[e]=m[e];return this.addSplat(A),A}addSplatFromArray(e,t){const n=e.splats[t],s=D.createSplat(this.sphericalHarmonicsDegree);for(let e=0;e<this.componentCount&&e<n.length;e++)s[e]=n[e];this.addSplat(s)}}class b{static DefaultSplatSortDistanceMapPrecision=16;static MemoryPageSize=65536;static BytesPerFloat=4;static BytesPerInt=4;static MaxScenes=32;static ProgressiveLoadSectionSize=262144;static ProgressiveLoadSectionDelayDuration=15;static SphericalHarmonics8BitCompressionRange=3}const T=b.SphericalHarmonics8BitCompressionRange/2,E=e.DataUtils.toHalfFloat.bind(e.DataUtils),M=e.DataUtils.fromHalfFloat.bind(e.DataUtils),F=(t,n,s=!1,r,o)=>0===n?t:1===n||2===n&&!s?e.DataUtils.fromHalfFloat(t):2===n?P(t,r,o):void 0,R=(e,t,n)=>{e=f(e,t,n);const s=n-t;return f(Math.floor((e-t)/s*255),0,255)},P=(e,t,n)=>e/255*(n-t)+t,H=(e,t,n)=>R(M(e,t,n)),k=(e,t,n)=>E(P(e,t,n)),L=(e,t,n,s=!1)=>0===n?e.getFloat32(4*t,!0):1===n||2===n&&!s?e.getUint16(2*t,!0):e.getUint8(t,!0),O=function(){const e=e=>e;return function(t,n,s,r=!1){if(n===s)return t;let o=e;return 2===n&&r?1===s?o=k:0==s&&(o=P):2===n||1===n?0===s?o=M:2==s&&(o=r?H:e):0===n&&(1===s?o=E:2==s&&(o=r?R:E)),o(t)}}(),U=(e,t,n,s,r=0)=>{const o=new Uint8Array(e,t),i=new Uint8Array(n,s);for(let e=0;e<r;e++)i[e]=o[e]};class z{static CurrentMajorVersion=0;static CurrentMinorVersion=1;static CenterComponentCount=3;static ScaleComponentCount=3;static RotationComponentCount=4;static ColorComponentCount=4;static CovarianceComponentCount=6;static SplatScaleOffsetFloat=3;static SplatRotationOffsetFloat=6;static CompressionLevels={0:{BytesPerCenter:12,BytesPerScale:12,BytesPerRotation:16,BytesPerColor:4,ScaleOffsetBytes:12,RotationffsetBytes:24,ColorOffsetBytes:40,SphericalHarmonicsOffsetBytes:44,ScaleRange:1,BytesPerSphericalHarmonicsComponent:4,SphericalHarmonicsOffsetFloat:11,SphericalHarmonicsDegrees:{0:{BytesPerSplat:44},1:{BytesPerSplat:80},2:{BytesPerSplat:140}}},1:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:2,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:42},2:{BytesPerSplat:72}}},2:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:1,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:33},2:{BytesPerSplat:48}}}};static CovarianceSizeFloats=6;static HeaderSizeBytes=4096;static SectionHeaderSizeBytes=1024;static BucketStorageSizeBytes=12;static BucketStorageSizeFloats=3;static BucketBlockSize=5;static BucketSize=256;constructor(e,t=!0){this.constructFromBuffer(e,t)}getSplatCount(){return this.splatCount}getMaxSplatCount(){return this.maxSplatCount}getMinSphericalHarmonicsDegree(){let e=0;for(let t=0;t<this.sections.length;t++){const n=this.sections[t];(0===t||n.sphericalHarmonicsDegree<e)&&(e=n.sphericalHarmonicsDegree)}return e}getBucketIndex(e,t){let n;const s=e.fullBucketCount*e.bucketSize;if(t<s)n=Math.floor(t/e.bucketSize);else{let r=s;n=e.fullBucketCount;let o=0;for(;r<e.splatCount;){let s=e.partiallyFilledBucketLengths[o];if(t>=r&&t<r+s)break;r+=s,n++,o++}}return n}getSplatCenter(e,t,n){const s=this.globalSplatIndexToSectionMap[e],r=this.sections[s],o=e-r.splatCountOffset,i=r.bytesPerSplat*o,a=new DataView(this.bufferData,r.dataBase+i),l=L(a,0,this.compressionLevel),c=L(a,1,this.compressionLevel),h=L(a,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(r,o)*z.BucketStorageSizeFloats,n=r.compressionScaleFactor,s=r.compressionScaleRange;t.x=(l-s)*n+r.bucketArray[e],t.y=(c-s)*n+r.bucketArray[e+1],t.z=(h-s)*n+r.bucketArray[e+2]}else t.x=l,t.y=c,t.z=h;n&&t.applyMatrix4(n)}getSplatScaleAndRotation=function(){const t=new e.Matrix4,n=new e.Matrix4,s=new e.Matrix4,r=new e.Vector3,o=new e.Vector3,i=new e.Quaternion;return function(e,a,l,c,h){const d=this.globalSplatIndexToSectionMap[e],p=this.sections[d],u=e-p.splatCountOffset,m=p.bytesPerSplat*u+z.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,A=new DataView(this.bufferData,p.dataBase+m);o.set(F(L(A,0,this.compressionLevel),this.compressionLevel),F(L(A,1,this.compressionLevel),this.compressionLevel),F(L(A,2,this.compressionLevel),this.compressionLevel)),h&&(void 0!==h.x&&(o.x=h.x),void 0!==h.y&&(o.y=h.y),void 0!==h.z&&(o.z=h.z)),i.set(F(L(A,4,this.compressionLevel),this.compressionLevel),F(L(A,5,this.compressionLevel),this.compressionLevel),F(L(A,6,this.compressionLevel),this.compressionLevel),F(L(A,3,this.compressionLevel),this.compressionLevel)),c?(t.makeScale(o.x,o.y,o.z),n.makeRotationFromQuaternion(i),s.copy(t).multiply(n).multiply(c),s.decompose(r,l,a)):(a.copy(o),l.copy(i))}}();getSplatColor(e,t){const n=this.globalSplatIndexToSectionMap[e],s=this.sections[n],r=e-s.splatCountOffset,o=s.bytesPerSplat*r+z.CompressionLevels[this.compressionLevel].ColorOffsetBytes,i=new Uint8Array(this.bufferData,s.dataBase+o,4);t.set(i[0],i[1],i[2],i[3])}fillSplatCenterArray(t,n,s,r,o){const i=this.splatCount;s=s||0,r=r||i-1,void 0===o&&(o=s);const a=new e.Vector3;for(let e=s;e<=r;e++){const r=this.globalSplatIndexToSectionMap[e],i=this.sections[r],l=e-i.splatCountOffset,c=(e-s+o)*z.CenterComponentCount,h=i.bytesPerSplat*l,d=new DataView(this.bufferData,i.dataBase+h),p=L(d,0,this.compressionLevel),u=L(d,1,this.compressionLevel),m=L(d,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(i,l)*z.BucketStorageSizeFloats,t=i.compressionScaleFactor,n=i.compressionScaleRange;a.x=(p-n)*t+i.bucketArray[e],a.y=(u-n)*t+i.bucketArray[e+1],a.z=(m-n)*t+i.bucketArray[e+2]}else a.x=p,a.y=u,a.z=m;n&&a.applyMatrix4(n),t[c]=a.x,t[c+1]=a.y,t[c+2]=a.z}}fillSplatScaleRotationArray=function(){const t=new e.Matrix4,n=new e.Matrix4,s=new e.Matrix4,r=new e.Vector3,o=new e.Quaternion,i=new e.Vector3,a=e=>{const t=e.w<0?-1:1;e.x*=t,e.y*=t,e.z*=t,e.w*=t};return function(e,l,c,h,d,p,u,m){const A=this.splatCount;h=h||0,d=d||A-1,void 0===p&&(p=h);const f=(e,t)=>(void 0===t&&(t=this.compressionLevel),O(e,t,u));for(let u=h;u<=d;u++){const d=this.globalSplatIndexToSectionMap[u],A=this.sections[d],g=u-A.splatCountOffset,S=A.bytesPerSplat*g+z.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,C=(u-h+p)*z.ScaleComponentCount,y=(u-h+p)*z.RotationComponentCount,x=new DataView(this.bufferData,A.dataBase+S),v=m&&void 0!==m.x?m.x:L(x,0,this.compressionLevel),I=m&&void 0!==m.y?m.y:L(x,1,this.compressionLevel),B=m&&void 0!==m.z?m.z:L(x,2,this.compressionLevel),w=L(x,3,this.compressionLevel),D=L(x,4,this.compressionLevel),b=L(x,5,this.compressionLevel),T=L(x,6,this.compressionLevel);r.set(F(v,this.compressionLevel),F(I,this.compressionLevel),F(B,this.compressionLevel)),o.set(F(D,this.compressionLevel),F(b,this.compressionLevel),F(T,this.compressionLevel),F(w,this.compressionLevel)).normalize(),c&&(i.set(0,0,0),t.makeScale(r.x,r.y,r.z),n.makeRotationFromQuaternion(o),s.identity().premultiply(t).premultiply(n),s.premultiply(c),s.decompose(i,o,r),o.normalize()),a(o),e&&(e[C]=f(r.x,0),e[C+1]=f(r.y,0),e[C+2]=f(r.z,0)),l&&(l[y]=f(o.x,0),l[y+1]=f(o.y,0),l[y+2]=f(o.z,0),l[y+3]=f(o.w,0))}}}();static computeCovariance=function(){const t=new e.Matrix4,n=new e.Matrix3,s=new e.Matrix3,r=new e.Matrix3,o=new e.Matrix3,i=new e.Matrix3,a=new e.Matrix3;return function(e,l,c,h,d=0,p){t.makeScale(e.x,e.y,e.z),n.setFromMatrix4(t),t.makeRotationFromQuaternion(l),s.setFromMatrix4(t),r.copy(s).multiply(n),o.copy(r).transpose().premultiply(r),c&&(i.setFromMatrix4(c),a.copy(i).transpose(),o.multiply(a),o.premultiply(i)),p>=1?(h[d]=E(o.elements[0]),h[d+1]=E(o.elements[3]),h[d+2]=E(o.elements[6]),h[d+3]=E(o.elements[4]),h[d+4]=E(o.elements[7]),h[d+5]=E(o.elements[8])):(h[d]=o.elements[0],h[d+1]=o.elements[3],h[d+2]=o.elements[6],h[d+3]=o.elements[4],h[d+4]=o.elements[7],h[d+5]=o.elements[8])}}();fillSplatCovarianceArray(t,n,s,r,o,i){const a=this.splatCount,l=new e.Vector3,c=new e.Quaternion;s=s||0,r=r||a-1,void 0===o&&(o=s);for(let e=s;e<=r;e++){const r=this.globalSplatIndexToSectionMap[e],a=this.sections[r],h=e-a.splatCountOffset,d=(e-s+o)*z.CovarianceComponentCount,p=a.bytesPerSplat*h+z.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,u=new DataView(this.bufferData,a.dataBase+p);l.set(F(L(u,0,this.compressionLevel),this.compressionLevel),F(L(u,1,this.compressionLevel),this.compressionLevel),F(L(u,2,this.compressionLevel),this.compressionLevel)),c.set(F(L(u,4,this.compressionLevel),this.compressionLevel),F(L(u,5,this.compressionLevel),this.compressionLevel),F(L(u,6,this.compressionLevel),this.compressionLevel),F(L(u,3,this.compressionLevel),this.compressionLevel)),z.computeCovariance(l,c,n,t,d,i)}}fillSplatColorArray(e,t,n,s,r){const o=this.splatCount;n=n||0,s=s||o-1,void 0===r&&(r=n);for(let o=n;o<=s;o++){const s=this.globalSplatIndexToSectionMap[o],i=this.sections[s],a=o-i.splatCountOffset,l=(o-n+r)*z.ColorComponentCount,c=i.bytesPerSplat*a+z.CompressionLevels[this.compressionLevel].ColorOffsetBytes,h=new Uint8Array(this.bufferData,i.dataBase+c);let d=h[3];d=d>=t?d:0,e[l]=h[0],e[l+1]=h[1],e[l+2]=h[2],e[l+3]=d}}fillSphericalHarmonicsArray=function(){const t=[];for(let n=0;n<15;n++)t[n]=new e.Vector3;const n=new e.Matrix3,s=new e.Matrix4,r=new e.Vector3,o=new e.Vector3,i=new e.Quaternion,a=[],l=[],c=[],h=[],d=[],p=[],u=[],m=[],A=[],f=[],g=[],S=[],C=[],x=[],v=[],I=[],B=[],w=[],D=e=>e,b=(e,t,n,s)=>{e[0]=t,e[1]=n,e[2]=s},T=(e,t,n,s,r)=>{e[0]=L(t,s,r,!0),e[1]=L(t,s+n,r,!0),e[2]=L(t,s+n+n,r,!0)},P=(e,t)=>{t[0]=e[0],t[1]=e[1],t[2]=e[2]},k=(e,t,n,s)=>{t[n]=s(e[0]),t[n+1]=s(e[1]),t[n+2]=s(e[2])},O=(e,t,n,s,r)=>(t[0]=F(e[0],n,!0,s,r),t[1]=F(e[1],n,!0,s,r),t[2]=F(e[2],n,!0,s,r),t);return function(e,t,F,L,U,_,Q){const V=this.splatCount;L=L||0,U=U||V-1,void 0===_&&(_=L),F&&t>=1&&(s.copy(F),s.decompose(r,i,o),i.normalize(),s.makeRotationFromQuaternion(i),n.setFromMatrix4(s),b(a,n.elements[4],-n.elements[7],n.elements[1]),b(l,-n.elements[5],n.elements[8],-n.elements[2]),b(c,n.elements[3],-n.elements[6],n.elements[0]));const N=e=>H(e,this.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff),G=e=>R(e,this.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff);for(let n=L;n<=U;n++){const s=this.globalSplatIndexToSectionMap[n],r=this.sections[s];t=Math.min(t,r.sphericalHarmonicsDegree);const o=y(t),i=n-r.splatCountOffset,b=r.bytesPerSplat*i+z.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes,R=new DataView(this.bufferData,r.dataBase+b),H=(n-L+_)*o;let U=F?0:this.compressionLevel,V=D;U!==Q&&(1===U?0===Q?V=M:2==Q&&(V=N):0===U&&(1===Q?V=E:2==Q&&(V=G)));const K=this.minSphericalHarmonicsCoeff,q=this.maxSphericalHarmonicsCoeff;t>=1&&(T(A,R,3,0,this.compressionLevel),T(f,R,3,1,this.compressionLevel),T(g,R,3,2,this.compressionLevel),F?(O(A,A,this.compressionLevel,K,q),O(f,f,this.compressionLevel,K,q),O(g,g,this.compressionLevel,K,q),z.rotateSphericalHarmonics3(A,f,g,a,l,c,x,v,I)):(P(A,x),P(f,v),P(g,I)),k(x,e,H,V),k(v,e,H+3,V),k(I,e,H+6,V),t>=2&&(T(A,R,5,9,this.compressionLevel),T(f,R,5,10,this.compressionLevel),T(g,R,5,11,this.compressionLevel),T(S,R,5,12,this.compressionLevel),T(C,R,5,13,this.compressionLevel),F?(O(A,A,this.compressionLevel,K,q),O(f,f,this.compressionLevel,K,q),O(g,g,this.compressionLevel,K,q),O(S,S,this.compressionLevel,K,q),O(C,C,this.compressionLevel,K,q),z.rotateSphericalHarmonics5(A,f,g,S,C,a,l,c,h,d,p,u,m,x,v,I,B,w)):(P(A,x),P(f,v),P(g,I),P(S,B),P(C,w)),k(x,e,H+9,V),k(v,e,H+12,V),k(I,e,H+15,V),k(B,e,H+18,V),k(w,e,H+21,V)))}}}();static dot3=(e,t,n,s,r)=>{r[0]=r[1]=r[2]=0;const o=s[0],i=s[1],a=s[2];z.addInto3(e[0]*o,e[1]*o,e[2]*o,r),z.addInto3(t[0]*i,t[1]*i,t[2]*i,r),z.addInto3(n[0]*a,n[1]*a,n[2]*a,r)};static addInto3=(e,t,n,s)=>{s[0]=s[0]+e,s[1]=s[1]+t,s[2]=s[2]+n};static dot5=(e,t,n,s,r,o,i)=>{i[0]=i[1]=i[2]=0;const a=o[0],l=o[1],c=o[2],h=o[3],d=o[4];z.addInto3(e[0]*a,e[1]*a,e[2]*a,i),z.addInto3(t[0]*l,t[1]*l,t[2]*l,i),z.addInto3(n[0]*c,n[1]*c,n[2]*c,i),z.addInto3(s[0]*h,s[1]*h,s[2]*h,i),z.addInto3(r[0]*d,r[1]*d,r[2]*d,i)};static rotateSphericalHarmonics3=(e,t,n,s,r,o,i,a,l)=>{z.dot3(e,t,n,s,i),z.dot3(e,t,n,r,a),z.dot3(e,t,n,o,l)};static rotateSphericalHarmonics5=(e,t,n,s,r,o,i,a,l,c,h,d,p,u,m,A,f,g)=>{const S=Math.sqrt(1/4),C=Math.sqrt(3/4),y=Math.sqrt(1/3),x=Math.sqrt(4/3),v=Math.sqrt(1/12);l[0]=S*(a[2]*o[0]+a[0]*o[2]+(o[2]*a[0]+o[0]*a[2])),l[1]=a[1]*o[0]+o[1]*a[0],l[2]=C*(a[1]*o[1]+o[1]*a[1]),l[3]=a[1]*o[2]+o[1]*a[2],l[4]=S*(a[2]*o[2]-a[0]*o[0]+(o[2]*a[2]-o[0]*a[0])),z.dot5(e,t,n,s,r,l,u),c[0]=S*(i[2]*o[0]+i[0]*o[2]+(o[2]*i[0]+o[0]*i[2])),c[1]=i[1]*o[0]+o[1]*i[0],c[2]=C*(i[1]*o[1]+o[1]*i[1]),c[3]=i[1]*o[2]+o[1]*i[2],c[4]=S*(i[2]*o[2]-i[0]*o[0]+(o[2]*i[2]-o[0]*i[0])),z.dot5(e,t,n,s,r,c,m),h[0]=y*(i[2]*i[0]+i[0]*i[2])+-v*(a[2]*a[0]+a[0]*a[2]+(o[2]*o[0]+o[0]*o[2])),h[1]=x*i[1]*i[0]+-y*(a[1]*a[0]+o[1]*o[0]),h[2]=i[1]*i[1]+-S*(a[1]*a[1]+o[1]*o[1]),h[3]=x*i[1]*i[2]+-y*(a[1]*a[2]+o[1]*o[2]),h[4]=y*(i[2]*i[2]-i[0]*i[0])+-v*(a[2]*a[2]-a[0]*a[0]+(o[2]*o[2]-o[0]*o[0])),z.dot5(e,t,n,s,r,h,A),d[0]=S*(i[2]*a[0]+i[0]*a[2]+(a[2]*i[0]+a[0]*i[2])),d[1]=i[1]*a[0]+a[1]*i[0],d[2]=C*(i[1]*a[1]+a[1]*i[1]),d[3]=i[1]*a[2]+a[1]*i[2],d[4]=S*(i[2]*a[2]-i[0]*a[0]+(a[2]*i[2]-a[0]*i[0])),z.dot5(e,t,n,s,r,d,f),p[0]=S*(a[2]*a[0]+a[0]*a[2]-(o[2]*o[0]+o[0]*o[2])),p[1]=a[1]*a[0]-o[1]*o[0],p[2]=C*(a[1]*a[1]-o[1]*o[1]),p[3]=a[1]*a[2]-o[1]*o[2],p[4]=S*(a[2]*a[2]-a[0]*a[0]-(o[2]*o[2]-o[0]*o[0])),z.dot5(e,t,n,s,r,p,g)};static parseHeader(t){const n=new Uint8Array(t,0,z.HeaderSizeBytes),s=new Uint16Array(t,0,z.HeaderSizeBytes/2),r=new Uint32Array(t,0,z.HeaderSizeBytes/4),o=new Float32Array(t,0,z.HeaderSizeBytes/4);return{versionMajor:n[0],versionMinor:n[1],maxSectionCount:r[1],sectionCount:r[2],maxSplatCount:r[3],splatCount:r[4],compressionLevel:s[10],sceneCenter:new e.Vector3(o[6],o[7],o[8]),minSphericalHarmonicsCoeff:o[9]||-T,maxSphericalHarmonicsCoeff:o[10]||T}}static writeHeaderCountsToBuffer(e,t,n){const s=new Uint32Array(n,0,z.HeaderSizeBytes/4);s[2]=e,s[4]=t}static writeHeaderToBuffer(e,t){const n=new Uint8Array(t,0,z.HeaderSizeBytes),s=new Uint16Array(t,0,z.HeaderSizeBytes/2),r=new Uint32Array(t,0,z.HeaderSizeBytes/4),o=new Float32Array(t,0,z.HeaderSizeBytes/4);n[0]=e.versionMajor,n[1]=e.versionMinor,n[2]=0,n[3]=0,r[1]=e.maxSectionCount,r[2]=e.sectionCount,r[3]=e.maxSplatCount,r[4]=e.splatCount,s[10]=e.compressionLevel,o[6]=e.sceneCenter.x,o[7]=e.sceneCenter.y,o[8]=e.sceneCenter.z,o[9]=e.minSphericalHarmonicsCoeff||-T,o[10]=e.maxSphericalHarmonicsCoeff||T}static parseSectionHeaders(e,t,n=0,s){const r=e.compressionLevel,o=e.maxSectionCount,i=new Uint16Array(t,n,o*z.SectionHeaderSizeBytes/2),a=new Uint32Array(t,n,o*z.SectionHeaderSizeBytes/4),l=new Float32Array(t,n,o*z.SectionHeaderSizeBytes/4),c=[];let h=0,d=h/2,p=h/4,u=z.HeaderSizeBytes+e.maxSectionCount*z.SectionHeaderSizeBytes,m=0;for(let e=0;e<o;e++){const t=a[p+1],n=a[p+2],o=a[p+3],A=l[p+4],f=A/2,g=i[d+10],S=a[p+6]||z.CompressionLevels[r].ScaleRange,C=a[p+8],y=a[p+9],x=4*y,v=g*o+x,I=i[d+20],{bytesPerSplat:B}=z.calculateComponentStorage(r,I),w=B*t,D=w+v,b={bytesPerSplat:B,splatCountOffset:m,splatCount:s?t:0,maxSplatCount:t,bucketSize:n,bucketCount:o,bucketBlockSize:A,halfBucketBlockSize:f,bucketStorageSizeBytes:g,bucketsStorageSizeBytes:v,splatDataStorageSizeBytes:w,storageSizeBytes:D,compressionScaleRange:S,compressionScaleFactor:f/S,base:u,bucketsBase:u+x,dataBase:u+v,fullBucketCount:C,partiallyFilledBucketCount:y,sphericalHarmonicsDegree:I};c[e]=b,u+=D,h+=z.SectionHeaderSizeBytes,d=h/2,p=h/4,m+=t}return c}static writeSectionHeaderToBuffer(e,t,n,s=0){const r=new Uint16Array(n,s,z.SectionHeaderSizeBytes/2),o=new Uint32Array(n,s,z.SectionHeaderSizeBytes/4),i=new Float32Array(n,s,z.SectionHeaderSizeBytes/4);o[0]=e.splatCount,o[1]=e.maxSplatCount,o[2]=t>=1?e.bucketSize:0,o[3]=t>=1?e.bucketCount:0,i[4]=t>=1?e.bucketBlockSize:0,r[10]=t>=1?z.BucketStorageSizeBytes:0,o[6]=t>=1?e.compressionScaleRange:0,o[7]=e.storageSizeBytes,o[8]=t>=1?e.fullBucketCount:0,o[9]=t>=1?e.partiallyFilledBucketCount:0,r[20]=e.sphericalHarmonicsDegree}static writeSectionHeaderSplatCountToBuffer(e,t,n=0){new Uint32Array(t,n,z.SectionHeaderSizeBytes/4)[0]=e}constructFromBuffer(t,n){this.bufferData=t,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSectionMap=[];const s=z.parseHeader(this.bufferData);this.versionMajor=s.versionMajor,this.versionMinor=s.versionMinor,this.maxSectionCount=s.maxSectionCount,this.sectionCount=n?s.maxSectionCount:0,this.maxSplatCount=s.maxSplatCount,this.splatCount=n?s.maxSplatCount:0,this.compressionLevel=s.compressionLevel,this.sceneCenter=(new e.Vector3).copy(s.sceneCenter),this.minSphericalHarmonicsCoeff=s.minSphericalHarmonicsCoeff,this.maxSphericalHarmonicsCoeff=s.maxSphericalHarmonicsCoeff,this.sections=z.parseSectionHeaders(s,this.bufferData,z.HeaderSizeBytes,n),this.linkBufferArrays(),this.buildMaps()}static calculateComponentStorage(e,t){const n=z.CompressionLevels[e].BytesPerCenter,s=z.CompressionLevels[e].BytesPerScale,r=z.CompressionLevels[e].BytesPerRotation,o=z.CompressionLevels[e].BytesPerColor,i=y(t),a=z.CompressionLevels[e].BytesPerSphericalHarmonicsComponent*i;return{bytesPerCenter:n,bytesPerScale:s,bytesPerRotation:r,bytesPerColor:o,sphericalHarmonicsComponentsPerSplat:i,sphericalHarmonicsBytesPerSplat:a,bytesPerSplat:n+s+r+o+a}}linkBufferArrays(){for(let e=0;e<this.maxSectionCount;e++){const t=this.sections[e];t.bucketArray=new Float32Array(this.bufferData,t.bucketsBase,t.bucketCount*z.BucketStorageSizeFloats),t.partiallyFilledBucketCount>0&&(t.partiallyFilledBucketLengths=new Uint32Array(this.bufferData,t.base,t.partiallyFilledBucketCount))}}buildMaps(){let e=0;for(let t=0;t<this.maxSectionCount;t++){const n=this.sections[t];for(let s=0;s<n.maxSplatCount;s++){const n=e+s;this.globalSplatIndexToLocalSplatIndexMap[n]=s,this.globalSplatIndexToSectionMap[n]=t}e+=n.maxSplatCount}}updateLoadedCounts(e,t){z.writeHeaderCountsToBuffer(e,t,this.bufferData),this.sectionCount=e,this.splatCount=t}updateSectionLoadedCounts(e,t){const n=z.HeaderSizeBytes+z.SectionHeaderSizeBytes*e;z.writeSectionHeaderSplatCountToBuffer(t,this.bufferData,n),this.sections[e].splatCount=t}static writeSplatDataToSectionBuffer=function(){const t=new ArrayBuffer(12),n=new ArrayBuffer(12),s=new ArrayBuffer(16),r=new ArrayBuffer(4),o=new ArrayBuffer(256),i=new e.Quaternion,a=new e.Vector3,l=new e.Vector3,{X:c,Y:h,Z:d,SCALE0:p,SCALE1:u,SCALE2:m,ROTATION0:A,ROTATION1:g,ROTATION2:S,ROTATION3:C,FDC0:x,FDC1:v,FDC2:I,OPACITY:B,FRC0:w,FRC9:b}=D.OFFSET,M=(e,t,n)=>{const s=2*n+1;return e=Math.round(e*t)+n,f(e,0,s)};return function(e,f,D,F,P,H,k,L,O=-T,_=T){const Q=y(P),V=D,N=V+z.CompressionLevels[F].BytesPerCenter,G=N+z.CompressionLevels[F].BytesPerScale,K=G+z.CompressionLevels[F].BytesPerRotation,q=K+z.CompressionLevels[F].BytesPerColor;if(void 0!==e[A]?(i.set(e[A],e[g],e[S],e[C]),i.normalize()):i.set(1,0,0,0),void 0!==e[p]?a.set(e[p]||0,e[u]||0,e[m]||0):a.set(0,0,0),0===F){const t=new Float32Array(f,V,z.CenterComponentCount),n=new Float32Array(f,G,z.RotationComponentCount),s=new Float32Array(f,N,z.ScaleComponentCount);if(n.set([i.x,i.y,i.z,i.w]),s.set([a.x,a.y,a.z]),t.set([e[c],e[h],e[d]]),P>0){const t=new Float32Array(f,q,Q);if(P>=1){for(let n=0;n<9;n++)t[n]=e[w+n]||0;if(P>=2)for(let n=0;n<15;n++)t[n+9]=e[b+n]||0}}}else{const r=new Uint16Array(t,0,z.CenterComponentCount),p=new Uint16Array(s,0,z.RotationComponentCount),u=new Uint16Array(n,0,z.ScaleComponentCount);if(p.set([E(i.x),E(i.y),E(i.z),E(i.w)]),u.set([E(a.x),E(a.y),E(a.z)]),l.set(e[c],e[h],e[d]).sub(H),l.x=M(l.x,k,L),l.y=M(l.y,k,L),l.z=M(l.z,k,L),r.set([l.x,l.y,l.z]),P>0){const t=1===F?2:1,n=new(1===F?Uint16Array:Uint8Array)(o,0,Q);if(P>=1){for(let t=0;t<9;t++){const s=e[w+t]||0;n[t]=1===F?E(s):R(s,O,_)}const s=9*t;if(U(n.buffer,0,f,q,s),P>=2){for(let t=0;t<15;t++){const s=e[b+t]||0;n[t+9]=1===F?E(s):R(s,O,_)}U(n.buffer,s,f,q+s,15*t)}}}U(r.buffer,0,f,V,6),U(u.buffer,0,f,N,6),U(p.buffer,0,f,G,8)}const W=new Uint8ClampedArray(r,0,4);W.set([e[x]||0,e[v]||0,e[I]||0]),W[3]=e[B]||0,U(W.buffer,0,f,K,4)}}();static generateFromUncompressedSplatArrays(t,n,s,r,o,i,a=[]){let l,c,h=0;for(let e=0;e<t.length;e++){const n=t[e];h=Math.max(n.sphericalHarmonicsDegree,h)}for(let e=0;e<t.length;e++){const n=t[e];for(let e=0;e<n.splats.length;e++){const t=n.splats[e];for(let e=D.OFFSET.FRC0;e<D.OFFSET.FRC23&&e<t.length;e++)(!l||t[e]<l)&&(l=t[e]),(!c||t[e]>c)&&(c=t[e])}}l=l||-T,c=c||T;const{bytesPerSplat:d}=z.calculateComponentStorage(s,h),p=z.CompressionLevels[s].ScaleRange,u=[],m=[];let A=0;for(let r=0;r<t.length;r++){const f=t[r],g=new D(h);for(let e=0;e<f.splatCount;e++){const t=f.splats[e];(t[D.OFFSET.OPACITY]||0)>=n&&g.addSplat(t)}const S=a[r]||{},C=(S.blockSizeFactor||1)*(o||z.BucketBlockSize),y=Math.ceil((S.bucketSizeFactor||1)*(i||z.BucketSize)),x=z.computeBucketsForUncompressedSplatArray(g,C,y),v=x.fullBuckets.length,I=x.partiallyFullBuckets.map(e=>e.splats.length),B=I.length,w=[...x.fullBuckets,...x.partiallyFullBuckets],b=g.splats.length*d,T=4*B,E=s>=1?w.length*z.BucketStorageSizeBytes+T:0,M=b+E,F=new ArrayBuffer(M),R=p/(.5*C),P=new e.Vector3;let H=0;for(let e=0;e<w.length;e++){const t=w[e];P.fromArray(t.center);for(let e=0;e<t.splats.length;e++){let n=t.splats[e];const r=g.splats[n],o=E+H*d;z.writeSplatDataToSectionBuffer(r,F,o,s,h,P,R,p,l,c),H++}}if(A+=H,s>=1){const e=new Uint32Array(F,0,4*I.length);for(let t=0;t<I.length;t++)e[t]=I[t];const t=new Float32Array(F,T,w.length*z.BucketStorageSizeFloats);for(let e=0;e<w.length;e++){const n=w[e],s=3*e;t[s]=n.center[0],t[s+1]=n.center[1],t[s+2]=n.center[2]}}u.push(F);const k=new ArrayBuffer(z.SectionHeaderSizeBytes);z.writeSectionHeaderToBuffer({maxSplatCount:H,splatCount:H,bucketSize:y,bucketCount:w.length,bucketBlockSize:C,compressionScaleRange:p,storageSizeBytes:M,fullBucketCount:v,partiallyFilledBucketCount:B,sphericalHarmonicsDegree:h},s,k,0),m.push(k)}let f=0;for(let e of u)f+=e.byteLength;const g=z.HeaderSizeBytes+z.SectionHeaderSizeBytes*u.length+f,S=new ArrayBuffer(g);z.writeHeaderToBuffer({versionMajor:0,versionMinor:1,maxSectionCount:u.length,sectionCount:u.length,maxSplatCount:A,splatCount:A,compressionLevel:s,sceneCenter:r,minSphericalHarmonicsCoeff:l,maxSphericalHarmonicsCoeff:c},S);let C=z.HeaderSizeBytes;for(let e of m)new Uint8Array(S,C,z.SectionHeaderSizeBytes).set(new Uint8Array(e)),C+=z.SectionHeaderSizeBytes;for(let e of u)new Uint8Array(S,C,e.byteLength).set(new Uint8Array(e)),C+=e.byteLength;return new z(S)}static computeBucketsForUncompressedSplatArray(t,n,s){let r=t.splatCount;const o=n/2,i=new e.Vector3,a=new e.Vector3;for(let e=0;e<r;e++){const n=t.splats[e],s=[n[D.OFFSET.X],n[D.OFFSET.Y],n[D.OFFSET.Z]];(0===e||s[0]<i.x)&&(i.x=s[0]),(0===e||s[0]>a.x)&&(a.x=s[0]),(0===e||s[1]<i.y)&&(i.y=s[1]),(0===e||s[1]>a.y)&&(a.y=s[1]),(0===e||s[2]<i.z)&&(i.z=s[2]),(0===e||s[2]>a.z)&&(a.z=s[2])}const l=(new e.Vector3).copy(a).sub(i),c=Math.ceil(l.y/n),h=Math.ceil(l.z/n),d=new e.Vector3,p=[],u={};for(let e=0;e<r;e++){const r=t.splats[e],a=[r[D.OFFSET.X],r[D.OFFSET.Y],r[D.OFFSET.Z]],l=Math.floor((a[0]-i.x)/n),m=Math.floor((a[1]-i.y)/n),A=Math.floor((a[2]-i.z)/n);d.x=l*n+i.x+o,d.y=m*n+i.y+o,d.z=A*n+i.z+o;const f=l*(c*h)+m*h+A;let g=u[f];g||(u[f]=g={splats:[],center:d.toArray()}),g.splats.push(e),g.splats.length>=s&&(p.push(g),u[f]=null)}const m=[];for(let e in u)if(u.hasOwnProperty(e)){const t=u[e];t&&m.push(t)}return{fullBuckets:p,partiallyFullBuckets:m}}static preallocateUncompressed(t,n){const s=z.CompressionLevels[0].SphericalHarmonicsDegrees[n],r=z.HeaderSizeBytes+z.SectionHeaderSizeBytes,o=r+s.BytesPerSplat*t,i=new ArrayBuffer(o);return z.writeHeaderToBuffer({versionMajor:z.CurrentMajorVersion,versionMinor:z.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:t,splatCount:t,compressionLevel:0,sceneCenter:new e.Vector3},i),z.writeSectionHeaderToBuffer({maxSplatCount:t,splatCount:t,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:n},0,i,z.HeaderSizeBytes),{splatBuffer:new z(i,!0),splatBufferDataOffsetBytes:r}}}const _=new Uint8Array([112,108,121,10]),Q=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),V="end_header",N=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]),G=(e,t)=>{const n=(1<<t)-1;return(e&n)/n},K=(e,t)=>{e.x=G(t>>>21,11),e.y=G(t>>>11,10),e.z=G(t,11)},q=(e,t,n)=>e*(1-n)+t*n,W=(e,t)=>e.properties.find(e=>e.name===t&&e.storage)?.storage;class j{static decodeHeaderText(e){let t,n,s,r;const o=e.split("\n").filter(e=>!e.startsWith("comment "));let i=0,a=!1;for(let e=1;e<o.length;++e){const l=o[e].split(" ");switch(l[0]){case"format":if("binary_little_endian"!==l[1])throw new Error("Unsupported ply format");break;case"element":t={name:l[1],count:parseInt(l[2],10),properties:[],storageSizeBytes:0},"chunk"===t.name?n=t:"vertex"===t.name?s=t:"sh"===t.name&&(r=t);break;case"property":{if(!N.has(l[1]))throw new Error(`Unrecognized property data type '${l[1]}' in ply header`);const e=N.get(l[1]),n=e.BYTES_PER_ELEMENT*t.count;"vertex"===t.name&&(i+=e.BYTES_PER_ELEMENT),t.properties.push({type:l[1],name:l[2],storage:null,byteSize:e.BYTES_PER_ELEMENT,storageSizeByes:n}),t.storageSizeBytes+=n;break}case V:a=!0;break;default:throw new Error(`Unrecognized header value '${l[0]}' in ply header`)}if(a)break}let l=0,c=0;return r&&(c=r.properties.length,r.properties.length>=45?l=3:r.properties.length>=24?l=2:r.properties.length>=9&&(l=1)),{chunkElement:n,vertexElement:s,shElement:r,bytesPerSplat:i,headerSizeBytes:e.indexOf(V)+10+1,sphericalHarmonicsDegree:l,sphericalHarmonicsPerSplat:c}}static decodeHeader(e){let t,n=new Uint8Array(e);if(n.length>=_.length&&!((e,t)=>{if(e.length<t.length)return!1;for(let n=0;n<t.length;++n)if(e[n]!==t[n])return!1;return!0})(n,_))throw new Error("Invalid PLY header");if(t=((e,t)=>{const n=e.length-t.length;let s,r;for(s=0;s<=n;++s){for(r=0;r<t.length&&e[s+r]===t[r];++r);if(r===t.length)return s}return-1})(n,Q),-1===t)throw new Error("End of PLY header not found");const s=new TextDecoder("ascii").decode(n.slice(0,t)),{chunkElement:r,vertexElement:o,shElement:i,sphericalHarmonicsDegree:a,sphericalHarmonicsPerSplat:l,bytesPerSplat:c}=j.decodeHeaderText(s);return{headerSizeBytes:t+Q.length,bytesPerSplat:c,chunkElement:r,vertexElement:o,shElement:i,sphericalHarmonicsDegree:a,sphericalHarmonicsPerSplat:l}}static readElementData(e,t,n,s,r,o=null){let i=t instanceof DataView?t:new DataView(t);s=s||0,r=r||e.count-1;for(let t=s;t<=r;++t)for(let s=0;s<e.properties.length;++s){const r=e.properties[s],a=N.get(r.type),l=a.BYTES_PER_ELEMENT*e.count;if(r.storage&&!(r.storage.byteLength<l)||o&&!o(r.name)||(r.storage=new a(e.count)),r.storage)switch(r.type){case"char":r.storage[t]=i.getInt8(n);break;case"uchar":r.storage[t]=i.getUint8(n);break;case"short":r.storage[t]=i.getInt16(n,!0);break;case"ushort":r.storage[t]=i.getUint16(n,!0);break;case"int":r.storage[t]=i.getInt32(n,!0);break;case"uint":r.storage[t]=i.getUint32(n,!0);break;case"float":r.storage[t]=i.getFloat32(n,!0);break;case"double":r.storage[t]=i.getFloat64(n,!0)}n+=r.byteSize}return n}static readPly(e,t=null){const n=j.decodeHeader(e);let s=j.readElementData(n.chunkElement,e,n.headerSizeBytes,null,null,t);return s=j.readElementData(n.vertexElement,e,s,null,null,t),j.readElementData(n.shElement,e,s,null,null,t),{chunkElement:n.chunkElement,vertexElement:n.vertexElement,shElement:n.shElement,sphericalHarmonicsDegree:n.sphericalHarmonicsDegree,sphericalHarmonicsPerSplat:n.sphericalHarmonicsPerSplat}}static getElementStorageArrays(e,t,n){const s={};if(t){const n=W(e,"min_r"),r=W(e,"min_g"),o=W(e,"min_b"),i=W(e,"max_r"),a=W(e,"max_g"),l=W(e,"max_b"),c=W(e,"min_x"),h=W(e,"min_y"),d=W(e,"min_z"),p=W(e,"max_x"),u=W(e,"max_y"),m=W(e,"max_z"),A=W(e,"min_scale_x"),f=W(e,"min_scale_y"),g=W(e,"min_scale_z"),S=W(e,"max_scale_x"),C=W(e,"max_scale_y"),y=W(e,"max_scale_z"),x=W(t,"packed_position"),v=W(t,"packed_rotation"),I=W(t,"packed_scale"),B=W(t,"packed_color");s.colorExtremes={minR:n,maxR:i,minG:r,maxG:a,minB:o,maxB:l},s.positionExtremes={minX:c,maxX:p,minY:h,maxY:u,minZ:d,maxZ:m},s.scaleExtremes={minScaleX:A,maxScaleX:S,minScaleY:f,maxScaleY:C,minScaleZ:g,maxScaleZ:y},s.position=x,s.rotation=v,s.scale=I,s.color=B}if(n){const e={};for(let t=0;t<45;t++){const s=`f_rest_${t}`,r=W(n,s);if(!r)break;e[s]=r}s.sh=e}return s}static decompressBaseSplat=function(){const t=new e.Vector3,n=new e.Quaternion,s=new e.Vector3,r=new e.Vector4,o=D.OFFSET;return function(e,i,a,l,c,h,d,p,u,m){m=m||D.createSplat();const A=Math.floor((i+e)/256);var g,S;return K(t,a[e]),((e,t)=>{const n=1/(.5*Math.sqrt(2)),s=(G(t>>>20,10)-.5)*n,r=(G(t>>>10,10)-.5)*n,o=(G(t,10)-.5)*n,i=Math.sqrt(1-(s*s+r*r+o*o));switch(t>>>30){case 0:e.set(i,s,r,o);break;case 1:e.set(s,i,r,o);break;case 2:e.set(s,r,i,o);break;case 3:e.set(s,r,o,i)}})(n,d[e]),K(s,c[e]),g=r,S=u[e],g.x=G(S>>>24,8),g.y=G(S>>>16,8),g.z=G(S>>>8,8),g.w=G(S,8),m[o.X]=q(l.minX[A],l.maxX[A],t.x),m[o.Y]=q(l.minY[A],l.maxY[A],t.y),m[o.Z]=q(l.minZ[A],l.maxZ[A],t.z),m[o.ROTATION0]=n.x,m[o.ROTATION1]=n.y,m[o.ROTATION2]=n.z,m[o.ROTATION3]=n.w,m[o.SCALE0]=Math.exp(q(h.minScaleX[A],h.maxScaleX[A],s.x)),m[o.SCALE1]=Math.exp(q(h.minScaleY[A],h.maxScaleY[A],s.y)),m[o.SCALE2]=Math.exp(q(h.minScaleZ[A],h.maxScaleZ[A],s.z)),p.minR&&p.maxR?m[o.FDC0]=f(Math.round(255*q(p.minR[A],p.maxR[A],r.x)),0,255):m[o.FDC0]=f(Math.floor(255*r.x),0,255),p.minG&&p.maxG?m[o.FDC1]=f(Math.round(255*q(p.minG[A],p.maxG[A],r.y)),0,255):m[o.FDC1]=f(Math.floor(255*r.y),0,255),p.minB&&p.maxB?m[o.FDC2]=f(Math.round(255*q(p.minB[A],p.maxB[A],r.z)),0,255):m[o.FDC2]=f(Math.floor(255*r.z),0,255),m[o.OPACITY]=f(Math.floor(255*r.w),0,255),m}}();static decompressSphericalHarmonics=function(){const e=[0,3,8,15],t=[0,1,2,9,10,11,12,13,24,25,26,27,28,29,30,3,4,5,14,15,16,17,18,31,32,33,34,35,36,37,6,7,8,19,20,21,22,23,38,39,40,41,42,43,44];return function(n,s,r,o,i){i=i||D.createSplat();let a=e[r],l=e[o];for(let e=0;e<3;++e)for(let r=0;r<15;++r){const o=t[15*e+r];r<a&&r<l&&(i[D.OFFSET.FRC0+o]=s[e*l+r][n]*(8/255)-4)}return i}}();static parseToUncompressedSplatBufferSection(e,t,n,s,r,o,i,a,l=null){j.readElementData(t,o,0,n,s,l);const c=z.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat,{positionExtremes:h,scaleExtremes:d,colorExtremes:p,position:u,rotation:m,scale:A,color:f}=j.getElementStorageArrays(e,t),g=D.createSplat();for(let e=n;e<=s;++e){j.decompressBaseSplat(e,r,u,h,A,d,m,p,f,g);const t=e*c+a;z.writeSplatDataToSectionBuffer(g,i,t,0,0)}}static parseToUncompressedSplatArraySection(e,t,n,s,r,o,i,a=null){j.readElementData(t,o,0,n,s,a);const{positionExtremes:l,scaleExtremes:c,colorExtremes:h,position:d,rotation:p,scale:u,color:m}=j.getElementStorageArrays(e,t);for(let e=n;e<=s;++e){const t=D.createSplat();j.decompressBaseSplat(e,r,d,l,u,c,p,h,m,t),i.addSplat(t)}}static parseSphericalHarmonicsToUncompressedSplatArraySection(e,t,n,s,r,o,i,a,l,c=null){j.readElementData(t,r,o,n,s,c);const{sh:h}=j.getElementStorageArrays(e,void 0,t),d=Object.values(h);for(let e=n;e<=s;++e)j.decompressSphericalHarmonics(e,d,i,a,l.splats[e])}static parseToUncompressedSplatArray(e,t){const{chunkElement:n,vertexElement:s,shElement:r,sphericalHarmonicsDegree:o}=j.readPly(e);t=Math.min(t,o);const i=new D(t),{positionExtremes:a,scaleExtremes:l,colorExtremes:c,position:h,rotation:d,scale:p,color:u}=j.getElementStorageArrays(n,s);let m;if(t>0){const{sh:e}=j.getElementStorageArrays(n,void 0,r);m=Object.values(e)}for(let e=0;e<s.count;++e){i.addDefaultSplat();const n=i.getSplat(i.splatCount-1);j.decompressBaseSplat(e,0,h,a,p,l,d,c,u,n),t>0&&j.decompressSphericalHarmonics(e,m,t,o,n)}return i}static parseToUncompressedSplatBuffer(e,t){const{chunkElement:n,vertexElement:s,shElement:r,sphericalHarmonicsDegree:o}=j.readPly(e);t=Math.min(t,o);const{splatBuffer:i,splatBufferDataOffsetBytes:a}=z.preallocateUncompressed(s.count,t),{positionExtremes:l,scaleExtremes:c,colorExtremes:h,position:d,rotation:p,scale:u,color:m}=j.getElementStorageArrays(n,s);let A;if(t>0){const{sh:e}=j.getElementStorageArrays(n,void 0,r);A=Object.values(e)}const f=z.CompressionLevels[0].SphericalHarmonicsDegrees[t].BytesPerSplat,g=D.createSplat(t);for(let e=0;e<s.count;++e){j.decompressBaseSplat(e,0,d,l,u,c,p,h,m,g),t>0&&j.decompressSphericalHarmonics(e,A,t,o,g);const n=e*f+a;z.writeSplatDataToSectionBuffer(g,i.bufferData,n,0,t)}return i}}const Y=0,X=1,J=2,[Z,$,ee,te,ne,se,re]=[0,1,2,3,4,5,6],oe={double:Z,int:$,uint:ee,float:te,short:ne,ushort:se,uchar:re},ie={[Z]:8,[$]:4,[ee]:4,[te]:4,[ne]:2,[se]:2,[re]:1};class ae{static HeaderEndToken="end_header";static decodeSectionHeader(e,t,n=0){const s=[];let r=!1,o=-1,i=0,a=!1,l=null;const c=[],h=[],d=[],p=[],u={};for(let m=n;m<e.length;m++){const A=e[m].trim();if(A.startsWith("element")){if(r){o--;break}{r=!0,n=m,o=m;const e=A.split(" ");let t=0;for(let n of e){const e=n.trim();e.length>0&&(t++,2===t?l=e:3===t&&(i=parseInt(e)))}}}else if(A.startsWith("property")){const e=A.match(/(\w+)\s+(\w+)\s+(\w+)/);if(e){const n=e[2],s=e[3];d.push(s);const r=t[s];u[s]=n;const o=oe[n];void 0!==r&&(p.push(s),c.push(r),h[r]=o)}}if(A===ae.HeaderEndToken){a=!0;break}r&&(s.push(A),o++)}const m=[];let A=0;for(let e of d){const n=u[e];if(u.hasOwnProperty(e)){const n=t[e];void 0!==n&&(m[n]=A)}A+=ie[oe[n]]}const f=ae.decodeSphericalHarmonicsFromSectionHeader(d,t);return{headerLines:s,headerStartLine:n,headerEndLine:o,fieldTypes:h,fieldIds:c,fieldOffsets:m,bytesPerVertex:A,vertexCount:i,dataSizeBytes:A*i,endOfHeader:a,sectionName:l,sphericalHarmonicsDegree:f.degree,sphericalHarmonicsCoefficientsPerChannel:f.coefficientsPerChannel,sphericalHarmonicsDegree1Fields:f.degree1Fields,sphericalHarmonicsDegree2Fields:f.degree2Fields}}static decodeSphericalHarmonicsFromSectionHeader(e,t){let n=0,s=0;for(let t of e)t.startsWith("f_rest")&&n++;s=n/3;let r=0;s>=3&&(r=1),s>=8&&(r=2);let o=[],i=[];for(let e=0;e<3;e++){if(r>=1)for(let n=0;n<3;n++)o.push(t["f_rest_"+(n+s*e)]);if(r>=2)for(let n=0;n<5;n++)i.push(t["f_rest_"+(n+s*e+3)])}return{degree:r,coefficientsPerChannel:s,degree1Fields:o,degree2Fields:i}}static getHeaderSectionNames(e){const t=[];for(let n of e)if(n.startsWith("element")){const e=n.split(" ");let s=0;for(let n of e){const e=n.trim();e.length>0&&(s++,2===s&&t.push(e))}}return t}static checkTextForEndHeader(e){return!!e.includes(ae.HeaderEndToken)}static checkBufferForEndHeader(e,t,n,s){const r=new Uint8Array(e,Math.max(0,t-n),n),o=s.decode(r);return ae.checkTextForEndHeader(o)}static extractHeaderFromBufferToText(e){const t=new TextDecoder;let n=0,s="";const r=100;for(;;){if(n+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const o=new Uint8Array(e,n,r);if(s+=t.decode(o),n+=r,ae.checkBufferForEndHeader(e,n,200,t))break}return s}static readHeaderFromBuffer(e){const t=new TextDecoder;let n=0,s="";const r=100;for(;;){if(n+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const o=new Uint8Array(e,n,r);if(s+=t.decode(o),n+=r,ae.checkBufferForEndHeader(e,n,200,t))break}return s}static convertHeaderTextToLines(e){const t=e.split("\n"),n=[];for(let e=0;e<t.length;e++){const s=t[e].trim();if(n.push(s),s===ae.HeaderEndToken)break}return n}static determineHeaderFormatFromHeaderText(e){const t=ae.convertHeaderTextToLines(e);let n=Y;for(let e=0;e<t.length;e++){const s=t[e].trim();if(s.startsWith("element chunk")||s.match(/[A-Za-z]*packed_[A-Za-z]*/))n=J;else if(s.startsWith("element codebook_centers"))n=X;else if(s===ae.HeaderEndToken)break}return n}static determineHeaderFormatFromPlyBuffer(e){const t=ae.extractHeaderFromBufferToText(e);return ae.determineHeaderFormatFromHeaderText(t)}static readVertex(e,t,n,s,r,o,i=!0){const a=n*t.bytesPerVertex+s,l=t.fieldOffsets,c=t.fieldTypes;for(let t of r){const n=c[t];n===te?o[t]=e.getFloat32(a+l[t],!0):n===ne?o[t]=e.getInt16(a+l[t],!0):n===se?o[t]=e.getUint16(a+l[t],!0):n===$?o[t]=e.getInt32(a+l[t],!0):n===ee?o[t]=e.getUint32(a+l[t],!0):n===re&&(o[t]=i?e.getUint8(a+l[t])/255:e.getUint8(a+l[t]))}}}const le=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0"],ce=le.map((e,t)=>t),[he,de,pe,ue,me,Ae,fe,ge,Se,Ce,ye,xe,ve,Ie,Be,we,De,be]=ce;class Te{static decodeHeaderLines(e){let t=0;e.forEach(e=>{e.includes("f_rest_")&&t++});let n=0;t>=45?n=45:t>=24?n=24:t>=9&&(n=9);let s=Array.from(Array(Math.max(n-1,0))).map((e,t)=>`f_rest_${t+1}`);const r=[...le,...s],o=r.map((e,t)=>t),i=o.reduce((e,t)=>(e[r[t]]=t,e),{}),a=ae.decodeSectionHeader(e,i,0);return a.splatCount=a.vertexCount,a.bytesPerSplat=a.bytesPerVertex,a.fieldsToReadIndexes=o,a}static decodeHeaderText(e){const t=ae.convertHeaderTextToLines(e),n=Te.decodeHeaderLines(t);return n.headerText=e,n.headerSizeBytes=e.indexOf(ae.HeaderEndToken)+ae.HeaderEndToken.length+1,n}static decodeHeaderFromBuffer(e){const t=ae.readHeaderFromBuffer(e);return Te.decodeHeaderText(t)}static findSplatData(e,t){return new DataView(e,t.headerSizeBytes)}static parseToUncompressedSplatBufferSection(e,t,n,s,r,o,i,a=0){a=Math.min(a,e.sphericalHarmonicsDegree);const l=z.CompressionLevels[0].SphericalHarmonicsDegrees[a].BytesPerSplat;for(let c=t;c<=n;c++){const t=Te.parseToUncompressedSplat(s,c,e,r,a),n=c*l+i;z.writeSplatDataToSectionBuffer(t,o,n,0,a)}}static parseToUncompressedSplatArraySection(e,t,n,s,r,o,i=0){i=Math.min(i,e.sphericalHarmonicsDegree);for(let a=t;a<=n;a++){const t=Te.parseToUncompressedSplat(s,a,e,r,i);o.addSplat(t)}}static decodeSectionSplatData(e,t,n,s,r=!0){if(s=Math.min(s,n.sphericalHarmonicsDegree),r){const r=new D(s);for(let o=0;o<t;o++){const t=Te.parseToUncompressedSplat(e,o,n,0,s);r.addSplat(t)}return r}{const{splatBuffer:r,splatBufferDataOffsetBytes:o}=z.preallocateUncompressed(t,s);return Te.parseToUncompressedSplatBufferSection(n,0,t-1,e,0,r.bufferData,o,s),r}}static parseToUncompressedSplat=function(){let t=[];const n=new e.Quaternion,s=D.OFFSET.X,r=D.OFFSET.Y,o=D.OFFSET.Z,i=D.OFFSET.SCALE0,a=D.OFFSET.SCALE1,l=D.OFFSET.SCALE2,c=D.OFFSET.ROTATION0,h=D.OFFSET.ROTATION1,d=D.OFFSET.ROTATION2,p=D.OFFSET.ROTATION3,u=D.OFFSET.FDC0,m=D.OFFSET.FDC1,A=D.OFFSET.FDC2,g=D.OFFSET.OPACITY,S=[];for(let e=0;e<45;e++)S[e]=D.OFFSET.FRC0+e;return function(e,C,y,x=0,v=0){v=Math.min(v,y.sphericalHarmonicsDegree),Te.readSplat(e,y,C,x,t);const I=D.createSplat(v);if(void 0!==t[he]?(I[i]=Math.exp(t[he]),I[a]=Math.exp(t[de]),I[l]=Math.exp(t[pe])):(I[i]=.01,I[a]=.01,I[l]=.01),void 0!==t[ye]){const e=.28209479177387814;I[u]=255*(.5+e*t[ye]),I[m]=255*(.5+e*t[xe]),I[A]=255*(.5+e*t[ve])}else void 0!==t[Be]?(I[u]=255*t[Be],I[m]=255*t[we],I[A]=255*t[De]):(I[u]=0,I[m]=0,I[A]=0);if(void 0!==t[Ie]&&(I[g]=1/(1+Math.exp(-t[Ie]))*255),I[u]=f(Math.floor(I[u]),0,255),I[m]=f(Math.floor(I[m]),0,255),I[A]=f(Math.floor(I[A]),0,255),I[g]=f(Math.floor(I[g]),0,255),v>=1&&void 0!==t[be]){for(let e=0;e<9;e++)I[S[e]]=t[y.sphericalHarmonicsDegree1Fields[e]];if(v>=2)for(let e=0;e<15;e++)I[S[9+e]]=t[y.sphericalHarmonicsDegree2Fields[e]]}return n.set(t[ue],t[me],t[Ae],t[fe]),n.normalize(),I[c]=n.x,I[h]=n.y,I[d]=n.z,I[p]=n.w,I[s]=t[ge],I[r]=t[Se],I[o]=t[Ce],I}}();static readSplat(e,t,n,s,r){return ae.readVertex(e,t,n,s,t.fieldsToReadIndexes,r,!0)}static parseToUncompressedSplatArray(e,t=0){const{header:n,splatCount:s,splatData:r}=Ee(e);return Te.decodeSectionSplatData(r,s,n,t,!0)}static parseToUncompressedSplatBuffer(e,t=0){const{header:n,splatCount:s,splatData:r}=Ee(e);return Te.decodeSectionSplatData(r,s,n,t,!1)}}function Ee(e){const t=Te.decodeHeaderFromBuffer(e);return{header:t,splatCount:t.splatCount,splatData:Te.findSplatData(e,t)}}const Me=["features_dc","features_rest_0","features_rest_1","features_rest_2","features_rest_3","features_rest_4","features_rest_5","features_rest_6","features_rest_7","features_rest_8","features_rest_9","features_rest_10","features_rest_11","features_rest_12","features_rest_13","features_rest_14","opacity","scaling","rotation_re","rotation_im"],Fe=Me.map((e,t)=>t),[Re,Pe,He,ke,Le,Oe,Ue]=[0,1,4,16,17,18,19],ze=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0","f_rest_1","f_rest_2","f_rest_3","f_rest_4","f_rest_5","f_rest_6","f_rest_7","f_rest_8","f_rest_9","f_rest_10","f_rest_11","f_rest_12","f_rest_13","f_rest_14","f_rest_15","f_rest_16","f_rest_17","f_rest_18","f_rest_19","f_rest_20","f_rest_21","f_rest_22","f_rest_23","f_rest_24","f_rest_25","f_rest_26","f_rest_27","f_rest_28","f_rest_29","f_rest_30","f_rest_31","f_rest_32","f_rest_33","f_rest_34","f_rest_35","f_rest_36","f_rest_37","f_rest_38","f_rest_39","f_rest_40","f_rest_41","f_rest_42","f_rest_43","f_rest_44","f_rest_45"],_e=ze.map((e,t)=>t),[Qe,Ve,Ne,Ge,Ke,qe,We,je,Ye,Xe,Je,Ze,$e,et]=_e,tt=Je,nt=Ze,st=$e,rt=e=>{const t=(31744&e)>>10,n=1023&e;return(e>>15?-1:1)*(t?31===t?n?NaN:1/0:Math.pow(2,t-15)*(1+n/1024):n/1024*6103515625e-14)};class ot{static decodeSectionHeadersFromHeaderLines(e){const t=_e.reduce((e,t)=>(e[ze[t]]=t,e),{}),n=Fe.reduce((e,t)=>(e[Me[t]]=t,e),{}),s=ae.getHeaderSectionNames(e);let r;for(let e=0;e<s.length;e++){"codebook_centers"===s[e]&&(r=e)}let o=0,i=!1;const a=[];let l=0;for(;!i;){let s;s=l===r?ae.decodeSectionHeader(e,n,o):ae.decodeSectionHeader(e,t,o),i=s.endOfHeader,o=s.headerEndLine+1,i||(s.splatCount=s.vertexCount,s.bytesPerSplat=s.bytesPerVertex),a.push(s),l++}return a}static decodeSectionHeadersFromHeaderText(e){const t=ae.convertHeaderTextToLines(e);return ot.decodeSectionHeadersFromHeaderLines(t)}static getSplatCountFromSectionHeaders(e){let t=0;for(let n of e)"codebook_centers"!==n.sectionName&&(t+=n.vertexCount);return t}static decodeHeaderFromHeaderText(e){const t=e.indexOf(ae.HeaderEndToken)+ae.HeaderEndToken.length+1,n=ot.decodeSectionHeadersFromHeaderText(e);return{headerSizeBytes:t,sectionHeaders:n,splatCount:ot.getSplatCountFromSectionHeaders(n)}}static decodeHeaderFromBuffer(e){const t=ae.readHeaderFromBuffer(e);return ot.decodeHeaderFromHeaderText(t)}static findVertexData(e,t,n){let s=t.headerSizeBytes;for(let e=0;e<n&&e<t.sectionHeaders.length;e++){s+=t.sectionHeaders[e].dataSizeBytes}return new DataView(e,s,t.sectionHeaders[n].dataSizeBytes)}static decodeCodeBook(e,t){const n=[],s=[];for(let r=0;r<t.vertexCount;r++){ae.readVertex(e,t,r,0,Fe,n);for(let e of Fe){const t=Fe[e];let r=s[t];r||(s[t]=r=[]),r.push(n[e])}}for(let e=0;e<s.length;e++){const t=s[e],n=.28209479177387814;for(let s=0;s<t.length;s++){const r=rt(t[s]);t[s]=e===ke?Math.round(1/(1+Math.exp(-r))*255):e===Re?Math.round(255*(.5+n*r)):e===Le?Math.exp(r):r}}return s}static decodeSectionSplatData(e,t,n,s,r){r=Math.min(r,n.sphericalHarmonicsDegree);const o=new D(r);for(let i=0;i<t;i++){const t=ot.parseToUncompressedSplat(e,i,n,s,0,r);o.addSplat(t)}return o}static parseToUncompressedSplat=function(){let t=[];const n=new e.Quaternion,s=D.OFFSET.X,r=D.OFFSET.Y,o=D.OFFSET.Z,i=D.OFFSET.SCALE0,a=D.OFFSET.SCALE1,l=D.OFFSET.SCALE2,c=D.OFFSET.ROTATION0,h=D.OFFSET.ROTATION1,d=D.OFFSET.ROTATION2,p=D.OFFSET.ROTATION3,u=D.OFFSET.FDC0,m=D.OFFSET.FDC1,A=D.OFFSET.FDC2,g=D.OFFSET.OPACITY,S=[];for(let e=0;e<45;e++)S[e]=D.OFFSET.FRC0+e;return function(e,C,y,x,v=0,I=0){I=Math.min(I,y.sphericalHarmonicsDegree),ot.readSplat(e,y,C,v,t);const B=D.createSplat(I);if(void 0!==t[Qe]?(B[i]=x[Le][t[Qe]],B[a]=x[Le][t[Ve]],B[l]=x[Le][t[Ne]]):(B[i]=.01,B[a]=.01,B[l]=.01),void 0!==t[Je]?(B[u]=x[Re][t[Je]],B[m]=x[Re][t[Ze]],B[A]=x[Re][t[$e]]):void 0!==t[tt]?(B[u]=255*t[tt],B[m]=255*t[nt],B[A]=255*t[st]):(B[u]=0,B[m]=0,B[A]=0),void 0!==t[et]&&(B[g]=x[ke][t[et]]),B[u]=f(Math.floor(B[u]),0,255),B[m]=f(Math.floor(B[m]),0,255),B[A]=f(Math.floor(B[A]),0,255),B[g]=f(Math.floor(B[g]),0,255),I>=1&&y.sphericalHarmonicsDegree>=1){for(let e=0;e<9;e++){const n=x[Pe+e%3];B[S[e]]=n[t[y.sphericalHarmonicsDegree1Fields[e]]]}if(I>=2&&y.sphericalHarmonicsDegree>=2)for(let e=0;e<15;e++){const n=x[He+e%5];B[S[9+e]]=n[t[y.sphericalHarmonicsDegree2Fields[e]]]}}const w=x[Oe][t[Ge]],b=x[Ue][t[Ke]],T=x[Ue][t[qe]],E=x[Ue][t[We]];return n.set(w,b,T,E),n.normalize(),B[c]=n.x,B[h]=n.y,B[d]=n.z,B[p]=n.w,B[s]=rt(t[je]),B[r]=rt(t[Ye]),B[o]=rt(t[Xe]),B}}();static readSplat(e,t,n,s,r){return ae.readVertex(e,t,n,s,_e,r,!1)}static parseToUncompressedSplatArray(e,t=0){const n=[],s=ot.decodeHeaderFromBuffer(e,t);let r;for(let t=0;t<s.sectionHeaders.length;t++){const n=s.sectionHeaders[t];if("codebook_centers"===n.sectionName){const o=ot.findVertexData(e,s,t);r=ot.decodeCodeBook(o,n)}}for(let o=0;o<s.sectionHeaders.length;o++){const i=s.sectionHeaders[o];if("codebook_centers"!==i.sectionName){const a=i.vertexCount,l=ot.findVertexData(e,s,o),c=ot.decodeSectionSplatData(l,a,i,r,t);n.push(c)}}const o=new D(t);for(let e of n)for(let t of e.splats)o.addSplat(t);return o}}class it{static parseToUncompressedSplatArray(e,t=0){const n=ae.determineHeaderFormatFromPlyBuffer(e);return n===J?j.parseToUncompressedSplatArray(e,t):n===Y?Te.parseToUncompressedSplatArray(e,t):n===X?ot.parseToUncompressedSplatArray(e,t):void 0}static parseToUncompressedSplatBuffer(e,t=0){const n=ae.determineHeaderFormatFromPlyBuffer(e);if(n===J)return j.parseToUncompressedSplatBuffer(e,t);if(n===Y)return Te.parseToUncompressedSplatBuffer(e,t);if(n===X)throw new Error("parseToUncompressedSplatBuffer() is not implemented for INRIA V2 PLY files")}}class at{constructor(e,t,n,s){this.sectionCount=e,this.sectionFilters=t,this.groupingParameters=n,this.partitionGenerator=s}partitionUncompressedSplatArray(e){let t,n,s;if(this.partitionGenerator){const r=this.partitionGenerator(e);t=r.groupingParameters,n=r.sectionCount,s=r.sectionFilters}else t=this.groupingParameters,n=this.sectionCount,s=this.sectionFilters;const r=[];for(let t=0;t<n;t++){const n=new D(e.sphericalHarmonicsDegree),o=s[t];for(let t=0;t<e.splatCount;t++)o(t)&&n.addSplat(e.splats[t]);r.push(n)}return{splatArrays:r,parameters:t}}static getStandardPartitioner(t=0,n=new e.Vector3,s=z.BucketBlockSize,r=z.BucketSize){return new at(void 0,void 0,void 0,o=>{const i=D.OFFSET.X,a=D.OFFSET.Y,l=D.OFFSET.Z;t<=0&&(t=o.splatCount);const c=new e.Vector3,h=.5;o.splats.forEach(e=>{var t;c.set(e[i],e[a],e[l]).sub(n),(t=c).x=Math.floor(t.x/h)*h,t.y=Math.floor(t.y/h)*h,t.z=Math.floor(t.z/h)*h,e.centerDist=c.lengthSq()}),o.splats.sort((e,t)=>e.centerDist>t.centerDist?1:-1);const d=[],p=[];t=Math.min(o.splatCount,t);const u=Math.ceil(o.splatCount/t);let m=0;for(let e=0;e<u;e++){let e=m;d.push(n=>n>=e&&n<e+t),p.push({blocksSize:s,bucketSize:r}),m+=t}return{sectionCount:d.length,sectionFilters:d,groupingParameters:p}})}}class lt{constructor(t,n,s,r,o,i,a){this.splatPartitioner=t,this.alphaRemovalThreshold=n,this.compressionLevel=s,this.sectionSize=r,this.sceneCenter=o?(new e.Vector3).copy(o):void 0,this.blockSize=i,this.bucketSize=a}generateFromUncompressedSplatArray(e){const t=this.splatPartitioner.partitionUncompressedSplatArray(e);return z.generateFromUncompressedSplatArrays(t.splatArrays,this.alphaRemovalThreshold,this.compressionLevel,this.sceneCenter,this.blockSize,this.bucketSize,t.parameters)}static getStandardGenerator(t=1,n=1,s=0,r=new e.Vector3,o=z.BucketBlockSize,i=z.BucketSize){const a=at.getStandardPartitioner(s,r,o,i);return new lt(a,t,n,s,r,o,i)}}const ct=0,ht=1,dt=2;class pt extends Error{constructor(e){super(e)}}const ut=0,mt=1,At=2;function ft(e,t){let n=0;for(let t of e)n+=t.sizeBytes;(!t||t.byteLength<n)&&(t=new ArrayBuffer(n));let s=0;for(let n of e)new Uint8Array(t,s,n.sizeBytes).set(n.data),s+=n.sizeBytes;return t}function gt(t,n,s,r,o,i,a,l){if(n){return lt.getStandardGenerator(s,r,o,i,a,l).generateFromUncompressedSplatArray(t)}return z.generateFromUncompressedSplatArrays([t],s,0,new e.Vector3)}class St{static loadFromURL(t,n,s,r,o,i,a=!0,l=0,c,h,d,p,u){let m;m=s||a?a?mt:ut:At;const f=b.ProgressiveLoadSectionSize,g=z.HeaderSizeBytes+z.SectionHeaderSizeBytes;let S,y,v,I,B,w=0,T=0,E=0,M=!1,F=!1,R=!1;const P=x();let H,k=0,L=0,O=0,U=0,_="",Q=null,V=[];const N=new TextDecoder;return n&&n(0,"0%",ct),A(t,(t,s,o)=>{const i=t>=100;if(o&&(V.push({data:o,sizeBytes:o.byteLength,startBytes:O,endBytes:O+o.byteLength}),O+=o.byteLength),m===At)i&&P.resolve(V);else{if(M){if(S===J&&!F){const e=Q.headerSizeBytes+Q.chunkElement.storageSizeBytes;B=ft(V,B),B.byteLength>=e&&(j.readElementData(Q.chunkElement,B,Q.headerSizeBytes),k=e,L=e,F=!0)}}else if(_+=N.decode(o),ae.checkTextForEndHeader(_)){if(S=ae.determineHeaderFormatFromHeaderText(_),S===Y)Q=Te.decodeHeaderText(_),l=Math.min(l,Q.sphericalHarmonicsDegree),w=Q.splatCount,F=!0,U=Q.headerSizeBytes+Q.bytesPerSplat*w;else{if(S!==J){if(m===ut)throw new pt("PlyLoader.loadFromURL() -> Selected PLY format cannot be progressively loaded.");return void(m=At)}if(Q=j.decodeHeaderText(_),l=Math.min(l,Q.sphericalHarmonicsDegree),m===ut&&l>0)throw new pt("PlyLoader.loadFromURL() -> Selected PLY format has spherical harmonics data that cannot be progressively loaded.");w=Q.vertexElement.count,U=Q.headerSizeBytes+Q.bytesPerSplat*w+Q.chunkElement.storageSizeBytes}if(m===ut){const t=z.CompressionLevels[0].SphericalHarmonicsDegrees[l],n=g+t.BytesPerSplat*w;v=new ArrayBuffer(n),z.writeHeaderToBuffer({versionMajor:z.CurrentMajorVersion,versionMinor:z.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:w,splatCount:0,compressionLevel:0,sceneCenter:new e.Vector3},v)}else H=new D(l);k=Q.headerSizeBytes,L=Q.headerSizeBytes,M=!0}if(M&&F&&V.length>0){y=ft(V,y);if(O-k>f||O>=U&&!R||i){const e=R?Q.sphericalHarmonicsPerSplat:Q.bytesPerSplat,t=(R?O:Math.min(U,O))-L,n=Math.floor(t/e),s=n*e,r=O-L-s,o=L-V[0].startBytes,i=new DataView(y,o,s);if(R)S===J&&m===mt&&(j.parseSphericalHarmonicsToUncompressedSplatArraySection(Q.chunkElement,Q.shElement,E,E+n-1,i,0,l,Q.sphericalHarmonicsDegree,H),E+=n);else{if(m===ut){const e=z.CompressionLevels[0].SphericalHarmonicsDegrees[l],t=T*e.BytesPerSplat+g;S===J?j.parseToUncompressedSplatBufferSection(Q.chunkElement,Q.vertexElement,0,n-1,T,i,v,t):Te.parseToUncompressedSplatBufferSection(Q,0,n-1,i,0,v,t,l)}else S===J?j.parseToUncompressedSplatArraySection(Q.chunkElement,Q.vertexElement,0,n-1,T,i,H):Te.parseToUncompressedSplatArraySection(Q,0,n-1,i,0,H,l);T+=n,m===ut&&(I||(z.writeSectionHeaderToBuffer({maxSplatCount:w,splatCount:T,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:l},0,v,z.HeaderSizeBytes),I=new z(v,!1)),I.updateLoadedCounts(1,T)),O>=U&&(R=!0)}if(0===r)V=[];else{let e=[],t=0;for(let n=V.length-1;n>=0;n--){const s=V[n];if(t+=s.sizeBytes,e.unshift(s),t>=r)break}V=e}k+=f,L+=s}}r&&I&&r(I,i),i&&(m===ut?P.resolve(I):P.resolve(H))}n&&n(t,s,ct)},!1,c).then(()=>(n&&n(0,"0%",ht),P.promise.then(e=>{if(n&&n(100,"100%",dt),m===At){const e=V.map(e=>e.data);return new Blob(e).arrayBuffer().then(e=>St.loadFromFileData(e,o,i,a,l,h,d,p,u))}return m===ut?e:C(()=>gt(e,a,o,i,h,d,p,u))})))}static loadFromFileData(e,t,n,s,r=0,o,i,a,l){return s?C(()=>it.parseToUncompressedSplatArray(e,r)).then(e=>gt(e,s,t,n,o,i,a,l)):C(()=>it.parseToUncompressedSplatBuffer(e,r))}}const Ct=e=>new ReadableStream({async start(t){t.enqueue(e),t.close()}});async function yt(e){try{const t=Ct(e);if(!t)throw new Error("Failed to create stream from data");return await async function(e){const t=e.pipeThrough(new DecompressionStream("gzip")),n=new Response(t),s=await n.arrayBuffer();return new Uint8Array(s)}(t)}catch(e){throw console.error("Error decompressing gzipped data:",e),e}}function xt(e){const t=e>>10&31,n=1023&e,s=1===(e>>15&1)?-1:1;return 0===t?s*Math.pow(2,-14)*n/1024:31===t?0!==n?NaN:s*(1/0):s*Math.pow(2,t-15)*(1+n/1024)}function vt(e){return(e-128)/128}function It(e){switch(e){case 0:return 0;case 1:return 3;case 2:return 8;case 3:return 15;default:return console.error(`[SPZ: ERROR] Unsupported SH degree: ${e}`),0}}const Bt=function(){let t=[];const n=new e.Quaternion,s=D.OFFSET.X,r=D.OFFSET.Y,o=D.OFFSET.Z,i=D.OFFSET.SCALE0,a=D.OFFSET.SCALE1,l=D.OFFSET.SCALE2,c=D.OFFSET.ROTATION0,h=D.OFFSET.ROTATION1,d=D.OFFSET.ROTATION2,p=D.OFFSET.ROTATION3,u=D.OFFSET.FDC0,m=D.OFFSET.FDC1,A=D.OFFSET.FDC2,g=D.OFFSET.OPACITY,S=[];for(let e=0;e<45;e++)S[e]=D.OFFSET.FRC0+e;const C=[It(0),It(1),It(2),It(3)],y=[0,1,2,9,10,11,12,13,24,25,26,27,28,29,30,3,4,5,14,15,16,17,18,31,32,33,34,35,36,37,6,7,8,19,20,21,22,23,38,39,40,41,42,43,44];return function(e,S,x){x=Math.min(S,x);const v=D.createSplat(x);void 0!==e.scale[0]?(v[i]=e.scale[0],v[a]=e.scale[1],v[l]=e.scale[2]):(v[i]=.01,v[a]=.01,v[l]=.01),void 0!==e.color[0]?(v[u]=e.color[0],v[m]=e.color[1],v[A]=e.color[2]):void 0!==t[RED]?(v[u]=255*t[RED],v[m]=255*t[GREEN],v[A]=255*t[BLUE]):(v[u]=0,v[m]=0,v[A]=0),void 0!==e.alpha&&(v[g]=e.alpha),v[u]=f(Math.floor(v[u]),0,255),v[m]=f(Math.floor(v[m]),0,255),v[A]=f(Math.floor(v[A]),0,255),v[g]=f(Math.floor(v[g]),0,255);let I=C[x],B=C[S];for(let t=0;t<3;++t)for(let n=0;n<15;++n){const s=y[15*t+n];n<I&&n<B&&(v[D.OFFSET.FRC0+s]=e.sh[t*B+n])}return n.set(e.rotation[3],e.rotation[0],e.rotation[1],e.rotation[2]),n.normalize(),v[c]=n.x,v[h]=n.y,v[d]=n.z,v[p]=n.w,v[s]=e.position[0],v[r]=e.position[1],v[o]=e.position[2],v}}();function wt(e,t,n,s,r){t=Math.min(t,e.shDegree);const o=e.numPoints,i=It(e.shDegree),a=e.positions.length===3*o*2;if(!function(e,t,n,s){return e.positions.length===3*t*(s?2:3)&&e.scales.length===3*t&&e.rotations.length===3*t&&e.alphas.length===t&&e.colors.length===3*t&&e.sh.length===t*n*3}(e,o,i,a))return null;const l={position:[],scale:[],rotation:[],alpha:void 0,color:[],sh:[]};let c;a&&(c=new Uint16Array(e.positions.buffer,e.positions.byteOffset,3*o));const h=1/(1<<e.fractionalBits),d=It(e.shDegree);for(let i=0;i<o;i++){if(a)for(let e=0;e<3;e++)l.position[e]=xt(c[3*i+e]);else for(let t=0;t<3;t++){const n=9*i+3*t;let s=e.positions[n];s|=e.positions[n+1]<<8,s|=e.positions[n+2]<<16,s|=8388608&s?4278190080:0,l.position[t]=s*h}for(let t=0;t<3;t++)l.scale[t]=Math.exp(e.scales[3*i+t]/16-10);const o=e.rotations.subarray(3*i,3*i+3),p=[o[0]/127.5-1,o[1]/127.5-1,o[2]/127.5-1];l.rotation[0]=p[0],l.rotation[1]=p[1],l.rotation[2]=p[2];const u=p[0]*p[0]+p[1]*p[1]+p[2]*p[2];l.rotation[3]=Math.sqrt(Math.max(0,1-u)),l.alpha=Math.floor(e.alphas[i]);for(let t=0;t<3;t++)l.color[t]=Math.floor(255*((e.colors[3*i+t]/255-.5)/.15*.28209479177387814+.5));for(let t=0;t<3;t++)for(let n=0;n<d;n++)l.sh[t*d+n]=vt(e.sh[3*d*i+3*n+t]);const m=Bt(l,e.shDegree,t);if(n){const e=i*z.CompressionLevels[0].SphericalHarmonicsDegrees[t].BytesPerSplat+r;z.writeSplatDataToSectionBuffer(m,s,e,0,t)}else s.addSplat(m)}}async function Dt(e){try{return function(e){const t=new DataView(e);let n=0;const s={magic:t.getUint32(n,!0),version:t.getUint32(n+4,!0),numPoints:t.getUint32(n+8,!0),shDegree:t.getUint8(n+12),fractionalBits:t.getUint8(n+13),flags:t.getUint8(n+14),reserved:t.getUint8(n+15)};if(n+=16,1347635022!==s.magic)return console.error("[SPZ ERROR] deserializePackedGaussians: header not found"),null;if(s.version<1||s.version>2)return console.error(`[SPZ ERROR] deserializePackedGaussians: version not supported: ${s.version}`),null;if(s.numPoints>1e7)return console.error(`[SPZ ERROR] deserializePackedGaussians: Too many points: ${s.numPoints}`),null;if(s.shDegree>3)return console.error(`[SPZ ERROR] deserializePackedGaussians: Unsupported SH degree: ${s.shDegree}`),null;const r=s.numPoints,o=It(s.shDegree),i={numPoints:r,shDegree:s.shDegree,fractionalBits:s.fractionalBits,antialiased:!!(1&s.flags),positions:new Uint8Array(3*r*(1===s.version?2:3)),scales:new Uint8Array(3*r),rotations:new Uint8Array(3*r),alphas:new Uint8Array(r),colors:new Uint8Array(3*r),sh:new Uint8Array(r*o*3)};try{const t=new Uint8Array(e);let s=i.positions.length,r=n;if(i.positions.set(t.slice(r,r+s)),r+=s,i.alphas.set(t.slice(r,r+i.alphas.length)),r+=i.alphas.length,i.colors.set(t.slice(r,r+i.colors.length)),r+=i.colors.length,i.scales.set(t.slice(r,r+i.scales.length)),r+=i.scales.length,i.rotations.set(t.slice(r,r+i.rotations.length)),r+=i.rotations.length,i.sh.set(t.slice(r,r+i.sh.length)),r+i.sh.length!==e.byteLength)return console.error("[SPZ ERROR] deserializePackedGaussians: incorrect buffer size"),null}catch(e){return console.error("[SPZ ERROR] deserializePackedGaussians: read error",e),null}return i}((await yt(e)).buffer)}catch(e){return console.error("[SPZ ERROR] loadSpzPacked: decompression error",e),null}}class bt{static loadFromURL(e,t,n,s,r=!0,o=0,i,a,l,c,h){return t&&t(0,"0%",ct),A(e,t,!0,i).then(e=>(t&&t(0,"0%",ht),bt.loadFromFileData(e,n,s,r,o,a,l,c,h)))}static async loadFromFileData(e,t,n,s,r=0,o,i,a,l){await C();const c=await Dt(e);r=Math.min(c.shDegree,r);const h=new D(r);if(s){wt(c,r,!1,h,0);return lt.getStandardGenerator(t,n,o,i,a,l).generateFromUncompressedSplatArray(h)}{const{splatBuffer:e,splatBufferDataOffsetBytes:t}=z.preallocateUncompressed(c.numPoints,r);return wt(c,r,!0,e.bufferData,t),e}}}class Tt{static RowSizeBytes=32;static CenterSizeBytes=12;static ScaleSizeBytes=12;static RotationSizeBytes=4;static ColorSizeBytes=4;static parseToUncompressedSplatBufferSection(t,n,s,r,o,i){const a=z.CompressionLevels[0].BytesPerCenter,l=z.CompressionLevels[0].BytesPerScale,c=z.CompressionLevels[0].BytesPerRotation,h=z.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;for(let d=t;d<=n;d++){const t=d*Tt.RowSizeBytes+r,n=new Float32Array(s,t,3),p=new Float32Array(s,t+Tt.CenterSizeBytes,3),u=new Uint8Array(s,t+Tt.CenterSizeBytes+Tt.ScaleSizeBytes,4),m=new Uint8Array(s,t+Tt.CenterSizeBytes+Tt.ScaleSizeBytes+Tt.RotationSizeBytes,4),A=new e.Quaternion((m[1]-128)/128,(m[2]-128)/128,(m[3]-128)/128,(m[0]-128)/128);A.normalize();const f=d*h+i,g=new Float32Array(o,f,3),S=new Float32Array(o,f+a,3),C=new Float32Array(o,f+a+l,4),y=new Uint8Array(o,f+a+l+c,4);g[0]=n[0],g[1]=n[1],g[2]=n[2],S[0]=p[0],S[1]=p[1],S[2]=p[2],C[0]=A.w,C[1]=A.x,C[2]=A.y,C[3]=A.z,y[0]=u[0],y[1]=u[1],y[2]=u[2],y[3]=u[3]}}static parseToUncompressedSplatArraySection(t,n,s,r,o){for(let i=t;i<=n;i++){const t=i*Tt.RowSizeBytes+r,n=new Float32Array(s,t,3),a=new Float32Array(s,t+Tt.CenterSizeBytes,3),l=new Uint8Array(s,t+Tt.CenterSizeBytes+Tt.ScaleSizeBytes,4),c=new Uint8Array(s,t+Tt.CenterSizeBytes+Tt.ScaleSizeBytes+Tt.RotationSizeBytes,4),h=new e.Quaternion((c[1]-128)/128,(c[2]-128)/128,(c[3]-128)/128,(c[0]-128)/128);h.normalize(),o.addSplatFromComonents(n[0],n[1],n[2],a[0],a[1],a[2],h.w,h.x,h.y,h.z,l[0],l[1],l[2],l[3])}}static parseStandardSplatToUncompressedSplatArray(t){const n=t.byteLength/Tt.RowSizeBytes,s=new D;for(let r=0;r<n;r++){const n=r*Tt.RowSizeBytes,o=new Float32Array(t,n,3),i=new Float32Array(t,n+Tt.CenterSizeBytes,3),a=new Uint8Array(t,n+Tt.CenterSizeBytes+Tt.ScaleSizeBytes,4),l=new Uint8Array(t,n+Tt.CenterSizeBytes+Tt.ScaleSizeBytes+Tt.ColorSizeBytes,4),c=new e.Quaternion((l[1]-128)/128,(l[2]-128)/128,(l[3]-128)/128,(l[0]-128)/128);c.normalize(),s.addSplatFromComonents(o[0],o[1],o[2],i[0],i[1],i[2],c.w,c.x,c.y,c.z,a[0],a[1],a[2],a[3])}return s}}function Et(t,n,s,r,o,i,a,l){if(n){return lt.getStandardGenerator(s,r,o,i,a,l).generateFromUncompressedSplatArray(t)}return z.generateFromUncompressedSplatArrays([t],s,0,new e.Vector3)}class Mt{static loadFromURL(t,n,s,r,o,i,a=!0,l,c,h,d,p){let u=s?ut:mt;a&&(u=mt);const m=z.HeaderSizeBytes+z.SectionHeaderSizeBytes,f=b.ProgressiveLoadSectionSize;let g,S,y,v,I=0,B=0;const w=x();let T=0,E=0,M=[];return n&&n(0,"0%",ct),A(t,(t,o,i,a)=>{const l=t>=100;if(i&&M.push(i),u!==At)if(a){if(!g){I=a/Tt.RowSizeBytes,g=new ArrayBuffer(a);const t=z.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;u===ut?(S=new ArrayBuffer(m+t*I),z.writeHeaderToBuffer({versionMajor:z.CurrentMajorVersion,versionMinor:z.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:I,splatCount:B,compressionLevel:0,sceneCenter:new e.Vector3},S)):v=new D(0)}if(i){new Uint8Array(g,E,i.byteLength).set(new Uint8Array(i)),E+=i.byteLength;const e=E-T;if(e>f||l){const t=(l?e:f)/Tt.RowSizeBytes,n=B+t;u===ut?Tt.parseToUncompressedSplatBufferSection(B,n-1,g,0,S,m):Tt.parseToUncompressedSplatArraySection(B,n-1,g,0,v),B=n,u===ut&&(y||(z.writeSectionHeaderToBuffer({maxSplatCount:I,splatCount:B,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,S,z.HeaderSizeBytes),y=new z(S,!1)),y.updateLoadedCounts(1,B),r&&r(y,l)),T+=f}}l&&(u===ut?w.resolve(y):w.resolve(v)),n&&n(t,o,ct)}else{if(s)throw new pt("Cannon directly load .splat because no file size info is available.");u=At}else l&&w.resolve(M)},!1,l).then(()=>(n&&n(0,"0%",ht),w.promise.then(e=>(n&&n(100,"100%",dt),u===At?new Blob(M).arrayBuffer().then(e=>Mt.loadFromFileData(e,o,i,a,c,h,d,p)):u===ut?e:C(()=>Et(e,a,o,i,c,h,d,p))))))}static loadFromFileData(e,t,n,s,r,o,i,a){return C(()=>Et(Tt.parseStandardSplatToUncompressedSplatArray(e),s,t,n,r,o,i,a))}}class Ft{static checkVersion(e){const t=z.CurrentMajorVersion,n=z.CurrentMinorVersion,s=z.parseHeader(e);if(s.versionMajor===t&&s.versionMinor>=n||s.versionMajor>t)return!0;throw new Error(`KSplat version not supported: v${s.versionMajor}.${s.versionMinor}. Minimum required: v${t}.${n}`)}static loadFromURL(e,t,n,s,r){let o,i,a,l,c,h=!1,d=!1,p=[],u=!1,m=!1,f=0,g=0,S=0,C=!1,y=!1,v=!1,I=[];const B=x();let w=0;const D=()=>{const e=()=>{m=!0;new Blob(I).arrayBuffer().then(e=>{m=!1,u=!0,c=new ArrayBuffer(l.maxSectionCount*z.SectionHeaderSizeBytes),new Uint8Array(c).set(new Uint8Array(e,z.HeaderSizeBytes,l.maxSectionCount*z.SectionHeaderSizeBytes)),p=z.parseSectionHeaders(l,c,0,!1);let t=0;for(let e=0;e<l.maxSectionCount;e++)t+=p[e].storageSizeBytes;const n=z.HeaderSizeBytes+l.maxSectionCount*z.SectionHeaderSizeBytes+t;if(!o){o=new ArrayBuffer(n);let e=0;for(let t=0;t<I.length;t++){const n=I[t];new Uint8Array(o,e,n.byteLength).set(new Uint8Array(n)),e+=n.byteLength}}S=z.HeaderSizeBytes+z.SectionHeaderSizeBytes*l.maxSectionCount;for(let e=0;e<=p.length&&e<l.maxSectionCount;e++)S+=p[e].storageSizeBytes;0===w&&(w++,window.setTimeout(()=>{w--,T()},1))})};!m&&!u&&h&&f>=z.HeaderSizeBytes+z.SectionHeaderSizeBytes*l.maxSectionCount&&e()},T=()=>{if(v)return;v=!0;window.setTimeout(()=>{if(v=!1,u){if(y)return;if(C=f>=S,f-g>b.ProgressiveLoadSectionSize||C){g+=b.ProgressiveLoadSectionSize,y=g>=S,i||(i=new z(o,!1));const e=z.HeaderSizeBytes+z.SectionHeaderSizeBytes*l.maxSectionCount;let n=0,r=0,a=0;for(let t=0;t<l.maxSectionCount;t++){const s=p[t],o=e+(n+4*s.partiallyFilledBucketCount+s.bucketStorageSizeBytes*s.bucketCount);if(!(g>=o))break;{r++;const e=g-o,n=z.CompressionLevels[l.compressionLevel].SphericalHarmonicsDegrees[s.sphericalHarmonicsDegree].BytesPerSplat;let c=Math.floor(e/n);c=Math.min(c,s.maxSplatCount),a+=c,i.updateLoadedCounts(r,a),i.updateSectionLoadedCounts(t,c)}n+=s.storageSizeBytes}s(i,y);const c=g/S*100,h=c.toFixed(2)+"%";t&&t(c,h,ct),y?B.resolve(i):T()}}},b.ProgressiveLoadSectionDelayDuration)};return A(e,(e,s,r)=>{r&&(I.push(r),o&&new Uint8Array(o,f,r.byteLength).set(new Uint8Array(r)),f+=r.byteLength),n?(!h&&!d&&f>=z.HeaderSizeBytes&&(d=!0,new Blob(I).arrayBuffer().then(e=>{a=new ArrayBuffer(z.HeaderSizeBytes),new Uint8Array(a).set(new Uint8Array(e,0,z.HeaderSizeBytes)),Ft.checkVersion(a),d=!1,h=!0,l=z.parseHeader(a),window.setTimeout(()=>{D()},1)})),D(),T()):t&&t(e,s,ct)},!n,r).then(e=>{t&&t(0,"0%",ht);return(n?B.promise:Ft.loadFromFileData(e)).then(e=>(t&&t(100,"100%",dt),e))})}static loadFromFileData(e){return C(()=>(Ft.checkVersion(e),new z(e)))}static downloadFile=function(){let e;return function(t,n){const s=new Blob([t.bufferData],{type:"application/octet-stream"});e||(e=document.createElement("a"),document.body.appendChild(e)),e.download=n,e.href=URL.createObjectURL(s),e.click()}}()}const Rt={Splat:0,KSplat:1,Ply:2,Spz:3},Pt=e=>e.endsWith(".ply")?Rt.Ply:e.endsWith(".splat")?Rt.Splat:e.endsWith(".ksplat")?Rt.KSplat:e.endsWith(".spz")?Rt.Spz:null;var Ht=Object.freeze({__proto__:null,sceneFormatFromPath:Pt});const kt={type:"change"},Lt={type:"start"},Ot={type:"end"},Ut=new t,zt=new n,_t=Math.cos(70*s.DEG2RAD);class Qt extends r{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new o,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:i.ROTATE,MIDDLE:i.DOLLY,RIGHT:i.PAN},this.touches={ONE:a.ROTATE,TWO:a.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",Z),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",Z),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,this.clearDampedRotation(),this.clearDampedPan(),n.object.updateProjectionMatrix(),n.dispatchEvent(kt),n.update(),r=s.NONE},this.clearDampedRotation=function(){u.theta=0,u.phi=0},this.clearDampedPan=function(){A.set(0,0,0)},this.update=function(){const t=new o,i=(new l).setFromUnitVectors(e.up,new o(0,1,0)),a=i.clone().invert(),c=new o,h=new l,f=new o,g=2*Math.PI;return function(){i.setFromUnitVectors(e.up,new o(0,1,0)),a.copy(i).invert();const l=n.object.position;t.copy(l).sub(n.target),t.applyQuaternion(i),p.setFromVector3(t),n.autoRotate&&r===s.NONE&&F(2*Math.PI/60/60*n.autoRotateSpeed),n.enableDamping?(p.theta+=u.theta*n.dampingFactor,p.phi+=u.phi*n.dampingFactor):(p.theta+=u.theta,p.phi+=u.phi);let S=n.minAzimuthAngle,C=n.maxAzimuthAngle;isFinite(S)&&isFinite(C)&&(S<-Math.PI?S+=g:S>Math.PI&&(S-=g),C<-Math.PI?C+=g:C>Math.PI&&(C-=g),p.theta=S<=C?Math.max(S,Math.min(C,p.theta)):p.theta>(S+C)/2?Math.max(S,p.theta):Math.min(C,p.theta)),p.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,p.phi)),p.makeSafe(),!0===n.enableDamping?n.target.addScaledVector(A,n.dampingFactor):n.target.add(A),n.zoomToCursor&&b||n.object.isOrthographicCamera?p.radius=z(p.radius):p.radius=z(p.radius*m),t.setFromSpherical(p),t.applyQuaternion(a),l.copy(n.target).add(t),n.object.lookAt(n.target),!0===n.enableDamping?(u.theta*=1-n.dampingFactor,u.phi*=1-n.dampingFactor,A.multiplyScalar(1-n.dampingFactor)):(u.set(0,0,0),A.set(0,0,0));let y=!1;if(n.zoomToCursor&&b){let s=null;if(n.object.isPerspectiveCamera){const e=t.length();s=z(e*m);const r=e-s;n.object.position.addScaledVector(w,r),n.object.updateMatrixWorld()}else if(n.object.isOrthographicCamera){const e=new o(D.x,D.y,0);e.unproject(n.object),n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/m)),n.object.updateProjectionMatrix(),y=!0;const r=new o(D.x,D.y,0);r.unproject(n.object),n.object.position.sub(r).add(e),n.object.updateMatrixWorld(),s=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),n.zoomToCursor=!1;null!==s&&(this.screenSpacePanning?n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(s).add(n.object.position):(Ut.origin.copy(n.object.position),Ut.direction.set(0,0,-1).transformDirection(n.object.matrix),Math.abs(n.object.up.dot(Ut.direction))<_t?e.lookAt(n.target):(zt.setFromNormalAndCoplanarPoint(n.object.up,n.target),Ut.intersectPlane(zt,n.target))))}else n.object.isOrthographicCamera&&(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/m)),n.object.updateProjectionMatrix(),y=!0);return m=1,b=!1,!!(y||c.distanceToSquared(n.object.position)>d||8*(1-h.dot(n.object.quaternion))>d||f.distanceToSquared(n.target)>0)&&(n.dispatchEvent(kt),c.copy(n.object.position),h.copy(n.object.quaternion),f.copy(n.target),y=!1,!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",$),n.domElement.removeEventListener("pointerdown",j),n.domElement.removeEventListener("pointercancel",X),n.domElement.removeEventListener("wheel",J),n.domElement.removeEventListener("pointermove",Y),n.domElement.removeEventListener("pointerup",X),null!==n._domElementKeyEvents&&(n._domElementKeyEvents.removeEventListener("keydown",Z),n._domElementKeyEvents=null)};const n=this,s={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=s.NONE;const d=1e-6,p=new c,u=new c;let m=1;const A=new o,f=new h,g=new h,S=new h,C=new h,y=new h,x=new h,v=new h,I=new h,B=new h,w=new o,D=new h;let b=!1;const T=[],E={};function M(){return Math.pow(.95,n.zoomSpeed)}function F(e){u.theta-=e}function R(e){u.phi-=e}const P=function(){const e=new o;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),A.add(e)}}(),H=function(){const e=new o;return function(t,s){!0===n.screenSpacePanning?e.setFromMatrixColumn(s,1):(e.setFromMatrixColumn(s,0),e.crossVectors(n.object.up,e)),e.multiplyScalar(t),A.add(e)}}(),k=function(){const e=new o;return function(t,s){const r=n.domElement;if(n.object.isPerspectiveCamera){const o=n.object.position;e.copy(o).sub(n.target);let i=e.length();i*=Math.tan(n.object.fov/2*Math.PI/180),P(2*t*i/r.clientHeight,n.object.matrix),H(2*s*i/r.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(P(t*(n.object.right-n.object.left)/n.object.zoom/r.clientWidth,n.object.matrix),H(s*(n.object.top-n.object.bottom)/n.object.zoom/r.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function L(e){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?m/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function O(e){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?m*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function U(t){if(!n.zoomToCursor)return;b=!0;const s=n.domElement.getBoundingClientRect(),r=t.clientX-s.left,o=t.clientY-s.top,i=s.width,a=s.height;D.x=r/i*2-1,D.y=-o/a*2+1,w.set(D.x,D.y,1).unproject(e).sub(e.position).normalize()}function z(e){return Math.max(n.minDistance,Math.min(n.maxDistance,e))}function _(e){f.set(e.clientX,e.clientY)}function Q(e){C.set(e.clientX,e.clientY)}function V(){if(1===T.length)f.set(T[0].pageX,T[0].pageY);else{const e=.5*(T[0].pageX+T[1].pageX),t=.5*(T[0].pageY+T[1].pageY);f.set(e,t)}}function N(){if(1===T.length)C.set(T[0].pageX,T[0].pageY);else{const e=.5*(T[0].pageX+T[1].pageX),t=.5*(T[0].pageY+T[1].pageY);C.set(e,t)}}function G(){const e=T[0].pageX-T[1].pageX,t=T[0].pageY-T[1].pageY,n=Math.sqrt(e*e+t*t);v.set(0,n)}function K(e){if(1==T.length)g.set(e.pageX,e.pageY);else{const t=te(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);g.set(n,s)}S.subVectors(g,f).multiplyScalar(n.rotateSpeed);const t=n.domElement;F(2*Math.PI*S.x/t.clientHeight),R(2*Math.PI*S.y/t.clientHeight),f.copy(g)}function q(e){if(1===T.length)y.set(e.pageX,e.pageY);else{const t=te(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);y.set(n,s)}x.subVectors(y,C).multiplyScalar(n.panSpeed),k(x.x,x.y),C.copy(y)}function W(e){const t=te(e),s=e.pageX-t.x,r=e.pageY-t.y,o=Math.sqrt(s*s+r*r);I.set(0,o),B.set(0,Math.pow(I.y/v.y,n.zoomSpeed)),L(B.y),v.copy(I)}function j(e){!1!==n.enabled&&(0===T.length&&(n.domElement.setPointerCapture(e.pointerId),n.domElement.addEventListener("pointermove",Y),n.domElement.addEventListener("pointerup",X)),function(e){T.push(e)}(e),"touch"===e.pointerType?function(e){switch(ee(e),T.length){case 1:switch(n.touches.ONE){case a.ROTATE:if(!1===n.enableRotate)return;V(),r=s.TOUCH_ROTATE;break;case a.PAN:if(!1===n.enablePan)return;N(),r=s.TOUCH_PAN;break;default:r=s.NONE}break;case 2:switch(n.touches.TWO){case a.DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;n.enableZoom&&G(),n.enablePan&&N(),r=s.TOUCH_DOLLY_PAN;break;case a.DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;n.enableZoom&&G(),n.enableRotate&&V(),r=s.TOUCH_DOLLY_ROTATE;break;default:r=s.NONE}break;default:r=s.NONE}r!==s.NONE&&n.dispatchEvent(Lt)}(e):function(e){let t;switch(e.button){case 0:t=n.mouseButtons.LEFT;break;case 1:t=n.mouseButtons.MIDDLE;break;case 2:t=n.mouseButtons.RIGHT;break;default:t=-1}switch(t){case i.DOLLY:if(!1===n.enableZoom)return;!function(e){U(e),v.set(e.clientX,e.clientY)}(e),r=s.DOLLY;break;case i.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;Q(e),r=s.PAN}else{if(!1===n.enableRotate)return;_(e),r=s.ROTATE}break;case i.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;_(e),r=s.ROTATE}else{if(!1===n.enablePan)return;Q(e),r=s.PAN}break;default:r=s.NONE}r!==s.NONE&&n.dispatchEvent(Lt)}(e))}function Y(e){!1!==n.enabled&&("touch"===e.pointerType?function(e){switch(ee(e),r){case s.TOUCH_ROTATE:if(!1===n.enableRotate)return;K(e),n.update();break;case s.TOUCH_PAN:if(!1===n.enablePan)return;q(e),n.update();break;case s.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(e){n.enableZoom&&W(e),n.enablePan&&q(e)}(e),n.update();break;case s.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(e){n.enableZoom&&W(e),n.enableRotate&&K(e)}(e),n.update();break;default:r=s.NONE}}(e):function(e){switch(r){case s.ROTATE:if(!1===n.enableRotate)return;!function(e){g.set(e.clientX,e.clientY),S.subVectors(g,f).multiplyScalar(n.rotateSpeed);const t=n.domElement;F(2*Math.PI*S.x/t.clientHeight),R(2*Math.PI*S.y/t.clientHeight),f.copy(g),n.update()}(e);break;case s.DOLLY:if(!1===n.enableZoom)return;!function(e){I.set(e.clientX,e.clientY),B.subVectors(I,v),B.y>0?L(M()):B.y<0&&O(M()),v.copy(I),n.update()}(e);break;case s.PAN:if(!1===n.enablePan)return;!function(e){y.set(e.clientX,e.clientY),x.subVectors(y,C).multiplyScalar(n.panSpeed),k(x.x,x.y),C.copy(y),n.update()}(e)}}(e))}function X(e){!function(e){delete E[e.pointerId];for(let t=0;t<T.length;t++)if(T[t].pointerId==e.pointerId)return void T.splice(t,1)}(e),0===T.length&&(n.domElement.releasePointerCapture(e.pointerId),n.domElement.removeEventListener("pointermove",Y),n.domElement.removeEventListener("pointerup",X)),n.dispatchEvent(Ot),r=s.NONE}function J(e){!1!==n.enabled&&!1!==n.enableZoom&&r===s.NONE&&(e.preventDefault(),n.dispatchEvent(Lt),function(e){U(e),e.deltaY<0?O(M()):e.deltaY>0&&L(M()),n.update()}(e),n.dispatchEvent(Ot))}function Z(e){!1!==n.enabled&&!1!==n.enablePan&&function(e){let t=!1;switch(e.code){case n.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?R(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(0,n.keyPanSpeed),t=!0;break;case n.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?R(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(0,-n.keyPanSpeed),t=!0;break;case n.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?F(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(n.keyPanSpeed,0),t=!0;break;case n.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?F(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):k(-n.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),n.update())}(e)}function $(e){!1!==n.enabled&&e.preventDefault()}function ee(e){let t=E[e.pointerId];void 0===t&&(t=new h,E[e.pointerId]=t),t.set(e.pageX,e.pageY)}function te(e){const t=e.pointerId===T[0].pointerId?T[1]:T[0];return E[t.pointerId]}n.domElement.addEventListener("contextmenu",$),n.domElement.addEventListener("pointerdown",j),n.domElement.addEventListener("pointercancel",X),n.domElement.addEventListener("wheel",J,{passive:!1}),this.update()}}class Vt{static elementIDGen=0;constructor(e,t){this.taskIDGen=0,this.elementID=Vt.elementIDGen++,this.tasks=[],this.message=e||"Loading...",this.container=t||document.body,this.spinnerContainerOuter=document.createElement("div"),this.spinnerContainerOuter.className=`spinnerOuterContainer${this.elementID}`,this.spinnerContainerOuter.style.display="none",this.spinnerContainerPrimary=document.createElement("div"),this.spinnerContainerPrimary.className=`spinnerContainerPrimary${this.elementID}`,this.spinnerPrimary=document.createElement("div"),this.spinnerPrimary.classList.add(`spinner${this.elementID}`,`spinnerPrimary${this.elementID}`),this.messageContainerPrimary=document.createElement("div"),this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`,`messageContainerPrimary${this.elementID}`),this.messageContainerPrimary.innerHTML=this.message,this.spinnerContainerMin=document.createElement("div"),this.spinnerContainerMin.className=`spinnerContainerMin${this.elementID}`,this.spinnerMin=document.createElement("div"),this.spinnerMin.classList.add(`spinner${this.elementID}`,`spinnerMin${this.elementID}`),this.messageContainerMin=document.createElement("div"),this.messageContainerMin.classList.add(`messageContainer${this.elementID}`,`messageContainerMin${this.elementID}`),this.messageContainerMin.innerHTML=this.message,this.spinnerContainerPrimary.appendChild(this.spinnerPrimary),this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary),this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary),this.spinnerContainerMin.appendChild(this.spinnerMin),this.spinnerContainerMin.appendChild(this.messageContainerMin),this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);const n=document.createElement("style");n.innerHTML=`\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `,this.spinnerContainerOuter.appendChild(n),this.container.appendChild(this.spinnerContainerOuter),this.setMinimized(!1,!0),this.fadeTransitions=[]}addTask(e){const t={message:e,id:this.taskIDGen++};return this.tasks.push(t),this.update(),t.id}removeTask(e){let t=0;for(let n of this.tasks){if(n.id===e){this.tasks.splice(t,1);break}t++}this.update()}removeAllTasks(){this.tasks=[],this.update()}setMessageForTask(e,t){for(let n of this.tasks)if(n.id===e){n.message=t;break}this.update()}update(){this.tasks.length>0?(this.show(),this.setMessage(this.tasks[this.tasks.length-1].message)):this.hide()}show(){this.spinnerContainerOuter.style.display="block",this.visible=!0}hide(){this.spinnerContainerOuter.style.display="none",this.visible=!1}setContainer(e){this.container&&this.spinnerContainerOuter.parentElement===this.container&&this.container.removeChild(this.spinnerContainerOuter),e&&(this.container=e,this.container.appendChild(this.spinnerContainerOuter),this.spinnerContainerOuter.style.zIndex=this.container.style.zIndex+1)}setMinimized(e,t){const n=(e,t,n,s,r)=>{n?e.style.display=t?s:"none":this.fadeTransitions[r]=((e,t,n,s,r)=>{const o=performance.now();let i="none"===e.style.display?0:parseFloat(e.style.opacity);isNaN(i)&&(i=1);const a=window.setInterval(()=>{const l=performance.now()-o;let c,h=Math.min(l/s,1);h>.999&&(h=1),t?(c=(1-h)*i,c<1e-4&&(c=0)):c=(1-i)*h+i,c>0?(e.style.display=n,e.style.opacity=c):e.style.display="none",h>=1&&(r&&r(),window.clearInterval(a))},16);return a})(e,!t,s,500,()=>{this.fadeTransitions[r]=null})};n(this.spinnerContainerPrimary,!e,t,"block",0),n(this.spinnerContainerMin,e,t,"flex",1),this.minimized=e}setMessage(e){this.messageContainerPrimary.innerHTML=e,this.messageContainerMin.innerHTML=e}}class Nt{constructor(e){this.idGen=0,this.tasks=[],this.container=e||document.body,this.progressBarContainerOuter=document.createElement("div"),this.progressBarContainerOuter.className="progressBarOuterContainer",this.progressBarContainerOuter.style.display="none",this.progressBarBox=document.createElement("div"),this.progressBarBox.className="progressBarBox",this.progressBarBackground=document.createElement("div"),this.progressBarBackground.className="progressBarBackground",this.progressBar=document.createElement("div"),this.progressBar.className="progressBar",this.progressBarBackground.appendChild(this.progressBar),this.progressBarBox.appendChild(this.progressBarBackground),this.progressBarContainerOuter.appendChild(this.progressBarBox);const t=document.createElement("style");t.innerHTML="\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        ",this.progressBarContainerOuter.appendChild(t),this.container.appendChild(this.progressBarContainerOuter)}show(){this.progressBarContainerOuter.style.display="block"}hide(){this.progressBarContainerOuter.style.display="none"}setProgress(e){this.progressBar.style.width=e+"%"}setContainer(e){this.container&&this.progressBarContainerOuter.parentElement===this.container&&this.container.removeChild(this.progressBarContainerOuter),e&&(this.container=e,this.container.appendChild(this.progressBarContainerOuter),this.progressBarContainerOuter.style.zIndex=this.container.style.zIndex+1)}}class Gt{constructor(e){this.container=e||document.body,this.infoCells={};const t=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Camera mode","orthographicCamera"],["Cursor position","cursorPosition"],["FPS","fps"],["Rendering:","renderSplatCount"],["Sort time","sortTime"],["Render window","renderWindow"],["Focal adjustment","focalAdjustment"],["Splat scale","splatScale"],["Point cloud mode","pointCloudMode"]];this.infoPanelContainer=document.createElement("div");const n=document.createElement("style");n.innerHTML="\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        ",this.infoPanelContainer.append(n),this.infoPanel=document.createElement("div"),this.infoPanel.className="infoPanel";const s=document.createElement("div");s.style.display="table";for(let e of t){const t=document.createElement("div");t.style.display="table-row",t.className="info-panel-row";const n=document.createElement("div");n.style.display="table-cell",n.innerHTML=`${e[0]}: `,n.classList.add("info-panel-cell","label-cell");const r=document.createElement("div");r.style.display="table-cell",r.style.width="10px",r.innerHTML=" ",r.className="info-panel-cell";const o=document.createElement("div");o.style.display="table-cell",o.innerHTML="",o.className="info-panel-cell",this.infoCells[e[1]]=o,t.appendChild(n),t.appendChild(r),t.appendChild(o),s.appendChild(t)}this.infoPanel.appendChild(s),this.infoPanelContainer.append(this.infoPanel),this.infoPanelContainer.style.display="none",this.container.appendChild(this.infoPanelContainer),this.visible=!1}update=function(e,t,n,s,r,o,i,a,l,c,h,d,p,u){const m=`${t.x.toFixed(5)}, ${t.y.toFixed(5)}, ${t.z.toFixed(5)}`;if(this.infoCells.cameraPosition.innerHTML!==m&&(this.infoCells.cameraPosition.innerHTML=m),n){const e=n,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cameraLookAt.innerHTML!==t&&(this.infoCells.cameraLookAt.innerHTML=t)}const A=`${s.x.toFixed(5)}, ${s.y.toFixed(5)}, ${s.z.toFixed(5)}`;if(this.infoCells.cameraUp.innerHTML!==A&&(this.infoCells.cameraUp.innerHTML=A),this.infoCells.orthographicCamera.innerHTML=r?"Orthographic":"Perspective",o){const e=o,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cursorPosition.innerHTML=t}else this.infoCells.cursorPosition.innerHTML="N/A";this.infoCells.fps.innerHTML=i,this.infoCells.renderWindow.innerHTML=`${e.x} x ${e.y}`,this.infoCells.renderSplatCount.innerHTML=`${l} splats out of ${a} (${c.toFixed(2)}%)`,this.infoCells.sortTime.innerHTML=`${h.toFixed(3)} ms`,this.infoCells.focalAdjustment.innerHTML=`${d.toFixed(3)}`,this.infoCells.splatScale.innerHTML=`${p.toFixed(3)}`,this.infoCells.pointCloudMode.innerHTML=`${u}`};setContainer(e){this.container&&this.infoPanelContainer.parentElement===this.container&&this.container.removeChild(this.infoPanelContainer),e&&(this.container=e,this.container.appendChild(this.infoPanelContainer),this.infoPanelContainer.style.zIndex=this.container.style.zIndex+1)}show(){this.infoPanelContainer.style.display="block",this.visible=!0}hide(){this.infoPanelContainer.style.display="none",this.visible=!1}}const Kt=new e.Vector3;class qt extends e.Object3D{constructor(t=new e.Vector3(0,0,1),n=new e.Vector3(0,0,0),s=1,r=.1,o=16776960,i=.2*s,a=.2*i){super(),this.type="ArrowHelper";const l=new e.CylinderGeometry(r,r,s,32);l.translate(0,s/2,0);const c=new e.CylinderGeometry(0,a,i,32);c.translate(0,s,0),this.position.copy(n),this.line=new e.Mesh(l,new e.MeshBasicMaterial({color:o,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new e.Mesh(c,new e.MeshBasicMaterial({color:o,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Kt.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Kt,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class Wt{constructor(e){this.threeScene=e,this.splatRenderTarget=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null,this.debugRoot=null,this.secondaryDebugRoot=null}updateSplatRenderTargetForRenderDimensions(t,n){this.destroySplatRendertarget(),this.splatRenderTarget=new e.WebGLRenderTarget(t,n,{format:e.RGBAFormat,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new e.DepthTexture(t,n),this.splatRenderTarget.depthTexture.format=e.DepthFormat,this.splatRenderTarget.depthTexture.type=e.UnsignedIntType}destroySplatRendertarget(){this.splatRenderTarget&&(this.splatRenderTarget=null)}setupRenderTargetCopyObjects(){const t=new e.ShaderMaterial({vertexShader:"\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            ",fragmentShader:"\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            ",uniforms:{sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},depthWrite:!1,depthTest:!1,transparent:!0,blending:e.CustomBlending,blendSrc:e.SrcAlphaFactor,blendSrcAlpha:e.SrcAlphaFactor,blendDst:e.OneMinusSrcAlphaFactor,blendDstAlpha:e.OneMinusSrcAlphaFactor});t.extensions.fragDepth=!0,this.renderTargetCopyQuad=new e.Mesh(new e.PlaneGeometry(2,2),t),this.renderTargetCopyCamera=new e.OrthographicCamera(-1,1,1,-1,0,1)}destroyRenderTargetCopyObjects(){this.renderTargetCopyQuad&&(S(this.renderTargetCopyQuad),this.renderTargetCopyQuad=null)}setupMeshCursor(){if(!this.meshCursor){const t=new e.ConeGeometry(.5,1.5,32),n=new e.MeshBasicMaterial({color:16777215}),s=new e.Mesh(t,n);s.rotation.set(0,0,Math.PI),s.position.set(0,1,0);const r=new e.Mesh(t,n);r.position.set(0,-1,0);const o=new e.Mesh(t,n);o.rotation.set(0,0,Math.PI/2),o.position.set(1,0,0);const i=new e.Mesh(t,n);i.rotation.set(0,0,-Math.PI/2),i.position.set(-1,0,0),this.meshCursor=new e.Object3D,this.meshCursor.add(s),this.meshCursor.add(r),this.meshCursor.add(o),this.meshCursor.add(i),this.meshCursor.scale.set(.1,.1,.1),this.threeScene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(S(this.meshCursor),this.threeScene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}getMeschCursorVisibility(){return this.meshCursor.visible}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const t=new e.SphereGeometry(.5,32,32),n=Wt.buildFocusMarkerMaterial();n.depthTest=!1,n.depthWrite=!1,n.transparent=!0,this.focusMarker=new e.Mesh(t,n)}}destroyFocusMarker(){this.focusMarker&&(S(this.focusMarker),this.focusMarker=null)}updateFocusMarker=function(){const t=new e.Vector3,n=new e.Matrix4,s=new e.Vector3;return function(e,r,o){n.copy(r.matrixWorld).invert(),t.copy(e).applyMatrix4(n),t.normalize().multiplyScalar(10),t.applyMatrix4(r.matrixWorld),s.copy(r.position).sub(e);const i=s.length();this.focusMarker.position.copy(e),this.focusMarker.scale.set(i,i,i),this.focusMarker.material.uniforms.realFocusPosition.value.copy(e),this.focusMarker.material.uniforms.viewport.value.copy(o),this.focusMarker.material.uniformsNeedUpdate=!0}}();setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){if(!this.controlPlane){const t=new e.PlaneGeometry(1,1);t.rotateX(-Math.PI/2);const n=new e.MeshBasicMaterial({color:16777215});n.transparent=!0,n.opacity=.6,n.depthTest=!1,n.depthWrite=!1,n.side=e.DoubleSide;const s=new e.Mesh(t,n),r=new e.Vector3(0,1,0);r.normalize();const o=new e.Vector3(0,0,0),i=new qt(r,o,.5,.01,56576,.1,.03);this.controlPlane=new e.Object3D,this.controlPlane.add(s),this.controlPlane.add(i)}}destroyControlPlane(){this.controlPlane&&(S(this.controlPlane),this.controlPlane=null)}setControlPlaneVisibility(e){this.controlPlane.visible=e}positionAndOrientControlPlane=function(){const t=new e.Quaternion,n=new e.Vector3(0,1,0);return function(e,s){t.setFromUnitVectors(n,s),this.controlPlane.position.copy(e),this.controlPlane.quaternion.copy(t)}}();addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.threeScene.add(this.debugRoot),this.threeScene.add(this.secondaryDebugRoot)}destroyDebugMeshes(){for(let e of[this.debugRoot,this.secondaryDebugRoot])e&&(S(e),this.threeScene.remove(e));this.debugRoot=null,this.secondaryDebugRoot=null}createDebugMeshes(t){const n=new e.SphereGeometry(1,32,32),s=new e.Object3D,r=(r,o)=>{let i=new e.Mesh(n,Wt.buildDebugMaterial(r));i.renderOrder=t,s.add(i),i.position.fromArray(o)};return r(16711680,[-50,0,0]),r(16711680,[50,0,0]),r(65280,[0,0,-50]),r(65280,[0,0,50]),r(16755200,[5,0,5]),s}createSecondaryDebugMeshes(t){const n=new e.BoxGeometry(3,3,3),s=new e.Object3D;const r=r=>{let o=new e.Mesh(n,Wt.buildDebugMaterial(12303291));o.renderOrder=t,s.add(o),o.position.fromArray(r)};let o=10;return r([-10,0,-10]),r([-10,0,o]),r([o,0,-10]),r([o,0,o]),s}static buildDebugMaterial(t){const n={color:{type:"v3",value:new e.Color(t)}},s=new e.ShaderMaterial({uniforms:n,vertexShader:"\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        ",transparent:!1,depthTest:!0,depthWrite:!0,side:e.FrontSide});return s.extensions.fragDepth=!0,s}static buildFocusMarkerMaterial(t){const n={color:{type:"v3",value:new e.Color(t)},realFocusPosition:{type:"v3",value:new e.Vector3},viewport:{type:"v2",value:new e.Vector2},opacity:{value:0}};return new e.ShaderMaterial({uniforms:n,vertexShader:"\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        ",transparent:!0,depthTest:!1,depthWrite:!1,side:e.FrontSide})}dispose(){this.destroyMeshCursor(),this.destroyFocusMarker(),this.destroyDebugMeshes(),this.destroyControlPlane(),this.destroyRenderTargetCopyObjects(),this.destroySplatRendertarget()}}const jt=new e.Vector3(1,0,0),Yt=new e.Vector3(0,1,0),Xt=new e.Vector3(0,0,1);class Jt{constructor(t=new e.Vector3,n=new e.Vector3){this.origin=new e.Vector3,this.direction=new e.Vector3,this.setParameters(t,n)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,n){return!(t.x<e.min.x-n||t.x>e.max.x+n||t.y<e.min.y-n||t.y>e.max.y+n||t.z<e.min.z-n||t.z>e.max.z+n)}intersectBox=function(){const t=new e.Vector3,n=[],s=[],r=[];return function(e,o){if(s[0]=this.origin.x,s[1]=this.origin.y,s[2]=this.origin.z,r[0]=this.direction.x,r[1]=this.direction.y,r[2]=this.direction.z,this.boxContainsPoint(e,this.origin,1e-4))return o&&(o.origin.copy(this.origin),o.normal.set(0,0,0),o.distance=-1),!0;for(let i=0;i<3;i++){if(0==r[i])continue;const a=0==i?jt:1==i?Yt:Xt,l=r[i]<0?e.max:e.min;let c=-Math.sign(r[i]);n[0]=0==i?l.x:1==i?l.y:l.z;let h=n[0]-s[i];if(h*c<0){const l=(i+1)%3,d=(i+2)%3;if(n[2]=r[l]/r[i]*h+s[l],n[1]=r[d]/r[i]*h+s[d],t.set(n[i],n[d],n[l]),this.boxContainsPoint(e,t,1e-4))return o&&(o.origin.copy(t),o.normal.copy(a).multiplyScalar(c),o.distance=t.sub(this.origin).length()),!0}}return!1}}();intersectSphere=function(){const t=new e.Vector3;return function(e,n,s){t.copy(e).sub(this.origin);const r=t.dot(this.direction),o=r*r,i=t.dot(t)-o,a=n*n;if(i>a)return!1;const l=Math.sqrt(a-i),c=r-l,h=r+l;if(h<0)return!1;let d=c<0?h:c;return s&&(s.origin.copy(this.origin).addScaledVector(this.direction,d),s.normal.copy(s.origin).sub(e).normalize(),s.distance=d),!0}}()}class Zt{constructor(){this.origin=new e.Vector3,this.normal=new e.Vector3,this.distance=0,this.splatIndex=0}set(e,t,n,s){this.origin.copy(e),this.normal.copy(t),this.distance=n,this.splatIndex=s}clone(){const e=new Zt;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e.splatIndex=this.splatIndex,e}}const $t={ThreeD:0,TwoD:1};class en{constructor(e,t,n=!1){this.ray=new Jt(e,t),this.raycastAgainstTrueSplatEllipsoid=n}setFromCameraAndScreenPosition=function(){const t=new e.Vector2;return function(e,n,s){if(t.x=n.x/s.x*2-1,t.y=(s.y-n.y)/s.y*2-1,e.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e;else{if(!e.isOrthographicCamera)throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type");this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e}}}();intersectSplatMesh=function(){const t=new e.Matrix4,n=new e.Matrix4,s=new e.Matrix4,r=new Jt,o=new e.Vector3;return function(e,i=[]){const a=e.getSplatTree();if(a){for(let l=0;l<a.subTrees.length;l++){const c=a.subTrees[l];n.copy(e.matrixWorld),e.dynamicMode&&(e.getSceneTransform(l,s),n.multiply(s)),t.copy(n).invert(),r.origin.copy(this.ray.origin).applyMatrix4(t),r.direction.copy(this.ray.origin).add(this.ray.direction),r.direction.applyMatrix4(t).sub(r.origin).normalize();const h=[];c.rootNode&&this.castRayAtSplatTreeNode(r,a,c.rootNode,h),h.forEach(e=>{e.origin.applyMatrix4(n),e.normal.applyMatrix4(n).normalize(),e.distance=o.copy(e.origin).sub(this.ray.origin).length()}),i.push(...h)}return i.sort((e,t)=>e.distance>t.distance?1:-1),i}}}();castRayAtSplatTreeNode=function(){const t=new e.Vector4,n=new e.Vector3,s=new e.Vector3,r=new e.Quaternion,o=new Zt,i=1e-7,a=new e.Vector3(0,0,0),l=new e.Matrix4,c=new e.Matrix4,h=new e.Matrix4,d=new e.Matrix4,p=new e.Matrix4,u=new Jt;return function(e,m,A,f=[]){if(e.intersectBox(A.boundingBox)){if(A.data&&A.data.indexes&&A.data.indexes.length>0)for(let g=0;g<A.data.indexes.length;g++){const S=A.data.indexes[g],C=m.splatMesh.getSceneIndexForSplat(S);if(m.splatMesh.getScene(C).visible&&(m.splatMesh.getSplatColor(S,t),m.splatMesh.getSplatCenter(S,n),m.splatMesh.getSplatScaleAndRotation(S,s,r),!(s.x<=i||s.y<=i||m.splatMesh.splatRenderMode===$t.ThreeD&&s.z<=i)))if(this.raycastAgainstTrueSplatEllipsoid){c.makeScale(s.x,s.y,s.z),h.makeRotationFromQuaternion(r);const i=2*Math.log10(t.w);if(l.makeScale(i,i,i),p.copy(l).multiply(h).multiply(c),d.copy(p).invert(),u.origin.copy(e.origin).sub(n).applyMatrix4(d),u.direction.copy(e.origin).add(e.direction).sub(n),u.direction.applyMatrix4(d).sub(u.origin).normalize(),u.intersectSphere(a,1,o)){const e=o.clone();e.splatIndex=S,e.origin.applyMatrix4(p).add(n),f.push(e)}}else{let t=s.x+s.y,r=2;if(m.splatMesh.splatRenderMode===$t.ThreeD&&(t+=s.z,r=3),t/=r,e.intersectSphere(n,t,o)){const e=o.clone();e.splatIndex=S,f.push(e)}}}if(A.children&&A.children.length>0)for(let t of A.children)this.castRayAtSplatTreeNode(e,m,t,f);return f}}}()}class tn{static buildVertexShaderBase(e=!1,t=!1,n=0,s=""){let r="\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp sampler2D sphericalHarmonicsTextureR;\n        uniform highp sampler2D sphericalHarmonicsTextureG;\n        uniform highp sampler2D sphericalHarmonicsTextureB;\n\n        uniform highp usampler2D sceneIndexesTexture;\n        uniform vec2 sceneIndexesTextureSize;\n        uniform int sceneCount;\n    ";return t&&(r+=`\n            uniform float sceneOpacity[${b.MaxScenes}];\n            uniform int sceneVisibility[${b.MaxScenes}];\n        `),e&&(r+=`\n            uniform highp mat4 transforms[${b.MaxScenes}];\n        `),r+=`\n        ${s}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${b.MaxScenes}];\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${b.MaxScenes}];\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n        void main () {\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n\n            uint sceneIndex = uint(0);\n            if (sceneCount > 1) {\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            }\n            `,t&&(r+="\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            "),r+=e?"\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = viewMatrix * transform;\n            ":"mat4 transformModelViewMatrix = modelViewMatrix;",r+="\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\n\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        ",n>=1&&(r+="   \n            if (sphericalHarmonicsDegree >= 1) {\n            ",r+=e?"\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\n                ":"\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                ",r+="\n                vec3 sh1;\n                vec3 sh2;\n                vec3 sh3;\n            ",n>=2&&(r+="\n                    vec3 sh4;\n                    vec3 sh5;\n                    vec3 sh6;\n                    vec3 sh7;\n                    vec3 sh8;\n                "),1===n?r+="\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    } else {\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                    }\n                ":2===n&&(r+="\n                    vec4 sampledSH0123;\n                    vec4 sampledSH4567;\n                    vec4 sampledSH891011;\n\n                    vec4 sampledSH0123R;\n                    vec4 sampledSH0123G;\n                    vec4 sampledSH0123B;\n\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        sh1 = sampledSH0123.rgb;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    } else {\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sh1 = vec3(sampledSH0123R.rgb);\n                        sh2 = vec3(sampledSH0123G.rgb);\n                        sh3 = vec3(sampledSH0123B.rgb);\n                    }\n                "),r+="\n                    if (sphericalHarmonics8BitMode == 1) {\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                    }\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n            ",n>=2&&(r+="\n                    if (sphericalHarmonicsDegree >= 2) {\n                        float xx = x * x;\n                        float yy = y * y;\n                        float zz = z * z;\n                        float xy = x * y;\n                        float yz = y * z;\n                        float xz = x * z;\n                ",2===n&&(r+="\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                            sh4 = sampledSH891011.gba;\n                            sh5 = sampledSH12131415.rgb;\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            sh8 = sampledSH20212223.gba;\n                        } else {\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                            sh6 = vec3(sampledSH4567G.rgb);\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                            sh8 = vec3(sampledSH4567B.gba);\n                        }\n                    "),r+="\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        }\n\n                        vColor.rgb +=\n                            (SH_C2[0] * xy) * sh4 +\n                            (SH_C2[1] * yz) * sh5 +\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                            (SH_C2[3] * xz) * sh7 +\n                            (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                "),r+="\n\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n            }\n\n            "),r}static getVertexShaderFadeIn(){return"\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        "}static getUniforms(t=!1,n=!1,s=0,r=1,o=!1){const i={sceneCenter:{type:"v3",value:new e.Vector3},fadeInComplete:{type:"i",value:0},orthographicMode:{type:"i",value:0},visibleRegionFadeStartRadius:{type:"f",value:0},visibleRegionRadius:{type:"f",value:0},currentTime:{type:"f",value:0},firstRenderTime:{type:"f",value:0},centersColorsTexture:{type:"t",value:null},sphericalHarmonicsTexture:{type:"t",value:null},sphericalHarmonicsTextureR:{type:"t",value:null},sphericalHarmonicsTextureG:{type:"t",value:null},sphericalHarmonicsTextureB:{type:"t",value:null},sphericalHarmonics8BitCompressionRangeMin:{type:"f",value:[]},sphericalHarmonics8BitCompressionRangeMax:{type:"f",value:[]},focal:{type:"v2",value:new e.Vector2},orthoZoom:{type:"f",value:1},inverseFocalAdjustment:{type:"f",value:1},viewport:{type:"v2",value:new e.Vector2},basisViewport:{type:"v2",value:new e.Vector2},debugColor:{type:"v3",value:new e.Color},centersColorsTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},sphericalHarmonicsDegree:{type:"i",value:s},sphericalHarmonicsTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},sphericalHarmonics8BitMode:{type:"i",value:0},sphericalHarmonicsMultiTextureMode:{type:"i",value:0},splatScale:{type:"f",value:r},pointCloudModeEnabled:{type:"i",value:o?1:0},sceneIndexesTexture:{type:"t",value:null},sceneIndexesTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},sceneCount:{type:"i",value:1}};for(let e=0;e<b.MaxScenes;e++)i.sphericalHarmonics8BitCompressionRangeMin.value.push(-b.SphericalHarmonics8BitCompressionRange/2),i.sphericalHarmonics8BitCompressionRangeMax.value.push(b.SphericalHarmonics8BitCompressionRange/2);if(n){const e=[];for(let t=0;t<b.MaxScenes;t++)e.push(1);i.sceneOpacity={type:"f",value:e};const t=[];for(let e=0;e<b.MaxScenes;e++)t.push(1);i.sceneVisibility={type:"i",value:t}}if(t){const t=[];for(let n=0;n<b.MaxScenes;n++)t.push(new e.Matrix4);i.transforms={type:"mat4",value:t}}return i}}class nn{static build(t=!1,n=!1,s=!1,r=2048,o=1,i=!1,a=0,l=.3){let c=tn.buildVertexShaderBase(t,n,a,"\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        ");c+=nn.buildVertexShaderProjection(s,n,r,l);const h=nn.buildFragmentShader(),d=tn.getUniforms(t,n,a,o,i);d.covariancesTextureSize={type:"v2",value:new e.Vector2(1024,1024)},d.covariancesTexture={type:"t",value:null},d.covariancesTextureHalfFloat={type:"t",value:null},d.covariancesAreHalfFloat={type:"i",value:0};return new e.ShaderMaterial({uniforms:d,vertexShader:c,fragmentShader:h,transparent:!0,alphaTest:1,blending:e.NormalBlending,depthTest:!0,depthWrite:!1,side:e.DoubleSide})}static buildVertexShaderProjection(e,t,n,s){let r="\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            ";return r+=e?`\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += ${s};\n                cov2Dm[1][1] += ${s};\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `:`\n                cov2Dm[0][0] += ${s};\n                cov2Dm[1][1] += ${s};\n            `,r+=`\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(n)}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(n)}.0);\n            `,t&&(r+="\n                vColor.a *= splatOpacityFromScene;\n            "),r+="\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                             basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        ",r+=tn.getVertexShaderFadeIn(),r+="}",r}static buildFragmentShader(){let e="\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        ";return e+="\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        ","\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        \n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        "}}class sn{static build(t=!1,n=!1,s=1,r=!1,o=0){let i=tn.buildVertexShaderBase(t,n,o,"\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        ");i+=sn.buildVertexShaderProjection();const a=sn.buildFragmentShader(),l=tn.getUniforms(t,n,o,s,r);l.scaleRotationsTexture={type:"t",value:null},l.scaleRotationsTextureSize={type:"v2",value:new e.Vector2(1024,1024)};return new e.ShaderMaterial({uniforms:l,vertexShader:i,fragmentShader:a,transparent:!0,alphaTest:1,blending:e.NormalBlending,depthTest:!0,depthWrite:!1,side:e.DoubleSide})}static buildVertexShaderProjection(){let e="\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        ";const t="\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        ";return e+=`\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    ${t}\n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            `,e+=tn.getVertexShaderFadeIn(),e+="}",e}static buildFragmentShader(){return"\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        "}}class rn{static build(t){const n=new e.BufferGeometry;n.setIndex([0,1,2,0,2,3]);const s=new Float32Array(12),r=new e.BufferAttribute(s,3);n.setAttribute("position",r),r.setXYZ(0,-1,-1,0),r.setXYZ(1,-1,1,0),r.setXYZ(2,1,1,0),r.setXYZ(3,1,-1,0),r.needsUpdate=!0;const o=(new e.InstancedBufferGeometry).copy(n),i=new Uint32Array(t),a=new e.InstancedBufferAttribute(i,1,!1);return a.setUsage(e.DynamicDrawUsage),o.setAttribute("splatIndex",a),o.instanceCount=0,o}}class on extends e.Object3D{constructor(t,n=new e.Vector3,s=new e.Quaternion,r=new e.Vector3(1,1,1),o=1,i=1,a=!0){super(),this.splatBuffer=t,this.position.copy(n),this.quaternion.copy(s),this.scale.copy(r),this.transform=new e.Matrix4,this.minimumAlpha=o,this.opacity=i,this.visible=a}copyTransformData(e){this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.transform.copy(e.transform)}updateTransform(e){e?(this.matrixWorldAutoUpdate&&this.updateWorldMatrix(!0,!1),this.transform.copy(this.matrixWorld)):(this.matrixAutoUpdate&&this.updateMatrix(),this.transform.copy(this.matrix))}}class an{static idGen=0;constructor(t,n,s,r){this.min=(new e.Vector3).copy(t),this.max=(new e.Vector3).copy(n),this.boundingBox=new e.Box3(this.min,this.max),this.center=(new e.Vector3).copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=s,this.children=[],this.data=null,this.id=r||an.idGen++}}class ln{constructor(t,n){this.maxDepth=t,this.maxCentersPerNode=n,this.sceneDimensions=new e.Vector3,this.sceneMin=new e.Vector3,this.sceneMax=new e.Vector3,this.rootNode=null,this.nodesWithIndexes=[],this.splatMesh=null}static convertWorkerSubTreeNode(t){const n=(new e.Vector3).fromArray(t.min),s=(new e.Vector3).fromArray(t.max),r=new an(n,s,t.depth,t.id);if(t.data.indexes){r.data={indexes:[]};for(let e of t.data.indexes)r.data.indexes.push(e)}if(t.children)for(let e of t.children)r.children.push(ln.convertWorkerSubTreeNode(e));return r}static convertWorkerSubTree(t,n){const s=new ln(t.maxDepth,t.maxCentersPerNode);s.sceneMin=(new e.Vector3).fromArray(t.sceneMin),s.sceneMax=(new e.Vector3).fromArray(t.sceneMax),s.splatMesh=n,s.rootNode=ln.convertWorkerSubTreeNode(t.rootNode);const r=(e,t)=>{0===e.children.length&&t(e);for(let n of e.children)r(n,t)};return s.nodesWithIndexes=[],r(s.rootNode,e=>{e.data&&e.data.indexes&&e.data.indexes.length>0&&s.nodesWithIndexes.push(e)}),s}}function cn(e){let t=0;class n{constructor(e,t){this.min=[e[0],e[1],e[2]],this.max=[t[0],t[1],t[2]]}containsPoint(e){return e[0]>=this.min[0]&&e[0]<=this.max[0]&&e[1]>=this.min[1]&&e[1]<=this.max[1]&&e[2]>=this.min[2]&&e[2]<=this.max[2]}}class s{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=[],this.sceneMin=[],this.sceneMax=[],this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.splatMesh=null,this.disposed=!1}}class r{constructor(e,n,s,r){this.min=[e[0],e[1],e[2]],this.max=[n[0],n[1],n[2]],this.center=[.5*(n[0]-e[0])+e[0],.5*(n[1]-e[1])+e[1],.5*(n[2]-e[2])+e[2]],this.depth=s,this.children=[],this.data=null,this.id=r||t++}}processSplatTreeNode=function(e,t,s,o){const i=t.data.indexes.length;if(i<e.maxCentersPerNode||t.depth>e.maxDepth){const n=[];for(let s=0;s<t.data.indexes.length;s++)e.addedIndexes[t.data.indexes[s]]||(n.push(t.data.indexes[s]),e.addedIndexes[t.data.indexes[s]]=!0);return t.data.indexes=n,t.data.indexes.sort((e,t)=>e>t?1:-1),void e.nodesWithIndexes.push(t)}const a=[t.max[0]-t.min[0],t.max[1]-t.min[1],t.max[2]-t.min[2]],l=[.5*a[0],.5*a[1],.5*a[2]],c=[t.min[0]+l[0],t.min[1]+l[1],t.min[2]+l[2]],h=[new n([c[0]-l[0],c[1],c[2]-l[2]],[c[0],c[1]+l[1],c[2]]),new n([c[0],c[1],c[2]-l[2]],[c[0]+l[0],c[1]+l[1],c[2]]),new n([c[0],c[1],c[2]],[c[0]+l[0],c[1]+l[1],c[2]+l[2]]),new n([c[0]-l[0],c[1],c[2]],[c[0],c[1]+l[1],c[2]+l[2]]),new n([c[0]-l[0],c[1]-l[1],c[2]-l[2]],[c[0],c[1],c[2]]),new n([c[0],c[1]-l[1],c[2]-l[2]],[c[0]+l[0],c[1],c[2]]),new n([c[0],c[1]-l[1],c[2]],[c[0]+l[0],c[1],c[2]+l[2]]),new n([c[0]-l[0],c[1]-l[1],c[2]],[c[0],c[1],c[2]+l[2]])],d=[],p=[];for(let e=0;e<h.length;e++)d[e]=0,p[e]=[];const u=[0,0,0];for(let e=0;e<i;e++){const n=t.data.indexes[e],r=s[n];u[0]=o[r],u[1]=o[r+1],u[2]=o[r+2];for(let e=0;e<h.length;e++)h[e].containsPoint(u)&&(d[e]++,p[e].push(n))}for(let e=0;e<h.length;e++){const n=new r(h[e].min,h[e].max,t.depth+1);n.data={indexes:p[e]},t.children.push(n)}t.data={};for(let n of t.children)processSplatTreeNode(e,n,s,o)};const o=(e,t,n)=>{const o=[0,0,0],i=[0,0,0],a=[],l=Math.floor(e.length/4);for(let t=0;t<l;t++){const n=4*t,s=e[n],r=e[n+1],l=e[n+2],c=Math.round(e[n+3]);(0===t||s<o[0])&&(o[0]=s),(0===t||s>i[0])&&(i[0]=s),(0===t||r<o[1])&&(o[1]=r),(0===t||r>i[1])&&(i[1]=r),(0===t||l<o[2])&&(o[2]=l),(0===t||l>i[2])&&(i[2]=l),a.push(c)}const c=new s(t,n);return c.sceneMin=o,c.sceneMax=i,c.rootNode=new r(c.sceneMin,c.sceneMax,0),c.rootNode.data={indexes:a},c};e.onmessage=t=>{t.data.process&&function(t,n,s){const r=[];for(let e of t){const t=Math.floor(e.length/4);for(let n=0;n<t;n++){const t=4*n;r[Math.round(e[t+3])]=t}}const i=[];for(let e of t){const t=o(e,n,s);i.push(t),processSplatTreeNode(t,t.rootNode,r,e)}e.postMessage({subTrees:i})}(t.data.process.centers,t.data.process.maxDepth,t.data.process.maxCentersPerNode)}}class hn{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.subTrees=[],this.splatMesh=null}dispose(){this.diposeSplatTreeWorker(),this.disposed=!0}diposeSplatTreeWorker(){this.splatTreeWorker&&this.splatTreeWorker.terminate(),this.splatTreeWorker=null}processSplatMesh=function(t,n=()=>!0,s,r){this.splatTreeWorker||(this.splatTreeWorker=new Worker(URL.createObjectURL(new Blob(["(",cn.toString(),")(self)"],{type:"application/javascript"})))),this.splatMesh=t,this.subTrees=[];const o=new e.Vector3,i=(e,s)=>{const r=new Float32Array(4*s);let i=0;for(let a=0;a<s;a++){const s=a+e;if(n(s)){t.getSplatCenter(s,o);const e=4*i;r[e]=o.x,r[e+1]=o.y,r[e+2]=o.z,r[e+3]=s,i++}}return r};return new Promise(e=>{const n=()=>!!this.disposed&&(this.diposeSplatTreeWorker(),e(),!0);s&&s(!1),C(()=>{if(n())return;const o=[];if(t.dynamicMode){let e=0;for(let n=0;n<t.scenes.length;n++){const s=t.getScene(n).splatBuffer.getSplatCount(),r=i(e,s);o.push(r),e+=s}}else{const e=i(0,t.getSplatCount());o.push(e)}this.splatTreeWorker.onmessage=s=>{n()||s.data.subTrees&&(r&&r(!1),C(()=>{if(!n()){for(let e of s.data.subTrees){const n=ln.convertWorkerSubTree(e,t);this.subTrees.push(n)}this.diposeSplatTreeWorker(),r&&r(!0),C(()=>{e()})}}))},C(()=>{if(n())return;s&&s(!0);const e=o.map(e=>e.buffer);!function(e,t,n,s,r){e.postMessage({process:{centers:t,maxDepth:s,maxCentersPerNode:r}},n)}(this.splatTreeWorker,o,e,this.maxDepth,this.maxCentersPerNode)})})})};countLeaves(){let e=0;return this.visitLeaves(()=>{e++}),e}visitLeaves(e){const t=(e,n)=>{0===e.children.length&&n(e);for(let s of e.children)t(s,n)};for(let n of this.subTrees)t(n.rootNode,e)}}function dn(e){const t={};function n(n){if(void 0!==t[n])return t[n];let s;switch(n){case"WEBGL_depth_texture":s=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=e.getExtension(n)}return t[n]=s,s}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?(n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance")):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function pn(e,t,n){let s;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const o="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let i=void 0!==n.precision?n.precision:"highp";const a=r(i);a!==i&&(console.warn("THREE.WebGLRenderer:",i,"not supported, using",a,"instead."),i=a);const l=o||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),p=e.getParameter(e.MAX_TEXTURE_SIZE),u=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),A=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),f=e.getParameter(e.MAX_VARYING_VECTORS),g=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),S=d>0,C=o||t.has("OES_texture_float");return{isWebGL2:o,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==s)return s;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");s=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s},getMaxPrecision:r,precision:i,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:d,maxTextureSize:p,maxCubemapSize:u,maxAttributes:m,maxVertexUniforms:A,maxVaryings:f,maxFragmentUniforms:g,vertexTextures:S,floatFragmentTextures:C,floatVertexTextures:S&&C,maxSamples:o?e.getParameter(e.MAX_SAMPLES):0}}const un={Default:0,Gradual:1,Instant:2},mn={None:0,Error:1,Warning:2,Info:3,Debug:4},An=new e.BufferGeometry,fn=new e.MeshBasicMaterial,gn=16777216;class Sn extends e.Mesh{constructor(t=$t.ThreeD,n=!1,s=!1,r=!1,o=1,i=!0,a=!1,l=!1,c=1024,h=mn.None,d=0,p=1,u=.3){super(An,fn),this.renderer=void 0,this.splatRenderMode=t,this.dynamicMode=n,this.enableOptionalEffects=s,this.halfPrecisionCovariancesOnGPU=r,this.devicePixelRatio=o,this.enableDistancesComputationOnGPU=i,this.integerBasedDistancesComputation=a,this.antialiased=l,this.kernel2DSize=u,this.maxScreenSpaceSplatSize=c,this.logLevel=h,this.sphericalHarmonicsDegree=d,this.minSphericalHarmonicsDegree=0,this.sceneFadeInRateMultiplier=p,this.scenes=[],this.splatTree=null,this.baseSplatTree=null,this.splatDataTextures={},this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new e.Box3,this.calculatedSceneCenter=new e.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!1,this.lastRenderer=null,this.visible=!1}static buildScenes(t,n,s){const r=[];r.length=n.length;for(let o=0;o<n.length;o++){const i=n[o],a=s[o]||{};let l=a.position||[0,0,0],c=a.rotation||[0,0,0,1],h=a.scale||[1,1,1];const d=(new e.Vector3).fromArray(l),p=(new e.Quaternion).fromArray(c),u=(new e.Vector3).fromArray(h),m=Sn.createScene(i,d,p,u,a.splatAlphaRemovalThreshold||1,a.opacity,a.visible);t.add(m),r[o]=m}return r}static createScene(e,t,n,s,r,o=1,i=!0){return new on(e,t,n,s,r,o,i)}static buildSplatIndexMaps(e){const t=[],n=[];let s=0;for(let r=0;r<e.length;r++){const o=e[r].getMaxSplatCount();for(let e=0;e<o;e++)t[s]=e,n[s]=r,s++}return{localSplatIndexMap:t,sceneIndexMap:n}}buildSplatTree=function(t=[],n,s){return new Promise(r=>{this.disposeSplatTree(),this.baseSplatTree=new hn(8,1e3);const o=performance.now(),i=new e.Vector4;this.baseSplatTree.processSplatMesh(this,e=>{this.getSplatColor(e,i);const n=this.getSceneIndexForSplat(e),s=t[n]||1;return i.w>=s},n,s).then(()=>{const e=performance.now()-o;if(this.logLevel>=mn.Info&&console.log("SplatTree build: "+e+" ms"),this.disposed)r();else{this.splatTree=this.baseSplatTree,this.baseSplatTree=null;let e=0,t=0,n=0,s=0;this.splatTree.visitLeaves(r=>{const o=r.data.indexes.length;o>0&&(t+=o,n=Math.max(n,o),s++,e++)}),this.logLevel>=mn.Info&&(console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`),console.log(`SplatTree leaves with splats:${e}`),t/=s,console.log(`Avg splat count per node: ${t}`),console.log(`Total splat count: ${this.getSplatCount()}`)),r()}})})};build(t,n,s=!0,r=!1,o,i,a=!0){this.sceneOptions=n,this.finalBuild=r;const l=Sn.getTotalMaxSplatCountForSplatBuffers(t),c=Sn.buildScenes(this,t,n);if(s)for(let e=0;e<this.scenes.length&&e<c.length;e++){const t=c[e],n=this.getScene(e);t.copyTransformData(n)}this.scenes=c;let h=3;for(let e of t){const t=e.getMinSphericalHarmonicsDegree();t<h&&(h=t)}this.minSphericalHarmonicsDegree=Math.min(h,this.sphericalHarmonicsDegree);let d=!1;if(t.length!==this.lastBuildScenes.length)d=!0;else for(let e=0;e<t.length;e++){if(t[e]!==this.lastBuildScenes[e].splatBuffer){d=!0;break}}let p=!0;if((1!==this.scenes.length||this.lastBuildSceneCount!==this.scenes.length||this.lastBuildMaxSplatCount!==l||d)&&(p=!1),!p){this.boundingBox=new e.Box3,a||(this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.firstRenderTime=-1),this.lastBuildScenes=[],this.lastBuildSplatCount=0,this.lastBuildMaxSplatCount=0,this.disposeMeshData(),this.geometry=rn.build(l),this.splatRenderMode===$t.ThreeD?this.material=nn.build(this.dynamicMode,this.enableOptionalEffects,this.antialiased,this.maxScreenSpaceSplatSize,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree,this.kernel2DSize):this.material=sn.build(this.dynamicMode,this.enableOptionalEffects,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree);const n=Sn.buildSplatIndexMaps(t);this.globalSplatIndexToLocalSplatIndexMap=n.localSplatIndexMap,this.globalSplatIndexToSceneIndexMap=n.sceneIndexMap}const u=this.getSplatCount(!0);this.enableDistancesComputationOnGPU&&this.setupDistancesComputationTransformFeedback();const m=this.refreshGPUDataFromSplatBuffers(p);for(let e=0;e<this.scenes.length;e++)this.lastBuildScenes[e]=this.scenes[e];return this.lastBuildSplatCount=u,this.lastBuildMaxSplatCount=this.getMaxSplatCount(),this.lastBuildSceneCount=this.scenes.length,r&&this.scenes.length>0&&this.buildSplatTree(n.map(e=>e.splatAlphaRemovalThreshold||1),o,i).then(()=>{this.onSplatTreeReadyCallback&&this.onSplatTreeReadyCallback(this.splatTree),this.onSplatTreeReadyCallback=null}),this.visible=this.scenes.length>0,m}freeIntermediateSplatData(){const e=e=>{delete e.source.data,delete e.image,e.onUpdate=null};delete this.splatDataTextures.baseData.covariances,delete this.splatDataTextures.baseData.centers,delete this.splatDataTextures.baseData.colors,delete this.splatDataTextures.baseData.sphericalHarmonics,delete this.splatDataTextures.centerColors.data,delete this.splatDataTextures.covariances.data,this.splatDataTextures.sphericalHarmonics&&delete this.splatDataTextures.sphericalHarmonics.data,this.splatDataTextures.sceneIndexes&&delete this.splatDataTextures.sceneIndexes.data,this.splatDataTextures.centerColors.texture.needsUpdate=!0,this.splatDataTextures.centerColors.texture.onUpdate=()=>{e(this.splatDataTextures.centerColors.texture)},this.splatDataTextures.covariances.texture.needsUpdate=!0,this.splatDataTextures.covariances.texture.onUpdate=()=>{e(this.splatDataTextures.covariances.texture)},this.splatDataTextures.sphericalHarmonics&&(this.splatDataTextures.sphericalHarmonics.texture?(this.splatDataTextures.sphericalHarmonics.texture.needsUpdate=!0,this.splatDataTextures.sphericalHarmonics.texture.onUpdate=()=>{e(this.splatDataTextures.sphericalHarmonics.texture)}):this.splatDataTextures.sphericalHarmonics.textures.forEach(t=>{t.needsUpdate=!0,t.onUpdate=()=>{e(t)}})),this.splatDataTextures.sceneIndexes&&(this.splatDataTextures.sceneIndexes.texture.needsUpdate=!0,this.splatDataTextures.sceneIndexes.texture.onUpdate=()=>{e(this.splatDataTextures.sceneIndexes.texture)})}dispose(){this.disposeMeshData(),this.disposeTextures(),this.disposeSplatTree(),this.enableDistancesComputationOnGPU&&(this.computeDistancesOnGPUSyncTimeout&&(clearTimeout(this.computeDistancesOnGPUSyncTimeout),this.computeDistancesOnGPUSyncTimeout=null),this.disposeDistancesComputationGPUResources()),this.scenes=[],this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.renderer=null,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new e.Box3,this.calculatedSceneCenter=new e.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!0,this.lastRenderer=null,this.visible=!1}disposeMeshData(){this.geometry&&this.geometry!==An&&(this.geometry.dispose(),this.geometry=null),this.material&&(this.material.dispose(),this.material=null)}disposeTextures(){for(let e in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(e)){const t=this.splatDataTextures[e];t.texture&&(t.texture.dispose(),t.texture=null)}this.splatDataTextures=null}disposeSplatTree(){this.splatTree&&(this.splatTree.dispose(),this.splatTree=null),this.baseSplatTree&&(this.baseSplatTree.dispose(),this.baseSplatTree=null)}getSplatTree(){return this.splatTree}onSplatTreeReady(e){this.onSplatTreeReadyCallback=e}getDataForDistancesComputation(e,t){return{centers:this.integerBasedDistancesComputation?this.getIntegerCenters(e,t,!0):this.getFloatCenters(e,t,!0),sceneIndexes:this.getSceneIndexes(e,t)}}refreshGPUDataFromSplatBuffers(e){const t=this.getSplatCount(!0);this.refreshDataTexturesFromSplatBuffers(e);const n=e?this.lastBuildSplatCount:0,{centers:s,sceneIndexes:r}=this.getDataForDistancesComputation(n,t-1);return this.enableDistancesComputationOnGPU&&this.refreshGPUBuffersForDistancesComputation(s,r,e),{from:n,to:t-1,count:t-n,centers:s,sceneIndexes:r}}refreshGPUBuffersForDistancesComputation(e,t,n=!1){const s=n?this.lastBuildSplatCount:0;this.updateGPUCentersBufferForDistancesComputation(n,e,s),this.updateGPUTransformIndexesBufferForDistancesComputation(n,t,s)}refreshDataTexturesFromSplatBuffers(e){const t=this.getSplatCount(!0),n=this.lastBuildSplatCount,s=t-1;e?this.updateBaseDataFromSplatBuffers(n,s):(this.setupDataTextures(),this.updateBaseDataFromSplatBuffers()),this.updateDataTexturesFromBaseData(n,s),this.updateVisibleRegion(e)}setupDataTextures(){const t=this.getMaxSplatCount(),n=this.getSplatCount(!0);this.disposeTextures();const s=(n,s)=>{const r=new e.Vector2(4096,1024);for(;r.x*r.y*n<t*s;)r.y*=2;return r},r=e=>{const t=(e=>e>=1?6:4)(e);return{elementsPerTexelStored:t,texSize:s(t,6)}};let o=this.getTargetCovarianceCompressionLevel();const i=this.getTargetSphericalHarmonicsCompressionLevel();let a,l,c;if(this.splatRenderMode===$t.ThreeD){const e=r(o);e.texSize.x*e.texSize.y>gn&&0===o&&(o=1),a=new Float32Array(6*t)}else l=new Float32Array(3*t),c=new Float32Array(4*t);const h=new Float32Array(3*t),d=new Uint8Array(4*t);let p=Float32Array;1===i?p=Uint16Array:2===i&&(p=Uint8Array);const u=y(this.minSphericalHarmonicsDegree),m=this.minSphericalHarmonicsDegree?new p(t*u):void 0,A=s(4,4),f=new Uint32Array(A.x*A.y*4);Sn.updateCenterColorsPaddedData(0,n-1,h,d,f);const g=new e.DataTexture(f,A.x,A.y,e.RGBAIntegerFormat,e.UnsignedIntType);if(g.internalFormat="RGBA32UI",g.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=g,this.material.uniforms.centersColorsTextureSize.value.copy(A),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={baseData:{covariances:a,scales:l,rotations:c,centers:h,colors:d,sphericalHarmonics:m},centerColors:{data:f,texture:g,size:A}},this.splatRenderMode===$t.ThreeD){const t=r(o),n=t.elementsPerTexelStored,s=t.texSize;const i=o>=1?8:4,l=new(o>=1?Uint32Array:Float32Array)(s.x*s.y*i);let c;if(0===o?l.set(a):Sn.updatePaddedCompressedCovariancesTextureData(a,l,0,0,a.length),o>=1)c=new e.DataTexture(l,s.x,s.y,e.RGBAIntegerFormat,e.UnsignedIntType),c.internalFormat="RGBA32UI",this.material.uniforms.covariancesTextureHalfFloat.value=c;else{c=new e.DataTexture(l,s.x,s.y,e.RGBAFormat,e.FloatType),this.material.uniforms.covariancesTexture.value=c;const t=new e.DataTexture(new Uint32Array(32),2,2,e.RGBAIntegerFormat,e.UnsignedIntType);t.internalFormat="RGBA32UI",this.material.uniforms.covariancesTextureHalfFloat.value=t,t.needsUpdate=!0}c.needsUpdate=!0,this.material.uniforms.covariancesAreHalfFloat.value=o>=1?1:0,this.material.uniforms.covariancesTextureSize.value.copy(s),this.splatDataTextures.covariances={data:l,texture:c,size:s,compressionLevel:o,elementsPerTexelStored:n,elementsPerTexelAllocated:i}}else{const t=s(4,6);let r=Float32Array,o=e.FloatType;const i=new r(t.x*t.y*4);Sn.updateScaleRotationsPaddedData(0,n-1,l,c,i);const a=new e.DataTexture(i,t.x,t.y,e.RGBAFormat,o);a.needsUpdate=!0,this.material.uniforms.scaleRotationsTexture.value=a,this.material.uniforms.scaleRotationsTextureSize.value.copy(t),this.splatDataTextures.scaleRotations={data:i,texture:a,size:t,compressionLevel:0}}if(m){const t=2===i?e.UnsignedByteType:e.HalfFloatType;let r=u;r%2!=0&&r++;const o=4,a=4===o?e.RGBAFormat:e.RGFormat;let l=s(o,r);if(l.x*l.y<=gn){const s=new p(l.x*l.y*o);for(let e=0;e<n;e++){const t=u*e,n=r*e;for(let e=0;e<u;e++)s[n+e]=m[t+e]}const c=new e.DataTexture(s,l.x,l.y,a,t);c.needsUpdate=!0,this.material.uniforms.sphericalHarmonicsTexture.value=c,this.splatDataTextures.sphericalHarmonics={componentCount:u,paddedComponentCount:r,data:s,textureCount:1,texture:c,size:l,compressionLevel:i,elementsPerTexel:o}}else{const c=u/3;r=c,r%2!=0&&r++,l=s(o,r);const h=l.x*l.y*o,d=[this.material.uniforms.sphericalHarmonicsTextureR,this.material.uniforms.sphericalHarmonicsTextureG,this.material.uniforms.sphericalHarmonicsTextureB],A=[],f=[];for(let s=0;s<3;s++){const o=new p(h);A.push(o);for(let e=0;e<n;e++){const t=u*e,n=r*e;if(c>=3){for(let e=0;e<3;e++)o[n+e]=m[t+3*s+e];if(c>=8)for(let e=0;e<5;e++)o[n+3+e]=m[t+9+5*s+e]}}const i=new e.DataTexture(o,l.x,l.y,a,t);f.push(i),i.needsUpdate=!0,d[s].value=i}this.material.uniforms.sphericalHarmonicsMultiTextureMode.value=1,this.splatDataTextures.sphericalHarmonics={componentCount:u,componentCountPerChannel:c,paddedComponentCount:r,data:A,textureCount:3,textures:f,size:l,compressionLevel:i,elementsPerTexel:o}}this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(l),this.material.uniforms.sphericalHarmonics8BitMode.value=2===i?1:0;for(let e=0;e<this.scenes.length;e++){const t=this.scenes[e].splatBuffer;this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[e]=t.minSphericalHarmonicsCoeff,this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[e]=t.maxSphericalHarmonicsCoeff}this.material.uniformsNeedUpdate=!0}const S=s(1,4),C=new Uint32Array(S.x*S.y*1);for(let e=0;e<n;e++)C[e]=this.globalSplatIndexToSceneIndexMap[e];const x=new e.DataTexture(C,S.x,S.y,e.RedIntegerFormat,e.UnsignedIntType);x.internalFormat="R32UI",x.needsUpdate=!0,this.material.uniforms.sceneIndexesTexture.value=x,this.material.uniforms.sceneIndexesTextureSize.value.copy(S),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.sceneIndexes={data:C,texture:x,size:S},this.material.uniforms.sceneCount.value=this.scenes.length}updateBaseDataFromSplatBuffers(e,t){const n=this.splatDataTextures.covariances,s=n?n.compressionLevel:void 0,r=this.splatDataTextures.scaleRotations,o=r?r.compressionLevel:void 0,i=this.splatDataTextures.sphericalHarmonics,a=i?i.compressionLevel:0;this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,this.splatDataTextures.baseData.scales,this.splatDataTextures.baseData.rotations,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,this.splatDataTextures.baseData.sphericalHarmonics,void 0,s,o,a,e,t,e)}updateDataTexturesFromBaseData(e,t){const n=this.splatDataTextures.covariances,s=n?n.compressionLevel:void 0,r=this.splatDataTextures.scaleRotations,o=r?r.compressionLevel:void 0,i=this.splatDataTextures.sphericalHarmonics,a=i?i.compressionLevel:0,l=this.splatDataTextures.centerColors,c=l.data,h=l.texture;Sn.updateCenterColorsPaddedData(e,t,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,c);const d=this.renderer?this.renderer.properties.get(h):null;if(d&&d.__webglTexture?this.updateDataTexture(c,l.texture,l.size,d,4,4,4,e,t):h.needsUpdate=!0,n){const r=n.texture,o=6*e,i=6*t;if(0===s)for(let e=o;e<=i;e++){const t=this.splatDataTextures.baseData.covariances[e];n.data[e]=t}else Sn.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,n.data,e*n.elementsPerTexelAllocated,o,i);const a=this.renderer?this.renderer.properties.get(r):null;a&&a.__webglTexture?0===s?this.updateDataTexture(n.data,n.texture,n.size,a,n.elementsPerTexelStored,6,4,e,t):this.updateDataTexture(n.data,n.texture,n.size,a,n.elementsPerTexelAllocated,n.elementsPerTexelAllocated,2,e,t):r.needsUpdate=!0}if(r){const n=r.data,s=r.texture,i=6,a=0===o?4:2;Sn.updateScaleRotationsPaddedData(e,t,this.splatDataTextures.baseData.scales,this.splatDataTextures.baseData.rotations,n);const l=this.renderer?this.renderer.properties.get(s):null;l&&l.__webglTexture?this.updateDataTexture(n,r.texture,r.size,l,4,i,a,e,t):s.needsUpdate=!0}const p=this.splatDataTextures.baseData.sphericalHarmonics;if(p){let n=4;1===a?n=2:2===a&&(n=1);const s=(s,r,o,i,a)=>{const l=this.renderer?this.renderer.properties.get(s):null;l&&l.__webglTexture?this.updateDataTexture(i,s,r,l,o,a,n,e,t):s.needsUpdate=!0},r=i.componentCount,o=i.paddedComponentCount;if(1===i.textureCount){const n=i.data;for(let s=e;s<=t;s++){const e=r*s,t=o*s;for(let s=0;s<r;s++)n[t+s]=p[e+s]}s(i.texture,i.size,i.elementsPerTexel,n,o)}else{const n=i.componentCountPerChannel;for(let a=0;a<3;a++){const l=i.data[a];for(let s=e;s<=t;s++){const e=r*s,t=o*s;if(n>=3){for(let n=0;n<3;n++)l[t+n]=p[e+3*a+n];if(n>=8)for(let n=0;n<5;n++)l[t+3+n]=p[e+9+5*a+n]}}s(i.textures[a],i.size,i.elementsPerTexel,l,o)}}}const u=this.splatDataTextures.sceneIndexes,m=u.data;for(let e=this.lastBuildSplatCount;e<=t;e++)m[e]=this.globalSplatIndexToSceneIndexMap[e];const A=u.texture,f=this.renderer?this.renderer.properties.get(A):null;f&&f.__webglTexture?this.updateDataTexture(m,u.texture,u.size,f,1,1,1,this.lastBuildSplatCount,t):A.needsUpdate=!0}getTargetCovarianceCompressionLevel(){return this.halfPrecisionCovariancesOnGPU?1:0}getTargetSphericalHarmonicsCompressionLevel(){return Math.max(1,this.getMaximumSplatBufferCompressionLevel())}getMaximumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).splatBuffer;(0===t||n.compressionLevel>e)&&(e=n.compressionLevel)}return e}getMinimumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).splatBuffer;(0===t||n.compressionLevel<e)&&(e=n.compressionLevel)}return e}static computeTextureUpdateRegion(e,t,n,s,r){const o=r/s,i=e*o,a=Math.floor(i/n),l=a*n*s,c=t*o,h=Math.floor(c/n);return{dataStart:l,dataEnd:h*n*s+n*s,startRow:a,endRow:h}}updateDataTexture(e,t,n,s,r,o,i,a,l){const c=this.renderer.getContext(),h=Sn.computeTextureUpdateRegion(a,l,n.x,r,o),d=h.dataEnd-h.dataStart,p=new e.constructor(e.buffer,h.dataStart*i,d),u=h.endRow-h.startRow+1,m=this.webGLUtils.convert(t.type),A=this.webGLUtils.convert(t.format,t.colorSpace),f=c.getParameter(c.TEXTURE_BINDING_2D);c.bindTexture(c.TEXTURE_2D,s.__webglTexture),c.texSubImage2D(c.TEXTURE_2D,0,0,h.startRow,n.x,u,A,m,p),c.bindTexture(c.TEXTURE_2D,f)}static updatePaddedCompressedCovariancesTextureData(e,t,n,s,r){let o=new DataView(t.buffer),i=n,a=0;for(let t=s;t<=r;t+=2)o.setUint16(2*i,e[t],!0),o.setUint16(2*i+2,e[t+1],!0),i+=2,a++,a>=3&&(i+=2,a=0)}static updateCenterColorsPaddedData(e,t,n,s,r){for(let o=e;o<=t;o++){const e=4*o,t=3*o,i=4*o;r[i]=m(s,e),r[i+1]=u(n[t]),r[i+2]=u(n[t+1]),r[i+3]=u(n[t+2])}}static updateScaleRotationsPaddedData(e,t,n,s,r){for(let o=e;o<=t;o++){const e=3*o,t=4*o,i=6*o;r[i]=n[e],r[i+1]=n[e+1],r[i+2]=n[e+2],r[i+3]=s[t],r[i+4]=s[t+1],r[i+5]=s[t+2]}}updateVisibleRegion(t){const n=this.getSplatCount(!0),s=new e.Vector3;if(!t){const t=new e.Vector3;this.scenes.forEach(e=>{t.add(e.splatBuffer.sceneCenter)}),t.multiplyScalar(1/this.scenes.length),this.calculatedSceneCenter.copy(t),this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter),this.material.uniformsNeedUpdate=!0}for(let e=t?this.lastBuildSplatCount:0;e<n;e++){this.getSplatCenter(e,s,!0);const t=s.sub(this.calculatedSceneCenter).length();t>this.maxSplatDistanceFromSceneCenter&&(this.maxSplatDistanceFromSceneCenter=t)}this.maxSplatDistanceFromSceneCenter-this.visibleRegionBufferRadius>1&&(this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter,this.visibleRegionRadius=Math.max(this.visibleRegionBufferRadius-1,0)),this.finalBuild&&(this.visibleRegionRadius=this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter),this.updateVisibleRegionFadeDistance()}updateVisibleRegionFadeDistance(e=un.Default){const t=.012*this.sceneFadeInRateMultiplier,n=.003*this.sceneFadeInRateMultiplier,s=this.finalBuild?t:n,r=e===un.Default?s:n;this.visibleRegionFadeStartRadius=(this.visibleRegionRadius-this.visibleRegionFadeStartRadius)*r+this.visibleRegionFadeStartRadius;const o=(this.visibleRegionBufferRadius>0?this.visibleRegionFadeStartRadius/this.visibleRegionBufferRadius:0)>.99,i=o||e===un.Instant?1:0;this.material.uniforms.visibleRegionFadeStartRadius.value=this.visibleRegionFadeStartRadius,this.material.uniforms.visibleRegionRadius.value=this.visibleRegionRadius,this.material.uniforms.firstRenderTime.value=this.firstRenderTime,this.material.uniforms.currentTime.value=performance.now(),this.material.uniforms.fadeInComplete.value=i,this.material.uniformsNeedUpdate=!0,this.visibleRegionChanging=!o}updateRenderIndexes(e,t){const n=this.geometry;n.attributes.splatIndex.set(e),n.attributes.splatIndex.needsUpdate=!0,t>0&&-1===this.firstRenderTime&&(this.firstRenderTime=performance.now()),n.instanceCount=t,n.setDrawRange(0,t)}updateTransforms(){for(let e=0;e<this.scenes.length;e++){this.getScene(e).updateTransform(this.dynamicMode)}}updateUniforms=function(){const t=new e.Vector2;return function(e,n,s,r,o,i){if(this.getSplatCount()>0){if(t.set(e.x*this.devicePixelRatio,e.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(t),this.material.uniforms.basisViewport.value.set(1/t.x,1/t.y),this.material.uniforms.focal.value.set(n,s),this.material.uniforms.orthographicMode.value=r?1:0,this.material.uniforms.orthoZoom.value=o,this.material.uniforms.inverseFocalAdjustment.value=i,this.dynamicMode)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.transforms.value[e].copy(this.getScene(e).transform);if(this.enableOptionalEffects)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.sceneOpacity.value[e]=f(this.getScene(e).opacity,0,1),this.material.uniforms.sceneVisibility.value[e]=this.getScene(e).visible?1:0,this.material.uniformsNeedUpdate=!0;this.material.uniformsNeedUpdate=!0}}}();setSplatScale(e=1){this.splatScale=e,this.material.uniforms.splatScale.value=e,this.material.uniformsNeedUpdate=!0}getSplatScale(){return this.splatScale}setPointCloudModeEnabled(e){this.pointCloudModeEnabled=e,this.material.uniforms.pointCloudModeEnabled.value=e?1:0,this.material.uniformsNeedUpdate=!0}getPointCloudModeEnabled(){return this.pointCloudModeEnabled}getSplatDataTextures(){return this.splatDataTextures}getSplatCount(e=!1){return e?Sn.getTotalSplatCountForScenes(this.scenes):this.lastBuildSplatCount}static getTotalSplatCountForScenes(e){let t=0;for(let n of e)n&&n.splatBuffer&&(t+=n.splatBuffer.getSplatCount());return t}static getTotalSplatCountForSplatBuffers(e){let t=0;for(let n of e)t+=n.getSplatCount();return t}getMaxSplatCount(){return Sn.getTotalMaxSplatCountForScenes(this.scenes)}static getTotalMaxSplatCountForScenes(e){let t=0;for(let n of e)n&&n.splatBuffer&&(t+=n.splatBuffer.getMaxSplatCount());return t}static getTotalMaxSplatCountForSplatBuffers(e){let t=0;for(let n of e)t+=n.getMaxSplatCount();return t}disposeDistancesComputationGPUResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.vao&&(e.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(e.deleteProgram(this.distancesTransformFeedback.program),e.deleteShader(this.distancesTransformFeedback.vertexShader),e.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeDistancesComputationGPUBufferResources(),this.distancesTransformFeedback.id&&(e.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeDistancesComputationGPUBufferResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,e.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(e.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(t){if(t!==this.renderer){this.renderer=t;const n=this.renderer.getContext(),s=new dn(n),r=new pn(n,s,{});if(s.init(r),this.webGLUtils=new e.WebGLUtils(n,s,r),this.enableDistancesComputationOnGPU&&this.getSplatCount()>0){this.setupDistancesComputationTransformFeedback();const{centers:e,sceneIndexes:t}=this.getDataForDistancesComputation(0,this.getSplatCount()-1);this.refreshGPUBuffersForDistancesComputation(e,t)}}}setupDistancesComputationTransformFeedback=function(){let e;return function(){const t=this.getMaxSplatCount();if(!this.renderer)return;const n=this.lastRenderer!==this.renderer,s=e!==t;if(!n&&!s)return;n?this.disposeDistancesComputationGPUResources():s&&this.disposeDistancesComputationGPUBufferResources();const r=this.renderer.getContext(),o=(e,t,n)=>{const s=e.createShader(t);if(!s)return console.error("Fatal error: gl could not create a shader object."),null;e.shaderSource(s,n),e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){let n="unknown";t===e.VERTEX_SHADER?n="vertex shader":t===e.FRAGMENT_SHADER&&(n="fragement shader");const r=e.getShaderInfoLog(s);return console.error("Failed to compile "+n+" with these errors:"+r),e.deleteShader(s),null}return s};let i;this.integerBasedDistancesComputation?(i="#version 300 es\n                in ivec4 center;\n                flat out int distance;",this.dynamicMode?i+=`\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${b.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `:i+="\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    "):(i="#version 300 es\n                in vec4 center;\n                flat out float distance;",this.dynamicMode?i+=`\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${b.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `:i+="\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    ");const a=r.getParameter(r.VERTEX_ARRAY_BINDING),l=r.getParameter(r.CURRENT_PROGRAM),c=!!l&&r.getProgramParameter(l,r.DELETE_STATUS);if(n&&(this.distancesTransformFeedback.vao=r.createVertexArray()),r.bindVertexArray(this.distancesTransformFeedback.vao),n){const e=r.createProgram(),t=o(r,r.VERTEX_SHADER,i),n=o(r,r.FRAGMENT_SHADER,"#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            ");if(!t||!n)throw new Error("Could not compile shaders for distances computation on GPU.");r.attachShader(e,t),r.attachShader(e,n),r.transformFeedbackVaryings(e,["distance"],r.SEPARATE_ATTRIBS),r.linkProgram(e);if(!r.getProgramParameter(e,r.LINK_STATUS)){const s=r.getProgramInfoLog(e);throw console.error("Fatal error: Failed to link program: "+s),r.deleteProgram(e),r.deleteShader(n),r.deleteShader(t),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=e,this.distancesTransformFeedback.vertexShader=t,this.distancesTransformFeedback.vertexShader=n}if(r.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.dynamicMode){this.distancesTransformFeedback.sceneIndexesLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"sceneIndex");for(let e=0;e<this.scenes.length;e++)this.distancesTransformFeedback.transformsLocs[e]=r.getUniformLocation(this.distancesTransformFeedback.program,`transforms[${e}]`)}else this.distancesTransformFeedback.modelViewProjLoc=r.getUniformLocation(this.distancesTransformFeedback.program,"modelViewProj");(n||s)&&(this.distancesTransformFeedback.centersBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?r.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,r.INT,0,0):r.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,r.FLOAT,!1,0,0),this.dynamicMode&&(this.distancesTransformFeedback.sceneIndexesBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),r.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,r.UNSIGNED_INT,0,0))),(n||s)&&(this.distancesTransformFeedback.outDistancesBuffer=r.createBuffer()),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),r.bufferData(r.ARRAY_BUFFER,4*t,r.STATIC_READ),n&&(this.distancesTransformFeedback.id=r.createTransformFeedback()),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),l&&!0!==c&&r.useProgram(l),a&&r.bindVertexArray(a),this.lastRenderer=this.renderer,e=t}}();updateGPUCentersBufferForDistancesComputation(e,t,n){if(!this.renderer)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao);const o=this.integerBasedDistancesComputation?Uint32Array:Float32Array,i=16*n;if(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),e)s.bufferSubData(s.ARRAY_BUFFER,i,t);else{const e=new o(16*this.getMaxSplatCount());e.set(t),s.bufferData(s.ARRAY_BUFFER,e,s.STATIC_DRAW)}s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r)}updateGPUTransformIndexesBufferForDistancesComputation(e,t,n){if(!this.renderer||!this.dynamicMode)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao);const o=4*n;if(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),e)s.bufferSubData(s.ARRAY_BUFFER,o,t);else{const e=new Uint32Array(4*this.getMaxSplatCount());e.set(t),s.bufferData(s.ARRAY_BUFFER,e,s.STATIC_DRAW)}s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r)}getSceneIndexes(e,t){let n;n=new Uint32Array(t-e+1);for(let s=e;s<=t;s++)n[s]=this.globalSplatIndexToSceneIndexMap[s];return n}fillTransformsArray=function(){const e=[];return function(t){e.length!==t.length&&(e.length=t.length);for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).transform.elements;for(let s=0;s<16;s++)e[16*t+s]=n[s]}t.set(e)}}();computeDistancesOnGPU=function(){const t=new e.Matrix4;return function(e,n){if(!this.renderer)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING),o=s.getParameter(s.CURRENT_PROGRAM),i=!!o&&s.getProgramParameter(o,s.DELETE_STATUS);if(s.bindVertexArray(this.distancesTransformFeedback.vao),s.useProgram(this.distancesTransformFeedback.program),s.enable(s.RASTERIZER_DISCARD),this.dynamicMode)for(let n=0;n<this.scenes.length;n++)if(t.copy(this.getScene(n).transform),t.premultiply(e),this.integerBasedDistancesComputation){const e=Sn.getIntegerMatrixArray(t),r=[e[2],e[6],e[10],e[14]];s.uniform4i(this.distancesTransformFeedback.transformsLocs[n],r[0],r[1],r[2],r[3])}else s.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[n],!1,t.elements);else if(this.integerBasedDistancesComputation){const t=Sn.getIntegerMatrixArray(e),n=[t[2],t[6],t[10]];s.uniform3i(this.distancesTransformFeedback.modelViewProjLoc,n[0],n[1],n[2])}else{const t=[e.elements[2],e.elements[6],e.elements[10]];s.uniform3f(this.distancesTransformFeedback.modelViewProjLoc,t[0],t[1],t[2])}s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?s.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,s.INT,0,0):s.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,s.FLOAT,!1,0,0),this.dynamicMode&&(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),s.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,s.UNSIGNED_INT,0,0)),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),s.beginTransformFeedback(s.POINTS),s.drawArrays(s.POINTS,0,this.getSplatCount()),s.endTransformFeedback(),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,null),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),s.disable(s.RASTERIZER_DISCARD);const a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);s.flush();const l=new Promise(e=>{const t=()=>{if(this.disposed)e();else{const r=0,o=0;switch(s.clientWaitSync(a,o,r)){case s.TIMEOUT_EXPIRED:return this.computeDistancesOnGPUSyncTimeout=setTimeout(t),this.computeDistancesOnGPUSyncTimeout;case s.WAIT_FAILED:throw new Error("should never get here");default:this.computeDistancesOnGPUSyncTimeout=null,s.deleteSync(a);const r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao),s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),s.getBufferSubData(s.ARRAY_BUFFER,0,n),s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r),e()}}};this.computeDistancesOnGPUSyncTimeout=setTimeout(t)});return o&&!0!==i&&s.useProgram(o),r&&s.bindVertexArray(r),l}}();getLocalSplatParameters(e,t,n){null==n&&(n=!this.dynamicMode),t.splatBuffer=this.getSplatBufferForSplat(e),t.localIndex=this.getSplatLocalIndex(e),t.sceneTransform=n?this.getSceneTransformForSplat(e):null}fillSplatDataArrays(t,n,s,r,o,i,a,l=0,c=0,h=1,d,p,u=0,m){const A=new e.Vector3;A.x=void 0,A.y=void 0,this.splatRenderMode===$t.ThreeD?A.z=void 0:A.z=1;const f=new e.Matrix4;let g=0,S=this.scenes.length-1;null!=m&&m>=0&&m<=this.scenes.length&&(g=m,S=m);for(let e=g;e<=S;e++){null==a&&(a=!this.dynamicMode);const m=this.getScene(e),g=m.splatBuffer;let S;if(a&&(this.getSceneTransform(e,f),S=f),t&&g.fillSplatCovarianceArray(t,S,d,p,u,l),n||s){if(!n||!s)throw new Error('SplatMesh::fillSplatDataArrays() -> "scales" and "rotations" must both be valid.');g.fillSplatScaleRotationArray(n,s,S,d,p,u,c,A)}r&&g.fillSplatCenterArray(r,S,d,p,u),o&&g.fillSplatColorArray(o,m.minimumAlpha,d,p,u),i&&g.fillSphericalHarmonicsArray(i,this.minSphericalHarmonicsDegree,S,d,p,u,h),u+=g.getSplatCount()}}getIntegerCenters(e,t,n=!1){const s=t-e+1,r=new Float32Array(3*s);let o;this.fillSplatDataArrays(null,null,null,r,null,null,void 0,void 0,void 0,void 0,e);let i=n?4:3;o=new Int32Array(s*i);for(let e=0;e<s;e++){for(let t=0;t<3;t++)o[e*i+t]=Math.round(1e3*r[3*e+t]);n&&(o[e*i+3]=1e3)}return o}getFloatCenters(e,t,n=!1){const s=t-e+1,r=new Float32Array(3*s);if(this.fillSplatDataArrays(null,null,null,r,null,null,void 0,void 0,void 0,void 0,e),!n)return r;let o=new Float32Array(4*s);for(let e=0;e<s;e++){for(let t=0;t<3;t++)o[4*e+t]=r[3*e+t];o[4*e+3]=1}return o}getSplatCenter=function(){const e={};return function(t,n,s){this.getLocalSplatParameters(t,e,s),e.splatBuffer.getSplatCenter(e.localIndex,n,e.sceneTransform)}}();getSplatScaleAndRotation=function(){const t={},n=new e.Vector3;return function(e,s,r,o){this.getLocalSplatParameters(e,t,o),n.x=void 0,n.y=void 0,n.z=void 0,this.splatRenderMode===$t.TwoD&&(n.z=0),t.splatBuffer.getSplatScaleAndRotation(t.localIndex,s,r,t.sceneTransform,n)}}();getSplatColor=function(){const e={};return function(t,n){this.getLocalSplatParameters(t,e),e.splatBuffer.getSplatColor(e.localIndex,n)}}();getSceneTransform(e,t){const n=this.getScene(e);n.updateTransform(this.dynamicMode),t.copy(n.transform)}getScene(e){if(e<0||e>=this.scenes.length)throw new Error("SplatMesh::getScene() -> Invalid scene index.");return this.scenes[e]}getSceneCount(){return this.scenes.length}getSplatBufferForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).splatBuffer}getSceneIndexForSplat(e){return this.globalSplatIndexToSceneIndexMap[e]}getSceneTransformForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).transform}getSplatLocalIndex(e){return this.globalSplatIndexToLocalSplatIndexMap[e]}static getIntegerMatrixArray(e){const t=e.elements,n=[];for(let e=0;e<16;e++)n[e]=Math.round(1e3*t[e]);return n}computeBoundingBox(t=!1,n){let s=this.getSplatCount();if(null!=n){if(n<0||n>=this.scenes.length)throw new Error("SplatMesh::computeBoundingBox() -> Invalid scene index.");s=this.scenes[n].splatBuffer.getSplatCount()}const r=new Float32Array(3*s);this.fillSplatDataArrays(null,null,null,r,null,null,t,void 0,void 0,void 0,void 0,n);const o=new e.Vector3,i=new e.Vector3;for(let e=0;e<s;e++){const t=3*e,n=r[t],s=r[t+1],a=r[t+2];(0===e||n<o.x)&&(o.x=n),(0===e||s<o.y)&&(o.y=s),(0===e||a<o.z)&&(o.z=a),(0===e||n>i.x)&&(i.x=n),(0===e||s>i.y)&&(i.y=s),(0===e||a>i.z)&&(i.z=a)}return new e.Box3(o,i)}}var Cn="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";function yn(e){let t,n,s,r,o,i,a,l,c,h,d,p,u,m,A,f,g,S,C,y;e.onmessage=x=>{if(x.data.centers)centers=x.data.centers,sceneIndexes=x.data.sceneIndexes,r?new Int32Array(n,m+x.data.range.from*y.BytesPerInt*4,4*x.data.range.count).set(new Int32Array(centers)):new Float32Array(n,m+x.data.range.from*y.BytesPerFloat*4,4*x.data.range.count).set(new Float32Array(centers)),o&&new Uint32Array(n,c+4*x.data.range.from,x.data.range.count).set(new Uint32Array(sceneIndexes)),C=x.data.range.from+x.data.range.count;else if(x.data.sort){const v=Math.min(x.data.sort.splatRenderCount||0,C),I=Math.min(x.data.sort.splatSortCount||0,C),B=x.data.sort.usePrecomputedDistances;let w,D,b;s||(w=x.data.sort.indexesToSort,b=x.data.sort.transforms,B&&(D=x.data.sort.precomputedDistances)),function(C,x,v,I,B,w,D){const b=performance.now();if(!s&&(new Uint32Array(n,a,B.byteLength/y.BytesPerInt).set(B),new Float32Array(n,h,D.byteLength/y.BytesPerFloat).set(D),I)){let e;e=r?new Int32Array(n,d,w.byteLength/y.BytesPerInt):new Float32Array(n,d,w.byteLength/y.BytesPerFloat),e.set(w)}f||(f=new Uint32Array(S)),new Float32Array(n,A,16).set(v),new Uint32Array(n,u,S).set(f),t.exports.sortIndexes(a,m,d,p,u,A,l,c,h,S,C,x,i,I,r,o);const T={sortDone:!0,splatSortCount:C,splatRenderCount:x,sortTime:0};if(!s){const e=new Uint32Array(n,l,x);(!g||g.length<x)&&(g=new Uint32Array(x)),g.set(e),T.sortedIndexes=g}const E=performance.now();T.sortTime=E-b,e.postMessage(T)}(I,v,x.data.sort.modelViewProj,B,w,D,b)}else if(x.data.init){y=x.data.init.Constants,i=x.data.init.splatCount,s=x.data.init.useSharedMemory,r=x.data.init.integerBasedSort,o=x.data.init.dynamicMode,S=x.data.init.distanceMapRange,C=0;const f=r?4*y.BytesPerInt:4*y.BytesPerFloat,g=new Uint8Array(x.data.init.sorterWasmBytes),v=16*y.BytesPerFloat,I=i*y.BytesPerInt,B=i*f,w=v,D=r?i*y.BytesPerInt:i*y.BytesPerFloat,b=i*y.BytesPerInt,T=i*y.BytesPerInt,E=r?S*y.BytesPerInt*2:S*y.BytesPerFloat*2,M=o?i*y.BytesPerInt:0,F=o?y.MaxScenes*v:0,R=32*y.MemoryPageSize,P=I+B+w+D+b+E+T+M+F+R,H=Math.floor(P/y.MemoryPageSize)+1,k={module:{},env:{memory:new WebAssembly.Memory({initial:H,maximum:H,shared:!0})}};WebAssembly.compile(g).then(e=>WebAssembly.instantiate(e,k)).then(r=>{t=r,a=0,m=a+I,A=m+B,d=A+w,p=d+D,u=p+b,l=u+E,c=l+T,h=c+M,n=k.env.memory.buffer,s?e.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:n,indexesToSortOffset:a,sortedIndexesBuffer:n,sortedIndexesOffset:l,precomputedDistancesBuffer:n,precomputedDistancesOffset:d,transformsBuffer:n,transformsOffset:h}):e.postMessage({sortSetupPhase1Complete:!0})})}}}const xn={None:0,VR:1,AR:2};class vn{static createButton(e,t={}){const n=document.createElement("button");function s(){n.style.display="",n.style.cursor="auto",n.style.left="calc(50% - 75px)",n.style.width="150px",n.onmouseenter=null,n.onmouseleave=null,n.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return n.id="VRButton",n.style.display="none",r(n),navigator.xr.isSessionSupported("immersive-vr").then(function(r){r?function(){let s=null;async function r(t){t.addEventListener("end",o),await e.xr.setSession(t),n.textContent="EXIT VR",s=t}function o(){s.removeEventListener("end",o),n.textContent="ENTER VR",s=null}n.style.display="",n.style.cursor="pointer",n.style.left="calc(50% - 50px)",n.style.width="100px",n.textContent="ENTER VR";const i={...t,optionalFeatures:["local-floor","bounded-floor","layers",...t.optionalFeatures||[]]};n.onmouseenter=function(){n.style.opacity="1.0"},n.onmouseleave=function(){n.style.opacity="0.5"},n.onclick=function(){null===s?navigator.xr.requestSession("immersive-vr",i).then(r):(s.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(r).catch(e=>{console.warn(e)}))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(r).catch(e=>{console.warn(e)})}():(s(),n.textContent="VR NOT SUPPORTED"),r&&vn.xrSessionIsGranted&&n.click()}).catch(function(e){s(),console.warn("Exception when trying to call xr.isSessionSupported",e),n.textContent="VR NOT ALLOWED"}),n;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}static registerSessionGrantedListener(){if("undefined"!=typeof navigator&&"xr"in navigator){if(/WebXRViewer\//i.test(navigator.userAgent))return;navigator.xr.addEventListener("sessiongranted",()=>{vn.xrSessionIsGranted=!0})}}}vn.xrSessionIsGranted=!1,vn.registerSessionGrantedListener();class In{static createButton(e,t={}){const n=document.createElement("button");function s(){n.style.display="",n.style.cursor="auto",n.style.left="calc(50% - 75px)",n.style.width="150px",n.onmouseenter=null,n.onmouseleave=null,n.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return n.id="ARButton",n.style.display="none",r(n),navigator.xr.isSessionSupported("immersive-ar").then(function(r){r?function(){if(void 0===t.domOverlay){const e=document.createElement("div");e.style.display="none",document.body.appendChild(e);const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("width",38),n.setAttribute("height",38),n.style.position="absolute",n.style.right="20px",n.style.top="20px",n.addEventListener("click",function(){s.end()}),e.appendChild(n);const r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M 12,12 L 28,28 M 28,12 12,28"),r.setAttribute("stroke","#fff"),r.setAttribute("stroke-width",2),n.appendChild(r),void 0===t.optionalFeatures&&(t.optionalFeatures=[]),t.optionalFeatures.push("dom-overlay"),t.domOverlay={root:e}}let s=null;async function r(r){r.addEventListener("end",o),e.xr.setReferenceSpaceType("local"),await e.xr.setSession(r),n.textContent="STOP AR",t.domOverlay.root.style.display="",s=r}function o(){s.removeEventListener("end",o),n.textContent="START AR",t.domOverlay.root.style.display="none",s=null}n.style.display="",n.style.cursor="pointer",n.style.left="calc(50% - 50px)",n.style.width="100px",n.textContent="START AR",n.onmouseenter=function(){n.style.opacity="1.0"},n.onmouseleave=function(){n.style.opacity="0.5"},n.onclick=function(){null===s?navigator.xr.requestSession("immersive-ar",t).then(r):(s.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch(e=>{console.warn(e)}))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch(e=>{console.warn(e)})}():(s(),n.textContent="AR NOT SUPPORTED")}).catch(function(e){s(),console.warn("Exception when trying to call xr.isSessionSupported",e),n.textContent="AR NOT ALLOWED"}),n;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}}const Bn={Always:0,OnChange:1,Never:2};class wn{constructor(t={}){if(t.cameraUp||(t.cameraUp=[0,1,0]),this.cameraUp=(new e.Vector3).fromArray(t.cameraUp),t.initialCameraPosition||(t.initialCameraPosition=[0,10,15]),this.initialCameraPosition=(new e.Vector3).fromArray(t.initialCameraPosition),t.initialCameraLookAt||(t.initialCameraLookAt=[0,0,0]),this.initialCameraLookAt=(new e.Vector3).fromArray(t.initialCameraLookAt),this.dropInMode=t.dropInMode||!1,void 0!==t.selfDrivenMode&&null!==t.selfDrivenMode||(t.selfDrivenMode=!0),this.selfDrivenMode=t.selfDrivenMode&&!this.dropInMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),void 0===t.useBuiltInControls&&(t.useBuiltInControls=!0),this.useBuiltInControls=t.useBuiltInControls,this.rootElement=t.rootElement,this.ignoreDevicePixelRatio=t.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio||1,this.halfPrecisionCovariancesOnGPU=t.halfPrecisionCovariancesOnGPU||!1,this.threeScene=t.threeScene,this.renderer=t.renderer,this.camera=t.camera,this.gpuAcceleratedSort=t.gpuAcceleratedSort||!1,void 0!==t.integerBasedSort&&null!==t.integerBasedSort||(t.integerBasedSort=!0),this.integerBasedSort=t.integerBasedSort,void 0!==t.sharedMemoryForWorkers&&null!==t.sharedMemoryForWorkers||(t.sharedMemoryForWorkers=!0),this.sharedMemoryForWorkers=t.sharedMemoryForWorkers,this.dynamicScene=!!t.dynamicScene,this.antialiased=t.antialiased||!1,this.kernel2DSize=void 0===t.kernel2DSize?.3:t.kernel2DSize,this.webXRMode=t.webXRMode||xn.None,this.webXRMode!==xn.None&&(this.gpuAcceleratedSort=!1),this.webXRActive=!1,this.webXRSessionInit=t.webXRSessionInit||{},this.renderMode=t.renderMode||Bn.Always,this.sceneRevealMode=t.sceneRevealMode||un.Default,this.focalAdjustment=t.focalAdjustment||1,this.maxScreenSpaceSplatSize=t.maxScreenSpaceSplatSize||1024,this.logLevel=t.logLevel||mn.None,this.sphericalHarmonicsDegree=t.sphericalHarmonicsDegree||0,this.enableOptionalEffects=t.enableOptionalEffects||!1,void 0!==t.enableSIMDInSort&&null!==t.enableSIMDInSort||(t.enableSIMDInSort=!0),this.enableSIMDInSort=t.enableSIMDInSort,void 0!==t.inMemoryCompressionLevel&&null!==t.inMemoryCompressionLevel||(t.inMemoryCompressionLevel=0),this.inMemoryCompressionLevel=t.inMemoryCompressionLevel,void 0!==t.optimizeSplatData&&null!==t.optimizeSplatData||(t.optimizeSplatData=!0),this.optimizeSplatData=t.optimizeSplatData,void 0!==t.freeIntermediateSplatData&&null!==t.freeIntermediateSplatData||(t.freeIntermediateSplatData=!1),this.freeIntermediateSplatData=t.freeIntermediateSplatData,B()){const e=w();e.major<17&&(this.enableSIMDInSort=!1),e.major<16&&(this.sharedMemoryForWorkers=!1)}void 0!==t.splatRenderMode&&null!==t.splatRenderMode||(t.splatRenderMode=$t.ThreeD),this.splatRenderMode=t.splatRenderMode,this.sceneFadeInRateMultiplier=t.sceneFadeInRateMultiplier||1,this.splatSortDistanceMapPrecision=t.splatSortDistanceMapPrecision||b.DefaultSplatSortDistanceMapPrecision;const n=this.integerBasedSort?20:24;this.splatSortDistanceMapPrecision=f(this.splatSortDistanceMapPrecision,10,n),this.onSplatMeshChangedCallback=null,this.createSplatMesh(),this.controls=null,this.perspectiveControls=null,this.orthographicControls=null,this.orthographicCamera=null,this.perspectiveCamera=null,this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.splatSortCount=0,this.lastSplatSortCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.preSortMessages=[],this.runAfterNextSort=[],this.selfDrivenModeRunning=!1,this.splatRenderReady=!1,this.raycaster=new en,this.infoPanel=null,this.startInOrthographicMode=!1,this.currentFPS=0,this.lastSortTime=0,this.consecutiveRenderFrames=0,this.previousCameraTarget=new e.Vector3,this.nextCameraTarget=new e.Vector3,this.mousePosition=new e.Vector2,this.mouseDownPosition=new e.Vector2,this.mouseDownTime=null,this.resizeObserver=null,this.mouseMoveListener=null,this.mouseDownListener=null,this.mouseUpListener=null,this.keyDownListener=null,this.sortPromise=null,this.sortPromiseResolver=null,this.splatSceneDownloadPromises={},this.splatSceneDownloadAndBuildPromise=null,this.splatSceneRemovalPromise=null,this.loadingSpinner=new Vt(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.loadingProgressBar=new Nt(this.rootElement||document.body),this.loadingProgressBar.hide(),this.infoPanel=new Gt(this.rootElement||document.body),this.infoPanel.hide(),this.usingExternalCamera=!(!this.dropInMode&&!this.camera),this.usingExternalRenderer=!(!this.dropInMode&&!this.renderer),this.initialized=!1,this.disposing=!1,this.disposed=!1,this.disposePromise=null,this.dropInMode||this.init()}createSplatMesh(){this.splatMesh=new Sn(this.splatRenderMode,this.dynamicScene,this.enableOptionalEffects,this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort,this.integerBasedSort,this.antialiased,this.maxScreenSpaceSplatSize,this.logLevel,this.sphericalHarmonicsDegree,this.sceneFadeInRateMultiplier,this.kernel2DSize),this.splatMesh.frustumCulled=!1,this.onSplatMeshChangedCallback&&this.onSplatMeshChangedCallback()}init(){this.initialized||(this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement))),this.setupCamera(),this.setupRenderer(),this.setupWebXR(this.webXRSessionInit),this.setupControls(),this.setupEventHandlers(),this.threeScene=this.threeScene||new e.Scene,this.sceneHelper=new Wt(this.threeScene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.loadingProgressBar.setContainer(this.rootElement),this.loadingSpinner.setContainer(this.rootElement),this.infoPanel.setContainer(this.rootElement),this.initialized=!0)}setupCamera(){if(!this.usingExternalCamera){const t=new e.Vector2;this.getRenderDimensions(t),this.perspectiveCamera=new e.PerspectiveCamera(50,t.x/t.y,.1,1e3),this.orthographicCamera=new e.OrthographicCamera(t.x/-2,t.x/2,t.y/2,t.y/-2,.1,1e3),this.camera=this.startInOrthographicMode?this.orthographicCamera:this.perspectiveCamera,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)}}setupRenderer(){if(console.log("Setting up renderer"),!this.usingExternalRenderer){const t=new e.Vector2;this.getRenderDimensions(t),this.renderer=new e.WebGLRenderer({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(new e.Color(0),0),this.resizeObserver=new ResizeObserver(()=>{this.getRenderDimensions(t),this.renderer.setSize(t.x,t.y),this.forceRenderNextFrame()}),this.resizeObserver.observe(this.rootElement),console.log(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)}}setupWebXR(e){this.webXRMode&&(this.webXRMode===xn.VR?this.rootElement.appendChild(vn.createButton(this.renderer,e)):this.webXRMode===xn.AR&&this.rootElement.appendChild(In.createButton(this.renderer,e)),this.renderer.xr.addEventListener("sessionstart",e=>{this.webXRActive=!0}),this.renderer.xr.addEventListener("sessionend",e=>{this.webXRActive=!1}),this.renderer.xr.enabled=!0,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt))}setupControls(){if(this.useBuiltInControls&&this.webXRMode===xn.None){this.usingExternalCamera?this.camera.isOrthographicCamera?this.orthographicControls=new Qt(this.camera,this.renderer.domElement):this.perspectiveControls=new Qt(this.camera,this.renderer.domElement):(this.perspectiveControls=new Qt(this.perspectiveCamera,this.renderer.domElement),this.orthographicControls=new Qt(this.orthographicCamera,this.renderer.domElement));for(let e of[this.orthographicControls,this.perspectiveControls])e&&(e.listenToKeyEvents(window),e.rotateSpeed=.5,e.maxPolarAngle=.75*Math.PI,e.minPolarAngle=.1,e.enableDamping=!0,e.dampingFactor=.05,e.target.copy(this.initialCameraLookAt),e.update());this.controls=this.camera.isOrthographicCamera?this.orthographicControls:this.perspectiveControls,this.controls.update()}}setupEventHandlers(){this.useBuiltInControls&&this.webXRMode===xn.None&&(this.mouseMoveListener=this.onMouseMove.bind(this),this.renderer.domElement.addEventListener("pointermove",this.mouseMoveListener,!1),this.mouseDownListener=this.onMouseDown.bind(this),this.renderer.domElement.addEventListener("pointerdown",this.mouseDownListener,!1),this.mouseUpListener=this.onMouseUp.bind(this),this.renderer.domElement.addEventListener("pointerup",this.mouseUpListener,!1),this.keyDownListener=this.onKeyDown.bind(this),window.addEventListener("keydown",this.keyDownListener,!1))}removeEventHandlers(){this.useBuiltInControls&&(this.renderer.domElement.removeEventListener("pointermove",this.mouseMoveListener),this.mouseMoveListener=null,this.renderer.domElement.removeEventListener("pointerdown",this.mouseDownListener),this.mouseDownListener=null,this.renderer.domElement.removeEventListener("pointerup",this.mouseUpListener),this.mouseUpListener=null,window.removeEventListener("keydown",this.keyDownListener),this.keyDownListener=null)}setRenderMode(e){this.renderMode=e}setActiveSphericalHarmonicsDegrees(e){this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value=e,this.splatMesh.material.uniformsNeedUpdate=!0}onSplatMeshChanged(e){this.onSplatMeshChangedCallback=e}onKeyDown=function(){const t=new e.Vector3,n=new e.Matrix4,s=new e.Matrix4;return function(e){switch(t.set(0,0,-1),t.transformDirection(this.camera.matrixWorld),n.makeRotationAxis(t,Math.PI/128),s.makeRotationAxis(t,-Math.PI/128),e.code){case"KeyG":this.focalAdjustment+=.02,this.forceRenderNextFrame();break;case"KeyF":this.focalAdjustment-=.02,this.forceRenderNextFrame();break;case"ArrowLeft":this.camera.up.transformDirection(n);break;case"ArrowRight":this.camera.up.transformDirection(s);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyU":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.show():this.infoPanel.hide();break;case"KeyO":this.usingExternalCamera||this.setOrthographicMode(!this.camera.isOrthographicCamera);break;case"KeyP":this.usingExternalCamera||this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());break;case"Equal":this.usingExternalCamera||this.splatMesh.setSplatScale(this.splatMesh.getSplatScale()+.05);break;case"Minus":this.usingExternalCamera||this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale()-.05,0))}}}();onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=g()}onMouseUp=function(){const t=new e.Vector2;return function(e){t.copy(this.mousePosition).sub(this.mouseDownPosition);g()-this.mouseDownTime<.5&&t.length()<2&&this.onMouseClick(e)}}();onMouseClick(e){this.mousePosition.set(e.offsetX,e.offsetY),this.checkForFocalPointChange()}checkForFocalPointChange=function(){const t=new e.Vector2,n=new e.Vector3,s=[];return function(){if(!this.transitioningCameraTarget&&(this.getRenderDimensions(t),s.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.raycaster.intersectSplatMesh(this.splatMesh,s),s.length>0)){const e=s[0].origin;n.copy(e).sub(this.camera.position),n.length()>.75&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(e),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=g())}}}();getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}setOrthographicMode(e){if(e===this.camera.isOrthographicCamera)return;const t=this.camera,n=e?this.orthographicCamera:this.perspectiveCamera;if(n.position.copy(t.position),n.up.copy(t.up),n.rotation.copy(t.rotation),n.quaternion.copy(t.quaternion),n.matrix.copy(t.matrix),this.camera=n,this.controls){const s=e=>{e.saveState(),e.reset()},r=this.controls,o=e?this.orthographicControls:this.perspectiveControls;s(o),s(r),o.target.copy(r.target),e?wn.setCameraZoomFromPosition(n,t,r):wn.setCameraPositionFromZoom(n,t,o),this.controls=o,this.camera.lookAt(this.controls.target)}}static setCameraPositionFromZoom=function(){const t=new e.Vector3;return function(e,n,s){const r=1/(.001*n.zoom);t.copy(s.target).sub(e.position).normalize().multiplyScalar(r).negate(),e.position.copy(s.target).add(t)}}();static setCameraZoomFromPosition=function(){const t=new e.Vector3;return function(e,n,s){const r=t.copy(s.target).sub(n.position).length();e.zoom=1/(.001*r)}}();updateSplatMesh=function(){const t=new e.Vector2;return function(){if(!this.splatMesh)return;if(this.splatMesh.getSplatCount()>0){this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode),this.splatMesh.updateTransforms(),this.getRenderDimensions(t);const e=.5*this.camera.projectionMatrix.elements[0]*this.devicePixelRatio*t.x,n=.5*this.camera.projectionMatrix.elements[5]*this.devicePixelRatio*t.y,s=this.camera.isOrthographicCamera?1/this.devicePixelRatio:1,r=this.focalAdjustment*s,o=1/r;this.adjustForWebXRStereo(t),this.splatMesh.updateUniforms(t,e*r,n*r,this.camera.isOrthographicCamera,this.camera.zoom||1,o)}}}();adjustForWebXRStereo(e){if(this.camera&&this.webXRActive){const t=this.renderer.xr.getCamera().projectionMatrix.elements[0],n=this.camera.projectionMatrix.elements[0];e.x*=n/t}}isLoadingOrUnloading(){return Object.keys(this.splatSceneDownloadPromises).length>0||null!==this.splatSceneDownloadAndBuildPromise||null!==this.splatSceneRemovalPromise}isDisposingOrDisposed(){return this.disposing||this.disposed}addSplatSceneDownloadPromise(e){this.splatSceneDownloadPromises[e.id]=e}removeSplatSceneDownloadPromise(e){delete this.splatSceneDownloadPromises[e.id]}setSplatSceneDownloadAndBuildPromise(e){this.splatSceneDownloadAndBuildPromise=e}clearSplatSceneDownloadAndBuildPromise(){this.splatSceneDownloadAndBuildPromise=null}addSplatScene(e,t={}){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");t.progressiveLoad&&this.splatMesh.scenes&&this.splatMesh.scenes.length>0&&(console.log('addSplatScene(): "progressiveLoad" option ignore because there are multiple splat scenes'),t.progressiveLoad=!1);const n=void 0!==t.format&&null!==t.format?t.format:Pt(e),s=wn.isProgressivelyLoadable(n)&&t.progressiveLoad,r=void 0===t.showLoadingUI||null===t.showLoadingUI||t.showLoadingUI;let o=null;r&&(this.loadingSpinner.removeAllTasks(),o=this.loadingSpinner.addTask("Downloading..."));const i=(e,t,n)=>{if(r)if(n===ct)if(100==e)this.loadingSpinner.setMessageForTask(o,"Download complete!");else if(s)this.loadingSpinner.setMessageForTask(o,"Downloading splats...");else{const e=t?`: ${t}`:"...";this.loadingSpinner.setMessageForTask(o,`Downloading${e}`)}else n===ht&&this.loadingSpinner.setMessageForTask(o,"Processing splats...")};let a=!1,l=0;const c=(e,t)=>{r&&((e&&s||t&&!s)&&(this.loadingSpinner.removeTask(o),t||a||this.loadingProgressBar.show()),s&&(t?(a=!0,this.loadingProgressBar.hide()):this.loadingProgressBar.setProgress(l)))};return(s?this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this):this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this))(e,n,t.splatAlphaRemovalThreshold,((e,n,o)=>{!s&&t.onProgress&&t.onProgress(0,"0%",ht);const i={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};return this.addSplatBuffers([e],[i],o,n&&r,r,s,s).then(()=>{!s&&t.onProgress&&t.onProgress(100,"100%",ht),c(n,o)})}).bind(this),(e,n,s)=>{l=e,i(e,n,s),t.onProgress&&t.onProgress(e,n,s)},(()=>{this.loadingProgressBar.hide(),this.loadingSpinner.removeAllTasks()}).bind(this),t.headers)}downloadAndBuildSingleSplatSceneStandardLoad(e,t,n,s,r,o,i){const a=this.downloadSplatSceneToSplatBuffer(e,n,r,!1,void 0,t,i),l=v(a.abortHandler);return a.then(e=>(this.removeSplatSceneDownloadPromise(a),s(e,!0,!0).then(()=>{l.resolve(),this.clearSplatSceneDownloadAndBuildPromise()}))).catch(t=>{o&&o(),this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(a),l.reject(this.updateError(t,`Viewer::addSplatScene -> Could not load file ${e}`))}),this.addSplatSceneDownloadPromise(a),this.setSplatSceneDownloadAndBuildPromise(l.promise),l.promise}downloadAndBuildSingleSplatSceneProgressiveLoad(e,t,n,s,r,o,i){let a=0,l=!1;const c=[],h=()=>{if(c.length>0&&!l&&!this.isDisposingOrDisposed()){l=!0;const e=c.shift();s(e.splatBuffer,e.firstBuild,e.finalBuild).then(()=>{l=!1,e.firstBuild?p.resolve():e.finalBuild&&(u.resolve(),this.clearSplatSceneDownloadAndBuildPromise()),c.length>0&&C(()=>h())})}},d=this.downloadSplatSceneToSplatBuffer(e,n,r,!0,(e,t)=>{this.isDisposingOrDisposed()||(t||0===c.length||e.getSplatCount()>c[0].splatBuffer.getSplatCount())&&(c.push({splatBuffer:e,firstBuild:0===a,finalBuild:t}),a++,h())},t,i),p=v(d.abortHandler),u=v();return this.addSplatSceneDownloadPromise(d),this.setSplatSceneDownloadAndBuildPromise(u.promise),d.then(()=>{this.removeSplatSceneDownloadPromise(d)}).catch(e=>{this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(d);const t=this.updateError(e,"Viewer::addSplatScene -> Could not load one or more scenes");p.reject(t),o&&o(t)}),p.promise}addSplatScenes(e,t=!0,n=void 0){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const s=e.length,r=[];let o;t&&(this.loadingSpinner.removeAllTasks(),o=this.loadingSpinner.addTask("Downloading..."));const i=(e,i,a,l)=>{r[e]=i;let c=0;for(let e=0;e<s;e++)c+=r[e]||0;c/=s,a=`${c.toFixed(2)}%`,t&&l===ct&&this.loadingSpinner.setMessageForTask(o,100==c?"Download complete!":`Downloading: ${a}`),n&&n(c,a,l)},a=[],l=[];for(let t=0;t<e.length;t++){const n=e[t],s=void 0!==n.format&&null!==n.format?n.format:Pt(n.path),r=this.downloadSplatSceneToSplatBuffer(n.path,n.splatAlphaRemovalThreshold,i.bind(this,t),!1,void 0,s,n.headers);a.push(r),l.push(r.promise)}const c=new d((s,r)=>{Promise.all(l).then(r=>{t&&this.loadingSpinner.removeTask(o),n&&n(0,"0%",ht),this.addSplatBuffers(r,e,!0,t,t,!1,!1).then(()=>{n&&n(100,"100%",ht),this.clearSplatSceneDownloadAndBuildPromise(),s()})}).catch(e=>{t&&this.loadingSpinner.removeTask(o),this.clearSplatSceneDownloadAndBuildPromise(),r(this.updateError(e,"Viewer::addSplatScenes -> Could not load one or more splat scenes."))}).finally(()=>{this.removeSplatSceneDownloadPromise(c)})},e=>{for(let t of a)t.abort(e)});return this.addSplatSceneDownloadPromise(c),this.setSplatSceneDownloadAndBuildPromise(c),c}downloadSplatSceneToSplatBuffer(e,t=1,n=void 0,s=!1,r=void 0,o,i){try{if(o===Rt.Splat||o===Rt.KSplat||o===Rt.Ply){const a=!s&&this.optimizeSplatData;if(o===Rt.Splat)return Mt.loadFromURL(e,n,s,r,t,this.inMemoryCompressionLevel,a,i);if(o===Rt.KSplat)return Ft.loadFromURL(e,n,s,r,i);if(o===Rt.Ply)return St.loadFromURL(e,n,s,r,t,this.inMemoryCompressionLevel,a,this.sphericalHarmonicsDegree,i)}else if(o===Rt.Spz)return bt.loadFromURL(e,n,t,this.inMemoryCompressionLevel,this.optimizeSplatData,this.sphericalHarmonicsDegree,i)}catch(e){throw this.updateError(e,null)}throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${e}`)}static isProgressivelyLoadable(e){return e===Rt.Splat||e===Rt.KSplat||e===Rt.Ply}addSplatBuffers=function(){return function(e,t=[],n=!0,s=!0,r=!0,o=!1,i=!1,a=!0){if(this.isDisposingOrDisposed())return Promise.resolve();let l=null;const c=()=>{null!==l&&(this.loadingSpinner.removeTask(l),l=null)};return this.splatRenderReady=!1,new Promise(h=>{s&&(l=this.loadingSpinner.addTask("Processing splats...")),C(()=>{if(this.isDisposingOrDisposed())h();else{const s=this.addSplatBuffersToMesh(e,t,n,r,o,a),l=this.splatMesh.getMaxSplatCount();this.sortWorker&&this.sortWorker.maxSplatCount!==l&&this.disposeSortWorker(),this.gpuAcceleratedSort||this.preSortMessages.push({centers:s.centers.buffer,sceneIndexes:s.sceneIndexes.buffer,range:{from:s.from,to:s.to,count:s.count}});(!this.sortWorker&&l>0?this.setupSortWorker(this.splatMesh):Promise.resolve()).then(()=>{this.isDisposingOrDisposed()||this.runSplatSort(!0,!0).then(e=>{this.sortWorker&&e?(i?this.splatRenderReady=!0:this.runAfterNextSort.push(()=>{this.splatRenderReady=!0}),this.runAfterNextSort.push(()=>{c(),h()})):(this.splatRenderReady=!0,c(),h())})})}},!0)})}}();addSplatBuffersToMesh=function(){let e;return function(t,n,s=!0,r=!1,o=!1,i=!0){if(this.isDisposingOrDisposed())return;let a=[],l=[];o||(a=this.splatMesh.scenes.map(e=>e.splatBuffer)||[],l=this.splatMesh.sceneOptions?this.splatMesh.sceneOptions.map(e=>e):[]),a.push(...t),l.push(...n),this.renderer&&this.splatMesh.setRenderer(this.renderer);const c=this.splatMesh.build(a,l,!0,s,t=>{if(this.isDisposingOrDisposed())return;const n=this.splatMesh.getSplatCount();r&&n>=15e5&&(t||e||(this.loadingSpinner.setMinimized(!0,!0),e=this.loadingSpinner.addTask("Optimizing data structures...")))},t=>{this.isDisposingOrDisposed()||t&&e&&(this.loadingSpinner.removeTask(e),e=null)},i);return s&&this.freeIntermediateSplatData&&this.splatMesh.freeIntermediateSplatData(),c}}();setupSortWorker(e){if(!this.isDisposingOrDisposed())return new Promise(t=>{const n=this.integerBasedSort?Int32Array:Float32Array,s=e.getSplatCount(),r=e.getMaxSplatCount();this.sortWorker=function(e,t,n,s,r,o=b.DefaultSplatSortDistanceMapPrecision){const i=new Worker(URL.createObjectURL(new Blob(["(",yn.toString(),")(self)"],{type:"application/javascript"})));let a="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";const l=B()?w():null;n||t?n?t||l&&l.major<=16&&l.minor<4&&(a="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"):a=Cn:(a=Cn,l&&l.major<=16&&l.minor<4&&(a="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"));const c=atob(a),h=new Uint8Array(c.length);for(let e=0;e<c.length;e++)h[e]=c.charCodeAt(e);return i.postMessage({init:{sorterWasmBytes:h.buffer,splatCount:e,useSharedMemory:t,integerBasedSort:s,dynamicMode:r,distanceMapRange:1<<o,Constants:{BytesPerFloat:b.BytesPerFloat,BytesPerInt:b.BytesPerInt,MemoryPageSize:b.MemoryPageSize,MaxScenes:b.MaxScenes}}}),i}(r,this.sharedMemoryForWorkers,this.enableSIMDInSort,this.integerBasedSort,this.splatMesh.dynamicMode,this.splatSortDistanceMapPrecision),this.sortWorker.onmessage=e=>{if(e.data.sortDone){if(this.sortRunning=!1,this.sharedMemoryForWorkers)this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes,e.data.splatRenderCount);else{const t=new Uint32Array(e.data.sortedIndexes.buffer,0,e.data.splatRenderCount);this.splatMesh.updateRenderIndexes(t,e.data.splatRenderCount)}this.lastSplatSortCount=this.splatSortCount,this.lastSortTime=e.data.sortTime,this.sortPromiseResolver(),this.sortPromiseResolver=null,this.forceRenderNextFrame(),this.runAfterNextSort.length>0&&(this.runAfterNextSort.forEach(e=>{e()}),this.runAfterNextSort.length=0)}else if(e.data.sortCanceled)this.sortRunning=!1;else if(e.data.sortSetupPhase1Complete){this.logLevel>=mn.Info&&console.log("Sorting web worker WASM setup complete."),this.sharedMemoryForWorkers?(this.sortWorkerSortedIndexes=new Uint32Array(e.data.sortedIndexesBuffer,e.data.sortedIndexesOffset,r),this.sortWorkerIndexesToSort=new Uint32Array(e.data.indexesToSortBuffer,e.data.indexesToSortOffset,r),this.sortWorkerPrecomputedDistances=new n(e.data.precomputedDistancesBuffer,e.data.precomputedDistancesOffset,r),this.sortWorkerTransforms=new Float32Array(e.data.transformsBuffer,e.data.transformsOffset,16*b.MaxScenes)):(this.sortWorkerIndexesToSort=new Uint32Array(r),this.sortWorkerPrecomputedDistances=new n(r),this.sortWorkerTransforms=new Float32Array(16*b.MaxScenes));for(let e=0;e<s;e++)this.sortWorkerIndexesToSort[e]=e;if(this.sortWorker.maxSplatCount=r,this.logLevel>=mn.Info){console.log("Sorting web worker ready.");const e=this.splatMesh.getSplatDataTextures(),t=e.covariances.size,n=e.centerColors.size;console.log("Covariances texture size: "+t.x+" x "+t.y),console.log("Centers/colors texture size: "+n.x+" x "+n.y)}t()}}})}updateError(e,t){return e instanceof p?e:e instanceof pt?new Error("File type or server does not support progressive loading."):t?new Error(t):e}disposeSortWorker(){this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortPromise=null,this.sortPromiseResolver&&(this.sortPromiseResolver(),this.sortPromiseResolver=null),this.preSortMessages=[],this.sortRunning=!1}removeSplatScene(e,t=!0){return this.removeSplatScenes([e],t)}removeSplatScenes(e,t=!0){if(this.isLoadingOrUnloading())throw new Error("Cannot remove splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot remove splat scene after dispose() is called.");let n;return this.splatSceneRemovalPromise=new Promise((s,r)=>{let o;t&&(this.loadingSpinner.removeAllTasks(),this.loadingSpinner.show(),o=this.loadingSpinner.addTask("Removing splat scene..."));const i=()=>{t&&(this.loadingSpinner.hide(),this.loadingSpinner.removeTask(o))},a=e=>{i(),this.splatSceneRemovalPromise=null,e?r(e):s()},l=()=>!!this.isDisposingOrDisposed()&&(a(),!0);n=this.sortPromise||Promise.resolve(),n.then(()=>{if(l())return;const t=[],s=[],r=[];for(let n=0;n<this.splatMesh.scenes.length;n++){let o=!1;for(let t of e)if(t===n){o=!0;break}if(!o){const e=this.splatMesh.scenes[n];t.push(e.splatBuffer),s.push(this.splatMesh.sceneOptions[n]),r.push({position:e.position.clone(),quaternion:e.quaternion.clone(),scale:e.scale.clone()})}}this.disposeSortWorker(),this.splatMesh.dispose(),this.sceneRevealMode=un.Instant,this.createSplatMesh(),this.addSplatBuffers(t,s,!0,!1,!0).then(()=>{l()||(i(),this.splatMesh.scenes.forEach((e,t)=>{e.position.copy(r[t].position),e.quaternion.copy(r[t].quaternion),e.scale.copy(r[t].scale)}),this.splatMesh.updateTransforms(),this.splatRenderReady=!1,this.runSplatSort(!0).then(()=>{l()?this.splatRenderReady=!0:(n=this.sortPromise||Promise.resolve(),n.then(()=>{this.splatRenderReady=!0,a()}))}))}).catch(e=>{a(e)})})}),this.splatSceneRemovalPromise}start(){if(!this.selfDrivenMode)throw new Error("Cannot start viewer unless it is in self driven mode.");this.webXRMode?this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc):this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(this.webXRMode?this.renderer.setAnimationLoop(null):cancelAnimationFrame(this.requestFrameId),this.selfDrivenModeRunning=!1)}async dispose(){if(this.isDisposingOrDisposed())return this.disposePromise;let e=[],t=[];for(let n in this.splatSceneDownloadPromises)if(this.splatSceneDownloadPromises.hasOwnProperty(n)){const s=this.splatSceneDownloadPromises[n];t.push(s),e.push(s.promise)}return this.sortPromise&&e.push(this.sortPromise),this.disposing=!0,this.disposePromise=Promise.all(e).finally(()=>{this.stop(),this.orthographicControls&&(this.orthographicControls.dispose(),this.orthographicControls=null),this.perspectiveControls&&(this.perspectiveControls.dispose(),this.perspectiveControls=null),this.controls=null,this.splatMesh&&(this.splatMesh.dispose(),this.splatMesh=null),this.sceneHelper&&(this.sceneHelper.dispose(),this.sceneHelper=null),this.resizeObserver&&(this.resizeObserver.unobserve(this.rootElement),this.resizeObserver=null),this.disposeSortWorker(),this.removeEventHandlers(),this.loadingSpinner.removeAllTasks(),this.loadingSpinner.setContainer(null),this.loadingProgressBar.hide(),this.loadingProgressBar.setContainer(null),this.infoPanel.setContainer(null),this.camera=null,this.threeScene=null,this.splatRenderReady=!1,this.initialized=!1,this.renderer&&(this.usingExternalRenderer||(this.rootElement.removeChild(this.renderer.domElement),this.renderer.dispose()),this.renderer=null),this.usingExternalRenderer||document.body.removeChild(this.rootElement),this.sortWorkerSortedIndexes=null,this.sortWorkerIndexesToSort=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.disposed=!0,this.disposing=!1,this.disposePromise=null}),t.forEach(e=>{e.abort("Scene disposed")}),this.disposePromise}selfDrivenUpdate(){this.selfDrivenMode&&!this.webXRMode&&(this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc)),this.update(),this.shouldRender()?(this.render(),this.consecutiveRenderFrames++):this.consecutiveRenderFrames=0,this.renderNextFrame=!1}forceRenderNextFrame(){this.renderNextFrame=!0}shouldRender=function(){let t=0;const n=new e.Vector3,s=new e.Quaternion,r=1e-4;return function(){if(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())return!1;let e=!1,o=!1;if(this.camera){const e=this.camera.position,t=this.camera.quaternion;o=Math.abs(e.x-n.x)>r||Math.abs(e.y-n.y)>r||Math.abs(e.z-n.z)>r||Math.abs(t.x-s.x)>r||Math.abs(t.y-s.y)>r||Math.abs(t.z-s.z)>r||Math.abs(t.w-s.w)>r}return e=this.renderMode!==Bn.Never&&(0===t||this.splatMesh.visibleRegionChanging||o||this.renderMode===Bn.Always||!0===this.dynamicMode||this.renderNextFrame),this.camera&&(n.copy(this.camera.position),s.copy(this.camera.quaternion)),t++,e}}();render=function(){if(!this.initialized||!this.splatRenderReady||this.isDisposingOrDisposed())return;const e=this.renderer.autoClear;(e=>{for(let t of e.children)if(t.visible)return!0;return!1})(this.threeScene)&&(this.renderer.render(this.threeScene,this.camera),this.renderer.autoClear=!1),this.renderer.render(this.splatMesh,this.camera),this.renderer.autoClear=!1,this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=e};update(e,t){this.dropInMode&&this.updateForDropInMode(e,t),this.initialized&&this.splatRenderReady&&!this.isDisposingOrDisposed()&&(this.controls&&(this.controls.update(),this.camera.isOrthographicCamera&&!this.usingExternalCamera&&wn.setCameraPositionFromZoom(this.camera,this.camera,this.controls)),this.runSplatSort(),this.updateForRendererSizeChanges(),this.updateSplatMesh(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfoPanel(),this.updateControlPlane())}updateForDropInMode(e,t){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer),this.camera=t,this.controls&&(this.controls.object=t),this.init()}updateFPS=function(){let e=g(),t=0;return function(){if(this.consecutiveRenderFrames>60){const n=g();n-e>=1?(this.currentFPS=t,t=0,e=n):t++}else this.currentFPS=null}}();updateForRendererSizeChanges=function(){const t=new e.Vector2,n=new e.Vector2;let s;return function(){this.usingExternalCamera||(this.renderer.getSize(n),void 0!==s&&s===this.camera.isOrthographicCamera&&n.x===t.x&&n.y===t.y||(this.camera.isOrthographicCamera?(this.camera.left=-n.x/2,this.camera.right=n.x/2,this.camera.top=n.y/2,this.camera.bottom=-n.y/2):this.camera.aspect=n.x/n.y,this.camera.updateProjectionMatrix(),t.copy(n),s=this.camera.isOrthographicCamera))}}();timingSensitiveUpdates=function(){let e;return function(){const t=g();e||(e=t);const n=t-e;this.updateCameraTransition(t),this.updateFocusMarker(n),e=t}}();updateCameraTransition=function(){let t=new e.Vector3,n=new e.Vector3,s=new e.Vector3;return function(e){if(this.transitioningCameraTarget){n.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),s.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const r=Math.acos(n.dot(s)),o=(r/(Math.PI/3)*.65+.3)/r*(e-this.transitioningCameraTargetStartTime);t.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,o),this.camera.lookAt(t),this.controls.target.copy(t),o>=1&&(this.transitioningCameraTarget=!1)}}}();updateFocusMarker=function(){const t=new e.Vector2;let n=!1;return function(e){if(this.getRenderDimensions(t),this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const s=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let r=Math.min(s+10*e,1);this.sceneHelper.setFocusMarkerOpacity(r),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t),n=!0,this.forceRenderNextFrame()}else{let s;if(s=n?1:Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),s>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t);let n=Math.max(s-2.5*e,0);this.sceneHelper.setFocusMarkerOpacity(n),0===n&&this.sceneHelper.setFocusMarkerVisibility(!1)}s>0&&this.forceRenderNextFrame(),n=!1}}}();updateMeshCursor=function(){const t=[],n=new e.Vector2;return function(){this.showMeshCursor?(this.forceRenderNextFrame(),this.getRenderDimensions(n),t.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,n),this.raycaster.intersectSplatMesh(this.splatMesh,t),t.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(t[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):(this.sceneHelper.getMeschCursorVisibility()&&this.forceRenderNextFrame(),this.sceneHelper.setMeshCursorVisibility(!1))}}();updateInfoPanel=function(){const t=new e.Vector2;return function(){if(!this.showInfo)return;const e=this.splatMesh.getSplatCount();this.getRenderDimensions(t);const n=this.controls?this.controls.target:null,s=this.showMeshCursor?this.sceneHelper.meshCursor.position:null,r=e>0?this.splatRenderCount/e*100:0;this.infoPanel.update(t,this.camera.position,n,this.camera.up,this.camera.isOrthographicCamera,s,this.currentFPS||"N/A",e,this.splatRenderCount,r,this.lastSortTime,this.focalAdjustment,this.splatMesh.getSplatScale(),this.splatMesh.getPointCloudModeEnabled())}}();updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}runSplatSort=function(){const t=new e.Matrix4,n=[],s=new e.Vector3(0,0,-1),r=new e.Vector3(0,0,-1),o=new e.Vector3,i=new e.Vector3,a=[],l=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return function(e=!1,c=!1){if(!this.initialized)return Promise.resolve(!1);if(this.sortRunning)return Promise.resolve(!0);if(this.splatMesh.getSplatCount()<=0)return this.splatRenderCount=0,Promise.resolve(!1);let h=0,d=0,p=!1,u=!1;if(r.set(0,0,-1).applyQuaternion(this.camera.quaternion),h=r.dot(s),d=i.copy(this.camera.position).sub(o).length(),!(e||this.splatMesh.dynamicMode||0!==a.length||(h<=.99&&(p=!0),d>=1&&(u=!0),p||u)))return Promise.resolve(!1);this.sortRunning=!0;let{splatRenderCount:m,shouldSortAll:A}=this.gatherSceneNodesForSort();A=A||c,this.splatRenderCount=m,t.copy(this.camera.matrixWorld).invert();const f=this.perspectiveCamera||this.camera;t.premultiply(f.projectionMatrix),this.splatMesh.dynamicMode||t.multiply(this.splatMesh.matrixWorld);let g=Promise.resolve(!0);return this.gpuAcceleratedSort&&(a.length<=1||a.length%2==0)&&(g=this.splatMesh.computeDistancesOnGPU(t,this.sortWorkerPrecomputedDistances)),g.then(()=>{if(0===a.length)if(this.splatMesh.dynamicMode||A)a.push(this.splatRenderCount);else{for(let e of l)if(h<e.angleThreshold){for(let t of e.sortFractions)a.push(Math.floor(this.splatRenderCount*t));break}a.push(this.splatRenderCount)}let e=Math.min(a.shift(),this.splatRenderCount);this.splatSortCount=e,n[0]=this.camera.position.x,n[1]=this.camera.position.y,n[2]=this.camera.position.z;const i={modelViewProj:t.elements,cameraPosition:n,splatRenderCount:this.splatRenderCount,splatSortCount:e,usePrecomputedDistances:this.gpuAcceleratedSort};return this.splatMesh.dynamicMode&&this.splatMesh.fillTransformsArray(this.sortWorkerTransforms),this.sharedMemoryForWorkers||(i.indexesToSort=this.sortWorkerIndexesToSort,i.transforms=this.sortWorkerTransforms,this.gpuAcceleratedSort&&(i.precomputedDistances=this.sortWorkerPrecomputedDistances)),this.sortPromise=new Promise(e=>{this.sortPromiseResolver=e}),this.preSortMessages.length>0&&(this.preSortMessages.forEach(e=>{this.sortWorker.postMessage(e)}),this.preSortMessages=[]),this.sortWorker.postMessage({sort:i}),0===a.length&&(o.copy(this.camera.position),s.copy(r)),!0}),g}}();gatherSceneNodesForSort=function(){const t=[];let n=null;const s=new e.Vector3,r=new e.Vector3,o=new e.Vector3,i=new e.Matrix4,a=new e.Matrix4,l=new e.Matrix4,c=new e.Vector3,h=new e.Vector3(0,0,-1),d=new e.Vector3,p=e=>d.copy(e.max).sub(e.min).length();return function(d=!1){this.getRenderDimensions(c);const u=c.y/2/Math.tan(this.camera.fov/2*e.MathUtils.DEG2RAD),m=Math.atan(c.x/2/u),A=Math.atan(c.y/2/u),f=Math.cos(m),g=Math.cos(A),S=this.splatMesh.getSplatTree();if(S){a.copy(this.camera.matrixWorld).invert(),this.splatMesh.dynamicMode||a.multiply(this.splatMesh.matrixWorld);let e=0,n=0;for(let c=0;c<S.subTrees.length;c++){const u=S.subTrees[c];i.copy(a),this.splatMesh.dynamicMode&&(this.splatMesh.getSceneTransform(c,l),i.multiply(l));const m=u.nodesWithIndexes.length;for(let a=0;a<m;a++){const l=u.nodesWithIndexes[a];if(!l.data||!l.data.indexes||0===l.data.indexes.length)continue;o.copy(l.center).applyMatrix4(i);const c=o.length();o.normalize(),s.copy(o).setX(0).normalize(),r.copy(o).setY(0).normalize();const m=h.dot(r),A=h.dot(s),S=p(l);!d&&(m<f-.6||A<g-.6)&&c>S||(n+=l.data.indexes.length,t[e]=l,l.data.distanceToNode=c,e++)}}t.length=e,t.sort((e,t)=>e.data.distanceToNode<t.data.distanceToNode?-1:1);let c=n*b.BytesPerInt;for(let n=0;n<e;n++){const e=t[n],s=e.data.indexes.length,r=s*b.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,c-r,s).set(e.data.indexes),c-=r}return{splatRenderCount:n,shouldSortAll:!1}}{const e=this.splatMesh.getSplatCount();if(!n||n.length!==e){n=new Uint32Array(e);for(let t=0;t<e;t++)n[t]=t}return this.sortWorkerIndexesToSort.set(n),{splatRenderCount:e,shouldSortAll:!0}}}}();getSplatMesh(){return this.splatMesh}getSplatScene(e){return this.splatMesh.getScene(e)}getSceneCount(){return this.splatMesh.getSceneCount()}isMobile(){return navigator.userAgent.includes("Mobi")}}class Dn extends e.Group{constructor(e={}){super(),e.selfDrivenMode=!1,e.useBuiltInControls=!1,e.rootElement=null,e.dropInMode=!0,e.camera=void 0,e.renderer=void 0,this.viewer=new wn(e),this.splatMesh=null,this.updateSplatMesh(),this.callbackMesh=Dn.createCallbackMesh(),this.add(this.callbackMesh),this.callbackMesh.onBeforeRender=Dn.onBeforeRender.bind(this,this.viewer),this.viewer.onSplatMeshChanged(()=>{this.updateSplatMesh()})}updateSplatMesh(){this.splatMesh!==this.viewer.splatMesh&&(this.splatMesh&&this.remove(this.splatMesh),this.splatMesh=this.viewer.splatMesh,this.add(this.viewer.splatMesh))}addSplatScene(e,t={}){return!1!==t.showLoadingUI&&(t.showLoadingUI=!0),this.viewer.addSplatScene(e,t)}addSplatScenes(e,t){return!1!==t&&(t=!0),this.viewer.addSplatScenes(e,t)}getSplatScene(e){return this.viewer.getSplatScene(e)}removeSplatScene(e,t=!0){return this.viewer.removeSplatScene(e,t)}removeSplatScenes(e,t=!0){return this.viewer.removeSplatScenes(e,t)}getSceneCount(){return this.viewer.getSceneCount()}setActiveSphericalHarmonicsDegrees(e){this.viewer.setActiveSphericalHarmonicsDegrees(e)}async dispose(){return await this.viewer.dispose()}static onBeforeRender(e,t,n,s){e.update(t,s)}static createCallbackMesh(){const t=new e.SphereGeometry(1,8,8),n=new e.MeshBasicMaterial;n.colorWrite=!1,n.depthWrite=!1;const s=new e.Mesh(t,n);return s.frustumCulled=!1,s}}export{d as AbortablePromise,Dn as DropInViewer,Ft as KSplatLoader,Ht as LoaderUtils,mn as LogLevel,Qt as OrbitControls,j as PlayCanvasCompressedPlyParser,St as PlyLoader,it as PlyParser,Bn as RenderMode,Rt as SceneFormat,un as SceneRevealMode,z as SplatBuffer,lt as SplatBufferGenerator,Mt as SplatLoader,Tt as SplatParser,at as SplatPartitioner,$t as SplatRenderMode,bt as SpzLoader,wn as Viewer,xn as WebXRMode};
//# sourceMappingURL=gaussian-splats-3d.module.min.js.map
